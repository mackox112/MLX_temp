
Nucleo_STM32Cube_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006c80  08006c80  00016c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080070e4  080070e4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e4  080070e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e0  080072cc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080072cc  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd3e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1c  00000000  00000000  0002bf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184de  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8c5  00000000  00000000  000475e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087cef  00000000  00000000  00052eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dab9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000dabf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c64 	.word	0x08006c64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006c64 	.word	0x08006c64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <mlx90632_i2c_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c1, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	2174      	movs	r1, #116	; 0x74
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <mlx90632_i2c_read+0x48>)
 8000aaa:	f001 ff7d 	bl	80029a8 <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 8000ab2:	7a7b      	ldrb	r3, [r7, #9]
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	801a      	strh	r2, [r3, #0]
	return ret;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000218 	.word	0x20000218

08000ad4 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address, uint32_t *value)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	80fb      	strh	r3, [r7, #6]
	uint8_t data[4];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c1, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2302      	movs	r3, #2
 8000af2:	2174      	movs	r1, #116	; 0x74
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <mlx90632_i2c_read32+0x50>)
 8000af6:	f001 ff57 	bl	80029a8 <HAL_I2C_Mem_Read>
 8000afa:	4603      	mov	r3, r0
 8000afc:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	061a      	lsls	r2, r3, #24
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	431a      	orrs	r2, r3
 8000b08:	7a3b      	ldrb	r3, [r7, #8]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	7a7a      	ldrb	r2, [r7, #9]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	601a      	str	r2, [r3, #0]
	return ret;
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000218 	.word	0x20000218

08000b28 <mlx90632_i2c_write>:

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4613      	mov	r3, r2
 8000b36:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c1, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 8000b48:	88fa      	ldrh	r2, [r7, #6]
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2302      	movs	r3, #2
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2302      	movs	r3, #2
 8000b5a:	2174      	movs	r1, #116	; 0x74
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <mlx90632_i2c_write+0x44>)
 8000b5e:	f001 fe29 	bl	80027b4 <HAL_I2C_Mem_Write>
 8000b62:	4603      	mov	r3, r0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000218 	.word	0x20000218

08000b70 <mlx90632_read_eeprom>:

/* Implementation of reading all calibration parameters for calucation of Ta and To */
static int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
	int32_t ret;
	ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR);
 8000b7e:	68f9      	ldr	r1, [r7, #12]
 8000b80:	f242 400c 	movw	r0, #9228	; 0x240c
 8000b84:	f7ff ffa6 	bl	8000ad4 <mlx90632_i2c_read32>
 8000b88:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	da01      	bge.n	8000b94 <mlx90632_read_eeprom+0x24>
		return ret;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	e084      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG);
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	f242 400e 	movw	r0, #9230	; 0x240e
 8000b9a:	f7ff ff9b 	bl	8000ad4 <mlx90632_i2c_read32>
 8000b9e:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da01      	bge.n	8000baa <mlx90632_read_eeprom+0x3a>
		return ret;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	e079      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO);
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f242 4012 	movw	r0, #9234	; 0x2412
 8000bb0:	f7ff ff90 	bl	8000ad4 <mlx90632_i2c_read32>
 8000bb4:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da01      	bge.n	8000bc0 <mlx90632_read_eeprom+0x50>
		return ret;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	e06e      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT);
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	f242 4010 	movw	r0, #9232	; 0x2410
 8000bc6:	f7ff ff85 	bl	8000ad4 <mlx90632_i2c_read32>
 8000bca:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <mlx90632_read_eeprom+0x66>
		return ret;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	e063      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea);
 8000bd6:	6a39      	ldr	r1, [r7, #32]
 8000bd8:	f242 4024 	movw	r0, #9252	; 0x2424
 8000bdc:	f7ff ff7a 	bl	8000ad4 <mlx90632_i2c_read32>
 8000be0:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da01      	bge.n	8000bec <mlx90632_read_eeprom+0x7c>
		return ret;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e058      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb);
 8000bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bee:	f242 4026 	movw	r0, #9254	; 0x2426
 8000bf2:	f7ff ff6f 	bl	8000ad4 <mlx90632_i2c_read32>
 8000bf6:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da01      	bge.n	8000c02 <mlx90632_read_eeprom+0x92>
		return ret;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	e04d      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa);
 8000c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c04:	f242 4028 	movw	r0, #9256	; 0x2428
 8000c08:	f7ff ff64 	bl	8000ad4 <mlx90632_i2c_read32>
 8000c0c:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da01      	bge.n	8000c18 <mlx90632_read_eeprom+0xa8>
		return ret;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	e042      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb);
 8000c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c1a:	f242 402a 	movw	r0, #9258	; 0x242a
 8000c1e:	f7ff ff59 	bl	8000ad4 <mlx90632_i2c_read32>
 8000c22:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <mlx90632_read_eeprom+0xbe>
		return ret;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	e037      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga);
 8000c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c30:	f242 402c 	movw	r0, #9260	; 0x242c
 8000c34:	f7ff ff4e 	bl	8000ad4 <mlx90632_i2c_read32>
 8000c38:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da01      	bge.n	8000c44 <mlx90632_read_eeprom+0xd4>
		return ret;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	e02c      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb);
 8000c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c46:	f242 402e 	movw	r0, #9262	; 0x242e
 8000c4a:	f7ff ff1d 	bl	8000a88 <mlx90632_i2c_read>
 8000c4e:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da01      	bge.n	8000c5a <mlx90632_read_eeprom+0xea>
		return ret;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	e021      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha);
 8000c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c5c:	f242 4081 	movw	r0, #9345	; 0x2481
 8000c60:	f7ff ff12 	bl	8000a88 <mlx90632_i2c_read>
 8000c64:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da01      	bge.n	8000c70 <mlx90632_read_eeprom+0x100>
		return ret;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	e016      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb);
 8000c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c72:	f242 4082 	movw	r0, #9346	; 0x2482
 8000c76:	f7ff ff07 	bl	8000a88 <mlx90632_i2c_read>
 8000c7a:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da01      	bge.n	8000c86 <mlx90632_read_eeprom+0x116>
		return ret;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	e00b      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka);
 8000c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000c88:	f242 402f 	movw	r0, #9263	; 0x242f
 8000c8c:	f7ff fefc 	bl	8000a88 <mlx90632_i2c_read>
 8000c90:	6178      	str	r0, [r7, #20]
	if(ret < 0)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da01      	bge.n	8000c9c <mlx90632_read_eeprom+0x12c>
		return ret;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	e000      	b.n	8000c9e <mlx90632_read_eeprom+0x12e>
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <usleep>:

void usleep(int min_range, int max_range) {
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	while(--min_range);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f9      	bne.n	8000cb0 <usleep+0xa>
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ccc:	b098      	sub	sp, #96	; 0x60
 8000cce:	af0a      	add	r7, sp, #40	; 0x28
    /* Loop forever */
	printf("Hello World\n");
 8000cd0:	486f      	ldr	r0, [pc, #444]	; (8000e90 <main+0x1c8>)
 8000cd2:	f003 fe71 	bl	80049b8 <puts>

  /* USER CODE BEGIN 1 */
mlx90632_init();
 8000cd6:	f000 fecd 	bl	8001a74 <mlx90632_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f001 f8f9 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f8fb 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f99d 	bl	8001020 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce6:	f000 f971 	bl	8000fcc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cea:	f000 f941 	bl	8000f70 <MX_I2C1_Init>
	/* Definition of MLX90632 calibration parameters */
	int16_t ambient_new_raw;
	int16_t ambient_old_raw;
	int16_t object_new_raw;
	int16_t object_old_raw;
	int32_t PR = 0x00587f5b;
 8000cee:	4b69      	ldr	r3, [pc, #420]	; (8000e94 <main+0x1cc>)
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PG = 0x04a10289;
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <main+0x1d0>)
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t PT = 0xfff966f8;
 8000cf6:	4b69      	ldr	r3, [pc, #420]	; (8000e9c <main+0x1d4>)
 8000cf8:	623b      	str	r3, [r7, #32]
	int32_t PO = 0x00001e0f;
 8000cfa:	f641 630f 	movw	r3, #7695	; 0x1e0f
 8000cfe:	61fb      	str	r3, [r7, #28]
	int32_t Ea = 4859535;
 8000d00:	4b67      	ldr	r3, [pc, #412]	; (8000ea0 <main+0x1d8>)
 8000d02:	61bb      	str	r3, [r7, #24]
	int32_t Eb = 5686508;
 8000d04:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <main+0x1dc>)
 8000d06:	617b      	str	r3, [r7, #20]
	int32_t Fa = 53855361;
 8000d08:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <main+0x1e0>)
 8000d0a:	613b      	str	r3, [r7, #16]
	int32_t Fb = 42874149;
 8000d0c:	4b67      	ldr	r3, [pc, #412]	; (8000eac <main+0x1e4>)
 8000d0e:	60fb      	str	r3, [r7, #12]
	int32_t Ga = -14556410;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <main+0x1e8>)
 8000d12:	60bb      	str	r3, [r7, #8]
	int16_t Ha = 16384;
 8000d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d18:	80fb      	strh	r3, [r7, #6]
	int16_t Hb = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	80bb      	strh	r3, [r7, #4]
	int16_t Gb = 9728;
 8000d1e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000d22:	807b      	strh	r3, [r7, #2]
	int16_t Ka = 10752;
 8000d24:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000d28:	803b      	strh	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Read EEPROM calibration parameters */
	mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka);
 8000d2a:	f107 0420 	add.w	r4, r7, #32
 8000d2e:	f107 021c 	add.w	r2, r7, #28
 8000d32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d36:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	9308      	str	r3, [sp, #32]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	9306      	str	r3, [sp, #24]
 8000d46:	1cbb      	adds	r3, r7, #2
 8000d48:	9305      	str	r3, [sp, #20]
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	9304      	str	r3, [sp, #16]
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4623      	mov	r3, r4
 8000d6a:	f7ff ff01 	bl	8000b70 <mlx90632_read_eeprom>

  while (1)
  {
		/* Get raw data from MLX90632 */
		int32_t ret = mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw, &object_new_raw, &object_old_raw);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8000d76:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d7a:	f107 0032 	add.w	r0, r7, #50	; 0x32
 8000d7e:	f000 fb21 	bl	80013c4 <mlx90632_read_temp_raw>
 8000d82:	6378      	str	r0, [r7, #52]	; 0x34
	//	if(ret < 0)
	        /* Something went wrong - abort */
//	        return ret;

		/* Pre-calculations for ambient and object temperature calculation */
		printf("anr: %d, aor: %d\nonr: %d, oor: %d\n",
 8000d84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000d94:	4618      	mov	r0, r3
 8000d96:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4845      	ldr	r0, [pc, #276]	; (8000eb4 <main+0x1ec>)
 8000da0:	f003 fd84 	bl	80048ac <iprintf>
				ambient_new_raw, ambient_old_raw,
				object_new_raw, object_old_raw);
		pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 8000da4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000da8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8000dac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fb2b 	bl	800140c <mlx90632_preprocess_temp_ambient>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	493f      	ldr	r1, [pc, #252]	; (8000eb8 <main+0x1f0>)
 8000dbc:	e9c1 2300 	strd	r2, r3, [r1]
		pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw, ambient_new_raw, ambient_old_raw, Ka);
 8000dc0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000dc4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8000dc8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8000dcc:	f9b7 4030 	ldrsh.w	r4, [r7, #48]	; 0x30
 8000dd0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	f000 fb7a 	bl	80014d0 <mlx90632_preprocess_temp_object>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4936      	ldr	r1, [pc, #216]	; (8000ebc <main+0x1f4>)
 8000de2:	e9c1 2300 	strd	r2, r3, [r1]
		/* Set emissivity = 1 */
		mlx90632_set_emissivity(1.0);
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <main+0x1f8>)
 8000dec:	f000 fd9a 	bl	8001924 <mlx90632_set_emissivity>
		/* Calculate ambient and object temperature */
		ambient = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw, PT, PR, PG, PO, Gb);
 8000df0:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	; 0x32
 8000df4:	f9b7 4030 	ldrsh.w	r4, [r7, #48]	; 0x30
 8000df8:	6a3d      	ldr	r5, [r7, #32]
 8000dfa:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e04:	9102      	str	r1, [sp, #8]
 8000e06:	9201      	str	r2, [sp, #4]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	4633      	mov	r3, r6
 8000e0c:	462a      	mov	r2, r5
 8000e0e:	4621      	mov	r1, r4
 8000e10:	f000 fbcc 	bl	80015ac <mlx90632_calc_temp_ambient>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	492a      	ldr	r1, [pc, #168]	; (8000ec4 <main+0x1fc>)
 8000e1a:	e9c1 2300 	strd	r2, r3, [r1]
		object = mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <main+0x1f4>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fe06 	bl	8000a38 <__aeabi_d2iz>
 8000e2c:	4680      	mov	r8, r0
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <main+0x1f0>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fdfe 	bl	8000a38 <__aeabi_d2iz>
 8000e3c:	4684      	mov	ip, r0
 8000e3e:	69bd      	ldr	r5, [r7, #24]
 8000e40:	697e      	ldr	r6, [r7, #20]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e4c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000e50:	9404      	str	r4, [sp, #16]
 8000e52:	9003      	str	r0, [sp, #12]
 8000e54:	9102      	str	r1, [sp, #8]
 8000e56:	9201      	str	r2, [sp, #4]
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4633      	mov	r3, r6
 8000e5c:	462a      	mov	r2, r5
 8000e5e:	4661      	mov	r1, ip
 8000e60:	4640      	mov	r0, r8
 8000e62:	f000 fd8d 	bl	8001980 <mlx90632_calc_temp_object>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4917      	ldr	r1, [pc, #92]	; (8000ec8 <main+0x200>)
 8000e6c:	e9c1 2300 	strd	r2, r3, [r1]
		printf("Ambient: %f", ambient);
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <main+0x1fc>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4815      	ldr	r0, [pc, #84]	; (8000ecc <main+0x204>)
 8000e78:	f003 fd18 	bl	80048ac <iprintf>
		printf("Hello world!");
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <main+0x208>)
 8000e7e:	f003 fd15 	bl	80048ac <iprintf>
		printf("Object: %f", object);
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <main+0x200>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <main+0x20c>)
 8000e8a:	f003 fd0f 	bl	80048ac <iprintf>
  {
 8000e8e:	e76e      	b.n	8000d6e <main+0xa6>
 8000e90:	08006c80 	.word	0x08006c80
 8000e94:	00587f5b 	.word	0x00587f5b
 8000e98:	04a10289 	.word	0x04a10289
 8000e9c:	fff966f8 	.word	0xfff966f8
 8000ea0:	004a268f 	.word	0x004a268f
 8000ea4:	0056c4ec 	.word	0x0056c4ec
 8000ea8:	0335c481 	.word	0x0335c481
 8000eac:	028e3525 	.word	0x028e3525
 8000eb0:	ff21e306 	.word	0xff21e306
 8000eb4:	08006c8c 	.word	0x08006c8c
 8000eb8:	200002d0 	.word	0x200002d0
 8000ebc:	20000270 	.word	0x20000270
 8000ec0:	3ff00000 	.word	0x3ff00000
 8000ec4:	20000280 	.word	0x20000280
 8000ec8:	20000278 	.word	0x20000278
 8000ecc:	08006cb0 	.word	0x08006cb0
 8000ed0:	08006cbc 	.word	0x08006cbc
 8000ed4:	08006ccc 	.word	0x08006ccc

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	; 0x40
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	2228      	movs	r2, #40	; 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 f878 	bl	8003fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000efe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000f16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fb03 	bl	800352c <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f2c:	f000 f91e 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f3c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f42:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fd6d 	bl	8003a2c <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f58:	f000 f908 	bl	800116c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000f62:	2000      	movs	r0, #0
 8000f64:	f002 fe4c 	bl	8003c00 <HAL_RCC_MCOConfig>
}
 8000f68:	bf00      	nop
 8000f6a:	3740      	adds	r7, #64	; 0x40
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <MX_I2C1_Init+0x54>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x58>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 116;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f88:	2274      	movs	r2, #116	; 0x74
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fae:	f001 fabd 	bl	800252c <HAL_I2C_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb8:	f000 f8d8 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	00061a80 	.word	0x00061a80

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART2_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8001004:	f002 fee4 	bl	8003dd0 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f8ad 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000288 	.word	0x20000288
 800101c:	40004400 	.word	0x40004400

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_GPIO_Init+0x138>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <MX_GPIO_Init+0x138>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_GPIO_Init+0x138>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_GPIO_Init+0x138>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a41      	ldr	r2, [pc, #260]	; (8001158 <MX_GPIO_Init+0x138>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <MX_GPIO_Init+0x138>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_GPIO_Init+0x138>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <MX_GPIO_Init+0x138>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_GPIO_Init+0x138>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_GPIO_Init+0x138>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a35      	ldr	r2, [pc, #212]	; (8001158 <MX_GPIO_Init+0x138>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_GPIO_Init+0x138>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2120      	movs	r1, #32
 8001098:	4830      	ldr	r0, [pc, #192]	; (800115c <MX_GPIO_Init+0x13c>)
 800109a:	f001 fa0d 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	482e      	ldr	r0, [pc, #184]	; (8001160 <MX_GPIO_Init+0x140>)
 80010a6:	f001 fa07 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2110      	movs	r1, #16
 80010ae:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_GPIO_Init+0x144>)
 80010b0:	f001 fa02 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_GPIO_Init+0x148>)
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <MX_GPIO_Init+0x140>)
 80010ca:	f001 f871 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ce:	2320      	movs	r3, #32
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_GPIO_Init+0x13c>)
 80010e6:	f001 f863 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <MX_GPIO_Init+0x140>)
 8001104:	f001 f854 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_GPIO_Init+0x13c>)
 800111e:	f001 f847 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001122:	2310      	movs	r3, #16
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_GPIO_Init+0x144>)
 800113a:	f001 f839 	bl	80021b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2028      	movs	r0, #40	; 0x28
 8001144:	f000 fffd 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f001 f816 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800
 8001160:	40011000 	.word	0x40011000
 8001164:	40010c00 	.word	0x40010c00
 8001168:	10110000 	.word	0x10110000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>

08001176 <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	4619      	mov	r1, r3
 8001184:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001188:	f7ff fc7e 	bl	8000a88 <mlx90632_i2c_read>
 800118c:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da01      	bge.n	8001198 <mlx90632_start_measurement+0x22>
        return ret;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	e033      	b.n	8001200 <mlx90632_start_measurement+0x8a>

    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY));
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80011a6:	f7ff fcbf 	bl	8000b28 <mlx90632_i2c_write>
 80011aa:	60b8      	str	r0, [r7, #8]
    if (ret < 0)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da18      	bge.n	80011e4 <mlx90632_start_measurement+0x6e>
        return ret;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	e024      	b.n	8001200 <mlx90632_start_measurement+0x8a>

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	4619      	mov	r1, r3
 80011ba:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80011be:	f7ff fc63 	bl	8000a88 <mlx90632_i2c_read>
 80011c2:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da01      	bge.n	80011ce <mlx90632_start_measurement+0x58>
            return ret;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	e018      	b.n	8001200 <mlx90632_start_measurement+0x8a>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10b      	bne.n	80011f0 <mlx90632_start_measurement+0x7a>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 80011d8:	f642 21f8 	movw	r1, #11000	; 0x2af8
 80011dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80011e0:	f7ff fd61 	bl	8000ca6 <usleep>
    while (tries-- > 0)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	60fa      	str	r2, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dce3      	bgt.n	80011b6 <mlx90632_start_measurement+0x40>
 80011ee:	e000      	b.n	80011f2 <mlx90632_start_measurement+0x7c>
            break;
 80011f0:	bf00      	nop
    }

    if (tries < 0)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da02      	bge.n	80011fe <mlx90632_start_measurement+0x88>
    {
        // data not ready
        return -ETIMEDOUT;
 80011f8:	f06f 0373 	mvn.w	r3, #115	; 0x73
 80011fc:	e000      	b.n	8001200 <mlx90632_start_measurement+0x8a>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    switch (ret)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d003      	beq.n	8001222 <mlx90632_channel_new_select+0x1a>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d007      	beq.n	8001230 <mlx90632_channel_new_select+0x28>
 8001220:	e00d      	b.n	800123e <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
            break;
 800122e:	e009      	b.n	8001244 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
            break;
 800123c:	e002      	b.n	8001244 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 800123e:	f06f 0315 	mvn.w	r3, #21
 8001242:	e000      	b.n	8001246 <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp);
 800125a:	f107 030a 	add.w	r3, r7, #10
 800125e:	4619      	mov	r1, r3
 8001260:	f244 0005 	movw	r0, #16389	; 0x4005
 8001264:	f7ff fc10 	bl	8000a88 <mlx90632_i2c_read>
 8001268:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	da01      	bge.n	8001274 <mlx90632_read_temp_ambient_raw+0x24>
        return ret;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	e015      	b.n	80012a0 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_new_raw = (int16_t)read_tmp;
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp);
 800127c:	f107 030a 	add.w	r3, r7, #10
 8001280:	4619      	mov	r1, r3
 8001282:	f244 0008 	movw	r0, #16392	; 0x4008
 8001286:	f7ff fbff 	bl	8000a88 <mlx90632_i2c_read>
 800128a:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da01      	bge.n	8001296 <mlx90632_read_temp_ambient_raw+0x46>
        return ret;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	e004      	b.n	80012a0 <mlx90632_read_temp_ambient_raw+0x50>
    *ambient_old_raw = (int16_t)read_tmp;
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	b21a      	sxth	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	801a      	strh	r2, [r3, #0]

    return ret;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 80012b4:	f107 0216 	add.w	r2, r7, #22
 80012b8:	f107 0317 	add.w	r3, r7, #23
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff ffa2 	bl	8001208 <mlx90632_channel_new_select>
 80012c4:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <mlx90632_read_temp_object_raw+0x2a>
        return -EINVAL;
 80012cc:	f06f 0315 	mvn.w	r3, #21
 80012d0:	e074      	b.n	80013bc <mlx90632_read_temp_object_raw+0x114>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp);
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	4413      	add	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	f107 0218 	add.w	r2, r7, #24
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fbca 	bl	8000a88 <mlx90632_i2c_read>
 80012f4:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da01      	bge.n	8001300 <mlx90632_read_temp_object_raw+0x58>
        return ret;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	e05d      	b.n	80013bc <mlx90632_read_temp_object_raw+0x114>

    read = (int16_t)read_tmp;
 8001300:	8b3b      	ldrh	r3, [r7, #24]
 8001302:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp);
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001314:	b29b      	uxth	r3, r3
 8001316:	b21b      	sxth	r3, r3
 8001318:	f107 0218 	add.w	r2, r7, #24
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fbb2 	bl	8000a88 <mlx90632_i2c_read>
 8001324:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da01      	bge.n	8001330 <mlx90632_read_temp_object_raw+0x88>
        return ret;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	e045      	b.n	80013bc <mlx90632_read_temp_object_raw+0x114>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 8001330:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001334:	8b3a      	ldrh	r2, [r7, #24]
 8001336:	b212      	sxth	r2, r2
 8001338:	4413      	add	r3, r2
 800133a:	0fda      	lsrs	r2, r3, #31
 800133c:	4413      	add	r3, r2
 800133e:	105b      	asrs	r3, r3, #1
 8001340:	b21a      	sxth	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp);
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	0052      	lsls	r2, r2, #1
 800134e:	4413      	add	r3, r2
 8001350:	b29b      	uxth	r3, r3
 8001352:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001356:	3301      	adds	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21b      	sxth	r3, r3
 800135c:	f107 0218 	add.w	r2, r7, #24
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb90 	bl	8000a88 <mlx90632_i2c_read>
 8001368:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da01      	bge.n	8001374 <mlx90632_read_temp_object_raw+0xcc>
        return ret;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	e023      	b.n	80013bc <mlx90632_read_temp_object_raw+0x114>
    read = (int16_t)read_tmp;
 8001374:	8b3b      	ldrh	r3, [r7, #24]
 8001376:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp);
 8001378:	7dbb      	ldrb	r3, [r7, #22]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	4413      	add	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001388:	b29b      	uxth	r3, r3
 800138a:	b21b      	sxth	r3, r3
 800138c:	f107 0218 	add.w	r2, r7, #24
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb78 	bl	8000a88 <mlx90632_i2c_read>
 8001398:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b00      	cmp	r3, #0
 800139e:	da01      	bge.n	80013a4 <mlx90632_read_temp_object_raw+0xfc>
        return ret;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	e00b      	b.n	80013bc <mlx90632_read_temp_object_raw+0x114>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 80013a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013a8:	8b3a      	ldrh	r2, [r7, #24]
 80013aa:	b212      	sxth	r2, r2
 80013ac:	4413      	add	r3, r2
 80013ae:	0fda      	lsrs	r2, r3, #31
 80013b0:	4413      	add	r3, r2
 80013b2:	105b      	asrs	r3, r3, #1
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	801a      	strh	r2, [r3, #0]

    return ret;
 80013ba:	69fb      	ldr	r3, [r7, #28]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <mlx90632_read_temp_raw>:

int32_t mlx90632_read_temp_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                               int16_t *object_new_raw, int16_t *object_old_raw)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement();
 80013d2:	f7ff fed0 	bl	8001176 <mlx90632_start_measurement>
 80013d6:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da01      	bge.n	80013e2 <mlx90632_read_temp_raw+0x1e>
        return start_measurement_ret;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	e010      	b.n	8001404 <mlx90632_read_temp_raw+0x40>

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw);
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff ff33 	bl	8001250 <mlx90632_read_temp_ambient_raw>
 80013ea:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da01      	bge.n	80013f6 <mlx90632_read_temp_raw+0x32>
        return ret;
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	e006      	b.n	8001404 <mlx90632_read_temp_raw+0x40>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(start_measurement_ret, object_new_raw, object_old_raw);
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff54 	bl	80012a8 <mlx90632_read_temp_object_raw>
 8001400:	6138      	str	r0, [r7, #16]

    return ret;
 8001402:	693b      	ldr	r3, [r7, #16]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <mlx90632_preprocess_temp_ambient>:
}


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	460b      	mov	r3, r1
 8001418:	80bb      	strh	r3, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 800141e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ffee 	bl	8000404 <__aeabi_i2d>
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <mlx90632_preprocess_temp_ambient+0xb8>)
 800142e:	f7ff f97d 	bl	800072c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 800143a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ffe0 	bl	8000404 <__aeabi_i2d>
 8001444:	4604      	mov	r4, r0
 8001446:	460d      	mov	r5, r1
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ffd9 	bl	8000404 <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <mlx90632_preprocess_temp_ambient+0xbc>)
 8001458:	f7ff f968 	bl	800072c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001468:	f7ff f836 	bl	80004d8 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe fe7a 	bl	800016c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8001480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffbd 	bl	8000404 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <mlx90632_preprocess_temp_ambient+0xbc>)
 8001490:	f7ff f94c 	bl	800072c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014a0:	f7ff f944 	bl	800072c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <mlx90632_preprocess_temp_ambient+0xc0>)
 80014b2:	f7ff f811 	bl	80004d8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
}
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	40900000 	.word	0x40900000
 80014c8:	40280000 	.word	0x40280000
 80014cc:	41200000 	.word	0x41200000

080014d0 <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 80014ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ff86 	bl	8000404 <__aeabi_i2d>
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <mlx90632_preprocess_temp_object+0xd0>)
 80014fe:	f7ff f915 	bl	800072c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 800150a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff78 	bl	8000404 <__aeabi_i2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff71 	bl	8000404 <__aeabi_i2d>
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <mlx90632_preprocess_temp_object+0xd4>)
 8001528:	f7ff f900 	bl	800072c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001538:	f7fe ffce 	bl	80004d8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe fe12 	bl	800016c <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 8001550:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001554:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	0fda      	lsrs	r2, r3, #31
 800155c:	4413      	add	r3, r2
 800155e:	105b      	asrs	r3, r3, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff4f 	bl	8000404 <__aeabi_i2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <mlx90632_preprocess_temp_object+0xd4>)
 800156c:	f7ff f8de 	bl	800072c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800157c:	f7ff f8d6 	bl	800072c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <mlx90632_preprocess_temp_object+0xd8>)
 800158e:	f7fe ffa3 	bl	80004d8 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
}
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	40900000 	.word	0x40900000
 80015a4:	40280000 	.word	0x40280000
 80015a8:	41200000 	.word	0x41200000

080015ac <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b090      	sub	sp, #64	; 0x40
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4603      	mov	r3, r0
 80015b8:	81fb      	strh	r3, [r7, #14]
 80015ba:	460b      	mov	r3, r1
 80015bc:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 80015be:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 80015c2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80015c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff1e 	bl	800140c <mlx90632_preprocess_temp_ambient>
 80015d0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f7fe ff15 	bl	8000404 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <mlx90632_calc_temp_ambient+0xf4>)
 80015e0:	f7ff f8a4 	bl	800072c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe ff09 	bl	8000404 <__aeabi_i2d>
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <mlx90632_calc_temp_ambient+0xf8>)
 80015f8:	f7ff f898 	bl	800072c <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001604:	f7fe fdb0 	bl	8000168 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8001610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001614:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001618:	f7fe ff5e 	bl	80004d8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001624:	f7fe ff58 	bl	80004d8 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8001630:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001632:	f7fe fee7 	bl	8000404 <__aeabi_i2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800163e:	f7ff f875 	bl	800072c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <mlx90632_calc_temp_ambient+0xfc>)
 8001650:	f7fe ff42 	bl	80004d8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 800165c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800165e:	f7fe fed1 	bl	8000404 <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <mlx90632_calc_temp_ambient+0xf8>)
 8001668:	f7ff f860 	bl	800072c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 8001674:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001678:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800167c:	f7fe fd76 	bl	800016c <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800168c:	f7fe fd6e 	bl	800016c <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
}
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	3740      	adds	r7, #64	; 0x40
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	42b00000 	.word	0x42b00000
 80016a4:	40700000 	.word	0x40700000
 80016a8:	41300000 	.word	0x41300000
 80016ac:	00000000 	.word	0x00000000

080016b0 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b096      	sub	sp, #88	; 0x58
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 80016bc:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fe9f 	bl	8000404 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <mlx90632_calc_temp_object_iteration+0x258>)
 80016cc:	f7ff f82e 	bl	800072c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Hb_customer = Hb / ((double)1024.0);
 80016d8:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe91 	bl	8000404 <__aeabi_i2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <mlx90632_calc_temp_object_iteration+0x25c>)
 80016e8:	f7ff f820 	bl	800072c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 80016f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016f6:	f7fe fe85 	bl	8000404 <__aeabi_i2d>
 80016fa:	4604      	mov	r4, r0
 80016fc:	460d      	mov	r5, r1
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b83      	ldr	r3, [pc, #524]	; (8001910 <mlx90632_calc_temp_object_iteration+0x260>)
 8001704:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001708:	f7fe fd2e 	bl	8000168 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fee0 	bl	80004d8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <mlx90632_calc_temp_object_iteration+0x264>)
 8001726:	f7ff f801 	bl	800072c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    KsTAtmp = (double)Fb * (TAdut - 25);
 8001732:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001734:	f7fe fe66 	bl	8000404 <__aeabi_i2d>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <mlx90632_calc_temp_object_iteration+0x260>)
 8001742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001746:	f7fe fd0f 	bl	8000168 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fec1 	bl	80004d8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    calcedGb = KsTAtmp / ((double)68719476736.0);
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <mlx90632_calc_temp_object_iteration+0x264>)
 8001764:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001768:	f7fe ffe0 	bl	800072c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 8001774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001776:	461a      	mov	r2, r3
 8001778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800177c:	4966      	ldr	r1, [pc, #408]	; (8001918 <mlx90632_calc_temp_object_iteration+0x268>)
 800177e:	fb01 f003 	mul.w	r0, r1, r3
 8001782:	2102      	movs	r1, #2
 8001784:	fb01 f102 	mul.w	r1, r1, r2
 8001788:	4401      	add	r1, r0
 800178a:	4863      	ldr	r0, [pc, #396]	; (8001918 <mlx90632_calc_temp_object_iteration+0x268>)
 800178c:	fba2 2300 	umull	r2, r3, r2, r0
 8001790:	4419      	add	r1, r3
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7fe fe70 	bl	800047c <__aeabi_l2d>
 800179c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017a0:	f7fe fe9a 	bl	80004d8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b5a      	ldr	r3, [pc, #360]	; (800191c <mlx90632_calc_temp_object_iteration+0x26c>)
 80017b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017b6:	f7fe fcd9 	bl	800016c <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017c6:	f7fe fcd1 	bl	800016c <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fe81 	bl	80004d8 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <mlx90632_calc_temp_object_iteration+0x270>)
 80017e4:	f7fe ffa2 	bl	800072c <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7fe fe07 	bl	8000404 <__aeabi_i2d>
 80017f6:	4604      	mov	r4, r0
 80017f8:	460d      	mov	r5, r1
 80017fa:	a33f      	add	r3, pc, #252	; (adr r3, 80018f8 <mlx90632_calc_temp_object_iteration+0x248>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001804:	f7fe ff92 	bl	800072c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001814:	f7fe fe60 	bl	80004d8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe ff84 	bl	800072c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 800182c:	a334      	add	r3, pc, #208	; (adr r3, 8001900 <mlx90632_calc_temp_object_iteration+0x250>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001836:	f7fe fc99 	bl	800016c <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4614      	mov	r4, r2
 8001840:	461d      	mov	r5, r3
 8001842:	a32f      	add	r3, pc, #188	; (adr r3, 8001900 <mlx90632_calc_temp_object_iteration+0x250>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800184c:	f7fe fc8e 	bl	800016c <__adddf3>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fe3e 	bl	80004d8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	a326      	add	r3, pc, #152	; (adr r3, 8001900 <mlx90632_calc_temp_object_iteration+0x250>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800186e:	f7fe fc7d 	bl	800016c <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fe2d 	bl	80004d8 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	a31e      	add	r3, pc, #120	; (adr r3, 8001900 <mlx90632_calc_temp_object_iteration+0x250>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001890:	f7fe fc6c 	bl	800016c <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fe1c 	bl	80004d8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    first_sqrt = sqrt(calcedFa + TAdut4);
 80018a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018b0:	f7fe fc5c 	bl	800016c <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f005 f8fa 	bl	8006ab4 <sqrt>
 80018c0:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 80018c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c8:	f005 f8f4 	bl	8006ab4 <sqrt>
 80018cc:	a30c      	add	r3, pc, #48	; (adr r3, 8001900 <mlx90632_calc_temp_object_iteration+0x250>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fc49 	bl	8000168 <__aeabi_dsub>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018e2:	f7fe fc41 	bl	8000168 <__aeabi_dsub>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
}
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	3758      	adds	r7, #88	; 0x58
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	f3af 8000 	nop.w
 80018f8:	20000000 	.word	0x20000000
 80018fc:	4202a05f 	.word	0x4202a05f
 8001900:	66666666 	.word	0x66666666
 8001904:	40711266 	.word	0x40711266
 8001908:	40d00000 	.word	0x40d00000
 800190c:	40900000 	.word	0x40900000
 8001910:	40390000 	.word	0x40390000
 8001914:	42300000 	.word	0x42300000
 8001918:	540be400 	.word	0x540be400
 800191c:	3ff00000 	.word	0x3ff00000
 8001920:	42d00000 	.word	0x42d00000

08001924 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	e9c7 0100 	strd	r0, r1, [r7]
    emissivity = value;
 800192e:	4905      	ldr	r1, [pc, #20]	; (8001944 <mlx90632_set_emissivity+0x20>)
 8001930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001934:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000200 	.word	0x20000200

08001948 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <mlx90632_get_emissivity+0x30>)
 800194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f7ff f825 	bl	80009a8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <mlx90632_get_emissivity+0x34>)
 800196a:	e002      	b.n	8001972 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 800196c:	4b02      	ldr	r3, [pc, #8]	; (8001978 <mlx90632_get_emissivity+0x30>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
}
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000200 	.word	0x20000200
 800197c:	3ff00000 	.word	0x3ff00000

08001980 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09a      	sub	sp, #104	; 0x68
 8001984:	af0a      	add	r7, sp, #40	; 0x28
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <mlx90632_calc_temp_object+0xe8>)
 8001994:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double tmp_emi = mlx90632_get_emissivity();
 8001998:	f7ff ffd6 	bl	8001948 <mlx90632_get_emissivity>
 800199c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fd2f 	bl	8000404 <__aeabi_i2d>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <mlx90632_calc_temp_object+0xec>)
 80019ac:	f7fe febe 	bl	800072c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7fe fd23 	bl	8000404 <__aeabi_i2d>
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <mlx90632_calc_temp_object+0xf0>)
 80019c4:	f7fe feb2 	bl	800072c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 80019d0:	68b8      	ldr	r0, [r7, #8]
 80019d2:	f7fe fd17 	bl	8000404 <__aeabi_i2d>
 80019d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019da:	f7fe fbc5 	bl	8000168 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019ea:	f7fe fe9f 	bl	800072c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <mlx90632_calc_temp_object+0xe8>)
 80019fc:	f7fe fbb6 	bl	800016c <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0e:	e020      	b.n	8001a52 <mlx90632_calc_temp_object+0xd2>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 8001a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a18:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001a1c:	9306      	str	r3, [sp, #24]
 8001a1e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001a22:	9305      	str	r3, [sp, #20]
 8001a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2a:	9303      	str	r3, [sp, #12]
 8001a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a34:	e9cd 2300 	strd	r2, r3, [sp]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a3e:	f7ff fe37 	bl	80016b0 <mlx90632_calc_temp_object_iteration>
 8001a42:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    for (i = 0; i < 5; ++i)
 8001a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a52:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	ddda      	ble.n	8001a10 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 8001a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
}
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	3740      	adds	r7, #64	; 0x40
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40390000 	.word	0x40390000
 8001a6c:	40f00000 	.word	0x40f00000
 8001a70:	40700000 	.word	0x40700000

08001a74 <mlx90632_init>:
    }
    return temp;
}

int32_t mlx90632_init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
    int32_t ret;
    uint16_t eeprom_version, reg_status;

    ret = mlx90632_i2c_read(MLX90632_EE_VERSION, &eeprom_version);
 8001a7a:	1cbb      	adds	r3, r7, #2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f242 400b 	movw	r0, #9227	; 0x240b
 8001a82:	f7ff f801 	bl	8000a88 <mlx90632_i2c_read>
 8001a86:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da01      	bge.n	8001a92 <mlx90632_init+0x1e>
    {
        return ret;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	e02a      	b.n	8001ae8 <mlx90632_init+0x74>
    }

    if ((eeprom_version & 0x00FF) != MLX90632_DSPv5)
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d002      	beq.n	8001aa0 <mlx90632_init+0x2c>
    {
        // this here can fail because of big/little endian of cpu/i2c
        return -EPROTONOSUPPORT;
 8001a9a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001a9e:	e023      	b.n	8001ae8 <mlx90632_init+0x74>
    }

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001aa8:	f7fe ffee 	bl	8000a88 <mlx90632_i2c_read>
 8001aac:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da01      	bge.n	8001ab8 <mlx90632_init+0x44>
        return ret;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	e017      	b.n	8001ae8 <mlx90632_init+0x74>

    // Prepare a clean start with setting NEW_DATA to 0
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & ~(MLX90632_STAT_DATA_RDY));
 8001ab8:	883b      	ldrh	r3, [r7, #0]
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001ac6:	f7ff f82f 	bl	8000b28 <mlx90632_i2c_write>
 8001aca:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da01      	bge.n	8001ad6 <mlx90632_init+0x62>
        return ret;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	e008      	b.n	8001ae8 <mlx90632_init+0x74>

    if ((eeprom_version & 0x7F00) == MLX90632_XTD_RNG_KEY)
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001adc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ae0:	d101      	bne.n	8001ae6 <mlx90632_init+0x72>
    {
        return ERANGE;
 8001ae2:	2322      	movs	r3, #34	; 0x22
 8001ae4:	e000      	b.n	8001ae8 <mlx90632_init+0x74>
    }

    return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_MspInit+0x5c>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_MspInit+0x5c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_MspInit+0x60>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_MspInit+0x60>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <HAL_I2C_MspInit+0x70>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d123      	bne.n	8001bbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b90:	2312      	movs	r3, #18
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0x78>)
 8001ba0:	f000 fb06 	bl	80021b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_I2C_MspInit+0x74>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_UART_MspInit+0x70>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d123      	bne.n	8001c38 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	61d3      	str	r3, [r2, #28]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_UART_MspInit+0x74>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c20:	230c      	movs	r3, #12
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_UART_MspInit+0x78>)
 8001c34:	f000 fabc 	bl	80021b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40004400 	.word	0x40004400
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f000 f963 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca2:	f000 fc21 	bl	80024e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <ITM_SendChar+0x44>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <ITM_SendChar+0x44>)
 8001cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <ITM_SendChar+0x48>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <ITM_SendChar+0x48>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001cce:	bf00      	nop
 8001cd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f8      	beq.n	8001cd0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001cde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000edfc 	.word	0xe000edfc
 8001cf4:	e0000e00 	.word	0xe0000e00

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_kill>:

int _kill(int pid, int sig)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d10:	f002 f93a 	bl	8003f88 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2216      	movs	r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_exit>:

void _exit (int status)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffe7 	bl	8001d06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d38:	e7fe      	b.n	8001d38 <_exit+0x12>

08001d3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e00a      	b.n	8001d62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4c:	f3af 8000 	nop.w
 8001d50:	4601      	mov	r1, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	60ba      	str	r2, [r7, #8]
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf0      	blt.n	8001d4c <_read+0x12>
	}

return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e009      	b.n	8001d9a <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	60ba      	str	r2, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff8c 	bl	8001cac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dbf1      	blt.n	8001d86 <_write+0x12>
	}
	return len;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_close>:

int _close(int file)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <_isatty>:

int _isatty(int file)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f002 f8a4 	bl	8003f88 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20005000 	.word	0x20005000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	20000208 	.word	0x20000208
 8001e74:	200002f0 	.word	0x200002f0

08001e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eaa:	f7ff ffe5 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f002 f871 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb2:	f7fe ff09 	bl	8000cc8 <main>
  bx lr
 8001eb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ec0:	080070ec 	.word	0x080070ec
  ldr r2, =_sbss
 8001ec4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ec8:	200002ec 	.word	0x200002ec

08001ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_2_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x28>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f923 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fe00 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f93b 	bl	8002196 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f903 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_IncTick+0x1c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_IncTick+0x20>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_IncTick+0x20>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	200002d8 	.word	0x200002d8

08001f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_GetTick+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	200002d8 	.word	0x200002d8

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <__NVIC_EnableIRQ+0x34>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff90 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff2d 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff42 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff90 	bl	8002084 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5f 	bl	8002030 <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff35 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	e169      	b.n	8002498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c4:	2201      	movs	r2, #1
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 8158 	bne.w	8002492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a9a      	ldr	r2, [pc, #616]	; (8002450 <HAL_GPIO_Init+0x2a0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d05e      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 80021ec:	4a98      	ldr	r2, [pc, #608]	; (8002450 <HAL_GPIO_Init+0x2a0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d875      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 80021f2:	4a98      	ldr	r2, [pc, #608]	; (8002454 <HAL_GPIO_Init+0x2a4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d058      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 80021f8:	4a96      	ldr	r2, [pc, #600]	; (8002454 <HAL_GPIO_Init+0x2a4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d86f      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 80021fe:	4a96      	ldr	r2, [pc, #600]	; (8002458 <HAL_GPIO_Init+0x2a8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d052      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 8002204:	4a94      	ldr	r2, [pc, #592]	; (8002458 <HAL_GPIO_Init+0x2a8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d869      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 800220a:	4a94      	ldr	r2, [pc, #592]	; (800245c <HAL_GPIO_Init+0x2ac>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04c      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 8002210:	4a92      	ldr	r2, [pc, #584]	; (800245c <HAL_GPIO_Init+0x2ac>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d863      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 8002216:	4a92      	ldr	r2, [pc, #584]	; (8002460 <HAL_GPIO_Init+0x2b0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d046      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 800221c:	4a90      	ldr	r2, [pc, #576]	; (8002460 <HAL_GPIO_Init+0x2b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d85d      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d82a      	bhi.n	800227c <HAL_GPIO_Init+0xcc>
 8002226:	2b12      	cmp	r3, #18
 8002228:	d859      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_GPIO_Init+0x80>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022ab 	.word	0x080022ab
 8002234:	08002285 	.word	0x08002285
 8002238:	08002297 	.word	0x08002297
 800223c:	080022d9 	.word	0x080022d9
 8002240:	080022df 	.word	0x080022df
 8002244:	080022df 	.word	0x080022df
 8002248:	080022df 	.word	0x080022df
 800224c:	080022df 	.word	0x080022df
 8002250:	080022df 	.word	0x080022df
 8002254:	080022df 	.word	0x080022df
 8002258:	080022df 	.word	0x080022df
 800225c:	080022df 	.word	0x080022df
 8002260:	080022df 	.word	0x080022df
 8002264:	080022df 	.word	0x080022df
 8002268:	080022df 	.word	0x080022df
 800226c:	080022df 	.word	0x080022df
 8002270:	080022df 	.word	0x080022df
 8002274:	0800228d 	.word	0x0800228d
 8002278:	080022a1 	.word	0x080022a1
 800227c:	4a79      	ldr	r2, [pc, #484]	; (8002464 <HAL_GPIO_Init+0x2b4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002282:	e02c      	b.n	80022de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e029      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	3304      	adds	r3, #4
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e024      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	3308      	adds	r3, #8
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e01f      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	330c      	adds	r3, #12
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e01a      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022b2:	2304      	movs	r3, #4
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e013      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	611a      	str	r2, [r3, #16]
          break;
 80022ca:	e009      	b.n	80022e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022cc:	2308      	movs	r3, #8
 80022ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	615a      	str	r2, [r3, #20]
          break;
 80022d6:	e003      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          break;
 80022de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2bff      	cmp	r3, #255	; 0xff
 80022e4:	d801      	bhi.n	80022ea <HAL_GPIO_Init+0x13a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_Init+0x13e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2bff      	cmp	r3, #255	; 0xff
 80022f4:	d802      	bhi.n	80022fc <HAL_GPIO_Init+0x14c>
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x152>
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	3b08      	subs	r3, #8
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	210f      	movs	r1, #15
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80b1 	beq.w	8002492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002330:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <HAL_GPIO_Init+0x2b8>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_GPIO_Init+0x2b8>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <HAL_GPIO_Init+0x2b8>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002348:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_GPIO_Init+0x2bc>)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a40      	ldr	r2, [pc, #256]	; (8002470 <HAL_GPIO_Init+0x2c0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_GPIO_Init+0x1ec>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00d      	beq.n	8002398 <HAL_GPIO_Init+0x1e8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <HAL_GPIO_Init+0x2c8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <HAL_GPIO_Init+0x1e4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3d      	ldr	r2, [pc, #244]	; (800247c <HAL_GPIO_Init+0x2cc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_GPIO_Init+0x1e0>
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002390:	2304      	movs	r3, #4
 8002392:	e004      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002394:	2302      	movs	r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 800239c:	2300      	movs	r3, #0
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	f002 0203 	and.w	r2, r2, #3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4093      	lsls	r3, r2
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ae:	492f      	ldr	r1, [pc, #188]	; (800246c <HAL_GPIO_Init+0x2bc>)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	492c      	ldr	r1, [pc, #176]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	4928      	ldr	r1, [pc, #160]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	491e      	ldr	r1, [pc, #120]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002408:	4013      	ands	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	4918      	ldr	r1, [pc, #96]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	43db      	mvns	r3, r3
 800242e:	4914      	ldr	r1, [pc, #80]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002430:	4013      	ands	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
 800244c:	e021      	b.n	8002492 <HAL_GPIO_Init+0x2e2>
 800244e:	bf00      	nop
 8002450:	10320000 	.word	0x10320000
 8002454:	10310000 	.word	0x10310000
 8002458:	10220000 	.word	0x10220000
 800245c:	10210000 	.word	0x10210000
 8002460:	10120000 	.word	0x10120000
 8002464:	10110000 	.word	0x10110000
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	40010800 	.word	0x40010800
 8002474:	40010c00 	.word	0x40010c00
 8002478:	40011000 	.word	0x40011000
 800247c:	40011400 	.word	0x40011400
 8002480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_GPIO_Init+0x304>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	43db      	mvns	r3, r3
 800248c:	4909      	ldr	r1, [pc, #36]	; (80024b4 <HAL_GPIO_Init+0x304>)
 800248e:	4013      	ands	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	3301      	adds	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f ae8e 	bne.w	80021c4 <HAL_GPIO_Init+0x14>
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	372c      	adds	r7, #44	; 0x2c
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f806 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e12b      	b.n	8002796 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fafe 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800257e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002590:	f001 fbd8 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8002594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a81      	ldr	r2, [pc, #516]	; (80027a0 <HAL_I2C_Init+0x274>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d807      	bhi.n	80025b0 <HAL_I2C_Init+0x84>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a80      	ldr	r2, [pc, #512]	; (80027a4 <HAL_I2C_Init+0x278>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e006      	b.n	80025be <HAL_I2C_Init+0x92>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a7d      	ldr	r2, [pc, #500]	; (80027a8 <HAL_I2C_Init+0x27c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0e7      	b.n	8002796 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a78      	ldr	r2, [pc, #480]	; (80027ac <HAL_I2C_Init+0x280>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a6a      	ldr	r2, [pc, #424]	; (80027a0 <HAL_I2C_Init+0x274>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d802      	bhi.n	8002600 <HAL_I2C_Init+0xd4>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3301      	adds	r3, #1
 80025fe:	e009      	b.n	8002614 <HAL_I2C_Init+0xe8>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	4a69      	ldr	r2, [pc, #420]	; (80027b0 <HAL_I2C_Init+0x284>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	3301      	adds	r3, #1
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	430b      	orrs	r3, r1
 800261a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002626:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	495c      	ldr	r1, [pc, #368]	; (80027a0 <HAL_I2C_Init+0x274>)
 8002630:	428b      	cmp	r3, r1
 8002632:	d819      	bhi.n	8002668 <HAL_I2C_Init+0x13c>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e59      	subs	r1, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002642:	1c59      	adds	r1, r3, #1
 8002644:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002648:	400b      	ands	r3, r1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_I2C_Init+0x138>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e59      	subs	r1, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fbb1 f3f3 	udiv	r3, r1, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002662:	e051      	b.n	8002708 <HAL_I2C_Init+0x1dc>
 8002664:	2304      	movs	r3, #4
 8002666:	e04f      	b.n	8002708 <HAL_I2C_Init+0x1dc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <HAL_I2C_Init+0x168>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e012      	b.n	80026ba <HAL_I2C_Init+0x18e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	0099      	lsls	r1, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Init+0x196>
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_I2C_Init+0x1dc>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10e      	bne.n	80026e8 <HAL_I2C_Init+0x1bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e58      	subs	r0, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	440b      	add	r3, r1
 80026d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e6:	e00f      	b.n	8002708 <HAL_I2C_Init+0x1dc>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	0099      	lsls	r1, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	6809      	ldr	r1, [r1, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6911      	ldr	r1, [r2, #16]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	430b      	orrs	r3, r1
 800274a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	000186a0 	.word	0x000186a0
 80027a4:	001e847f 	.word	0x001e847f
 80027a8:	003d08ff 	.word	0x003d08ff
 80027ac:	431bde83 	.word	0x431bde83
 80027b0:	10624dd3 	.word	0x10624dd3

080027b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ce:	f7ff fbd7 	bl	8001f80 <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	f040 80d9 	bne.w	8002994 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	496d      	ldr	r1, [pc, #436]	; (80029a0 <HAL_I2C_Mem_Write+0x1ec>)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fcc1 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0cc      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2C_Mem_Write+0x56>
 8002806:	2302      	movs	r3, #2
 8002808:	e0c5      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a4d      	ldr	r2, [pc, #308]	; (80029a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002872:	88f8      	ldrh	r0, [r7, #6]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4603      	mov	r3, r0
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 faf8 	bl	8002e78 <I2C_RequestMemoryWrite>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d052      	beq.n	8002934 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e081      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fd42 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06b      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d11b      	bne.n	8002934 <HAL_I2C_Mem_Write+0x180>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1aa      	bne.n	8002892 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fd2e 	bl	80033a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00d      	beq.n	8002968 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b04      	cmp	r3, #4
 8002952:	d107      	bne.n	8002964 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e016      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	00100002 	.word	0x00100002
 80029a4:	ffff0000 	.word	0xffff0000

080029a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029c6:	f7ff fadb 	bl	8001f80 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 8244 	bne.w	8002e62 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2319      	movs	r3, #25
 80029e0:	2201      	movs	r2, #1
 80029e2:	4982      	ldr	r1, [pc, #520]	; (8002bec <HAL_I2C_Mem_Read+0x244>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fbc5 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	e237      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x5a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e230      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d007      	beq.n	8002a28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2222      	movs	r2, #34	; 0x22
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a62      	ldr	r2, [pc, #392]	; (8002bf0 <HAL_I2C_Mem_Read+0x248>)
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6a:	88f8      	ldrh	r0, [r7, #6]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa92 	bl	8002fa4 <I2C_RequestMemoryRead>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1ec      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d113      	bne.n	8002aba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e1c0      	b.n	8002e3c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d11e      	bne.n	8002b00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad2:	b672      	cpsid	i
}
 8002ad4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002afc:	b662      	cpsie	i
}
 8002afe:	e035      	b.n	8002b6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11e      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b42:	b662      	cpsie	i
}
 8002b44:	e012      	b.n	8002b6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b6c:	e166      	b.n	8002e3c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	f200 811f 	bhi.w	8002db6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d123      	bne.n	8002bc8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fc4d 	bl	8003424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e167      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bc6:	e139      	b.n	8002e3c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d152      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4906      	ldr	r1, [pc, #24]	; (8002bf4 <HAL_I2C_Mem_Read+0x24c>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 faca 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e13c      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
 8002bea:	bf00      	nop
 8002bec:	00100002 	.word	0x00100002
 8002bf0:	ffff0000 	.word	0xffff0000
 8002bf4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c3e:	b662      	cpsie	i
}
 8002c40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c74:	e0e2      	b.n	8002e3c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	497b      	ldr	r1, [pc, #492]	; (8002e6c <HAL_I2C_Mem_Read+0x4c4>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fa77 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0e9      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca0:	b672      	cpsid	i
}
 8002ca2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_I2C_Mem_Read+0x4c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_I2C_Mem_Read+0x4cc>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0a1a      	lsrs	r2, r3, #8
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00da      	lsls	r2, r3, #3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d118      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d1e:	b662      	cpsie	i
}
 8002d20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e09a      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d1d9      	bne.n	8002cf0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d7e:	b662      	cpsie	i
}
 8002d80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db4:	e042      	b.n	8002e3c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb32 	bl	8003424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04c      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d118      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f ae94 	bne.w	8002b6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	00010004 	.word	0x00010004
 8002e70:	20000000 	.word	0x20000000
 8002e74:	14f8b589 	.word	0x14f8b589

08002e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f960 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d103      	bne.n	8002ed2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e05f      	b.n	8002f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	492d      	ldr	r1, [pc, #180]	; (8002fa0 <I2C_RequestMemoryWrite+0x128>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f998 	bl	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e04c      	b.n	8002f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa02 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e02b      	b.n	8002f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]
 8002f4e:	e021      	b.n	8002f94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f60:	6a39      	ldr	r1, [r7, #32]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f9dc 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e005      	b.n	8002f96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8a:	893b      	ldrh	r3, [r7, #8]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	00010002 	.word	0x00010002

08002fa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8c2 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003004:	d103      	bne.n	800300e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0aa      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	4952      	ldr	r1, [pc, #328]	; (8003170 <I2C_RequestMemoryRead+0x1cc>)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8fa 	bl	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e097      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f964 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b04      	cmp	r3, #4
 8003064:	d107      	bne.n	8003076 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e076      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003080:	893b      	ldrh	r3, [r7, #8]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	611a      	str	r2, [r3, #16]
 800308a:	e021      	b.n	80030d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	b29b      	uxth	r3, r3
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f93e 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e050      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c6:	893b      	ldrh	r3, [r7, #8]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	6a39      	ldr	r1, [r7, #32]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f923 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e035      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	2200      	movs	r2, #0
 8003114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f82b 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	d103      	bne.n	800313c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e013      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003140:	897b      	ldrh	r3, [r7, #10]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	4906      	ldr	r1, [pc, #24]	; (8003170 <I2C_RequestMemoryRead+0x1cc>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f863 	bl	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010002 	.word	0x00010002

08003174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003184:	e025      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d021      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fef7 	bl	8001f80 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d116      	bne.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e023      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10d      	bne.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	e00c      	b.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d0b6      	beq.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003230:	e051      	b.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d123      	bne.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800325a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e046      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d021      	beq.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe fe75 	bl	8001f80 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e020      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10c      	bne.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e00b      	b.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d18d      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332c:	e02d      	b.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8ce 	bl	80034d0 <I2C_IsAcknowledgeFailed>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e02d      	b.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d021      	beq.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fe1b 	bl	8001f80 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e007      	b.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d1ca      	bne.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ae:	e02d      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f88d 	bl	80034d0 <I2C_IsAcknowledgeFailed>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02d      	b.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d021      	beq.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fe fdda 	bl	8001f80 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d116      	bne.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d1ca      	bne.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003430:	e042      	b.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d119      	bne.n	8003474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e029      	b.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fe fd84 	bl	8001f80 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e007      	b.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d1b5      	bne.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d11b      	bne.n	8003520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e26c      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8087 	beq.w	800365a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003558:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d112      	bne.n	800358a <HAL_RCC_OscConfig+0x5e>
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d10b      	bne.n	800358a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06c      	beq.n	8003658 <HAL_RCC_OscConfig+0x12c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d168      	bne.n	8003658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e246      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x76>
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e02e      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7a      	ldr	r2, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a77      	ldr	r2, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0xbc>
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a71      	ldr	r2, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a67      	ldr	r2, [pc, #412]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fcba 	bl	8001f80 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fcb6 	bl	8001f80 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1fa      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xe4>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fca6 	bl	8001f80 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fca2 	bl	8001f80 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e1e6      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x10c>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d063      	beq.n	800372e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003666:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x18c>
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d116      	bne.n	80036b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1ba      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4939      	ldr	r1, [pc, #228]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	e03a      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe fc5b 	bl	8001f80 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe fc57 	bl	8001f80 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e19b      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4927      	ldr	r1, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fc3a 	bl	8001f80 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003710:	f7fe fc36 	bl	8001f80 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e17a      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03a      	beq.n	80037b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d019      	beq.n	8003776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe fc1a 	bl	8001f80 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe fc16 	bl	8001f80 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e15a      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376e:	2001      	movs	r0, #1
 8003770:	f000 fb10 	bl	8003d94 <RCC_Delay>
 8003774:	e01c      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fc00 	bl	8001f80 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fbfc 	bl	8001f80 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d908      	bls.n	80037a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e140      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	42420000 	.word	0x42420000
 80037a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e9      	bne.n	8003784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80a6 	beq.w	800390a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b97      	ldr	r3, [pc, #604]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	4b94      	ldr	r3, [pc, #592]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4a93      	ldr	r2, [pc, #588]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	61d3      	str	r3, [r2, #28]
 80037da:	4b91      	ldr	r3, [pc, #580]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a8a      	ldr	r2, [pc, #552]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fe fbbd 	bl	8001f80 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fe fbb9 	bl	8001f80 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0fd      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x312>
 8003830:	4b7b      	ldr	r3, [pc, #492]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a7a      	ldr	r2, [pc, #488]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6213      	str	r3, [r2, #32]
 800383c:	e02d      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a75      	ldr	r2, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a72      	ldr	r2, [pc, #456]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	e01c      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b05      	cmp	r3, #5
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0x356>
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a6c      	ldr	r2, [pc, #432]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e00b      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6213      	str	r3, [r2, #32]
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4a63      	ldr	r2, [pc, #396]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003894:	f023 0304 	bic.w	r3, r3, #4
 8003898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d015      	beq.n	80038ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe fb6d 	bl	8001f80 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe fb69 	bl	8001f80 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0ab      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ee      	beq.n	80038aa <HAL_RCC_OscConfig+0x37e>
 80038cc:	e014      	b.n	80038f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fb57 	bl	8001f80 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fe fb53 	bl	8001f80 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e095      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ec:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ee      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4a47      	ldr	r2, [pc, #284]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8081 	beq.w	8003a16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d061      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d146      	bne.n	80039b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003928:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <HAL_RCC_OscConfig+0x4fc>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7fe fb27 	bl	8001f80 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fe fb23 	bl	8001f80 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e067      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d108      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	492d      	ldr	r1, [pc, #180]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a19      	ldr	r1, [r3, #32]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	430b      	orrs	r3, r1
 8003982:	4927      	ldr	r1, [pc, #156]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x4fc>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe faf7 	bl	8001f80 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe faf3 	bl	8001f80 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e037      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x46a>
 80039b4:	e02f      	b.n	8003a16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_RCC_OscConfig+0x4fc>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fae0 	bl	8001f80 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe fadc 	bl	8001f80 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e020      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x498>
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e013      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40007000 	.word	0x40007000
 8003a28:	42420060 	.word	0x42420060

08003a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0d0      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a40:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d910      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0207 	bic.w	r2, r3, #7
 8003a56:	4965      	ldr	r1, [pc, #404]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d040      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d115      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e073      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4936      	ldr	r1, [pc, #216]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fa30 	bl	8001f80 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fe fa2c 	bl	8001f80 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e053      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d210      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4922      	ldr	r1, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f859 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe f98e 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	08006ce8 	.word	0x08006ce8
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	20000004 	.word	0x20000004

08003c00 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003c0c:	f107 0318 	add.w	r3, r7, #24
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c2a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <HAL_RCC_MCOConfig+0x68>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <HAL_RCC_MCOConfig+0x68>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	6193      	str	r3, [r2, #24]
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_MCOConfig+0x68>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4808      	ldr	r0, [pc, #32]	; (8003c6c <HAL_RCC_MCOConfig+0x6c>)
 8003c4c:	f7fe fab0 	bl	80021b0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_MCOConfig+0x68>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_MCOConfig+0x68>)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010800 	.word	0x40010800

08003c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b490      	push	{r4, r7}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c78:	1d3c      	adds	r4, r7, #4
 8003c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c80:	f240 2301 	movw	r3, #513	; 0x201
 8003c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8003cae:	e02d      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb2:	623b      	str	r3, [r7, #32]
      break;
 8003cb4:	e02d      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c5b      	lsrs	r3, r3, #17
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ce8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	fb02 f203 	mul.w	r2, r2, r3
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e004      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	623b      	str	r3, [r7, #32]
      break;
 8003d0a:	e002      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	623b      	str	r3, [r7, #32]
      break;
 8003d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc90      	pop	{r4, r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	08006cd8 	.word	0x08006cd8
 8003d24:	40021000 	.word	0x40021000
 8003d28:	007a1200 	.word	0x007a1200
 8003d2c:	003d0900 	.word	0x003d0900

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000000 	.word	0x20000000

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d48:	f7ff fff2 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08006cf8 	.word	0x08006cf8

08003d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d70:	f7ff ffde 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	0adb      	lsrs	r3, r3, #11
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08006cf8 	.word	0x08006cf8

08003d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <RCC_Delay+0x34>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <RCC_Delay+0x38>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0a5b      	lsrs	r3, r3, #9
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003db0:	bf00      	nop
  }
  while (Delay --);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e5a      	subs	r2, r3, #1
 8003db6:	60fa      	str	r2, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f9      	bne.n	8003db0 <RCC_Delay+0x1c>
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e03f      	b.n	8003e62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd feea 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f829 	bl	8003e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ea6:	f023 030c 	bic.w	r3, r3, #12
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <UART_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d103      	bne.n	8003edc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7ff ff4a 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	e002      	b.n	8003ee2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003edc:	f7ff ff32 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <UART_SetConfig+0x118>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	0119      	lsls	r1, r3, #4
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009a      	lsls	r2, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <UART_SetConfig+0x118>)
 8003f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2064      	movs	r0, #100	; 0x64
 8003f22:	fb00 f303 	mul.w	r3, r0, r3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <UART_SetConfig+0x118>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	4419      	add	r1, r3
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009a      	lsls	r2, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <UART_SetConfig+0x118>)
 8003f52:	fba3 0302 	umull	r0, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2064      	movs	r0, #100	; 0x64
 8003f5a:	fb00 f303 	mul.w	r3, r0, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	3332      	adds	r3, #50	; 0x32
 8003f64:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <UART_SetConfig+0x118>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	440a      	add	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40013800 	.word	0x40013800
 8003f84:	51eb851f 	.word	0x51eb851f

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	f002 fe5e 	bl	8006c64 <_init>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	080070e4 	.word	0x080070e4
 8003fd0:	080070e4 	.word	0x080070e4
 8003fd4:	080070e4 	.word	0x080070e4
 8003fd8:	080070e8 	.word	0x080070e8

08003fdc <memset>:
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4402      	add	r2, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <__cvt>:
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	bfbb      	ittet	lt
 8003ff6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ffa:	461f      	movlt	r7, r3
 8003ffc:	2300      	movge	r3, #0
 8003ffe:	232d      	movlt	r3, #45	; 0x2d
 8004000:	b088      	sub	sp, #32
 8004002:	4614      	mov	r4, r2
 8004004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004006:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004008:	7013      	strb	r3, [r2, #0]
 800400a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800400c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004010:	f023 0820 	bic.w	r8, r3, #32
 8004014:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004018:	d005      	beq.n	8004026 <__cvt+0x3a>
 800401a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800401e:	d100      	bne.n	8004022 <__cvt+0x36>
 8004020:	3501      	adds	r5, #1
 8004022:	2302      	movs	r3, #2
 8004024:	e000      	b.n	8004028 <__cvt+0x3c>
 8004026:	2303      	movs	r3, #3
 8004028:	aa07      	add	r2, sp, #28
 800402a:	9204      	str	r2, [sp, #16]
 800402c:	aa06      	add	r2, sp, #24
 800402e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004032:	e9cd 3500 	strd	r3, r5, [sp]
 8004036:	4622      	mov	r2, r4
 8004038:	463b      	mov	r3, r7
 800403a:	f000 fe15 	bl	8004c68 <_dtoa_r>
 800403e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004042:	4606      	mov	r6, r0
 8004044:	d102      	bne.n	800404c <__cvt+0x60>
 8004046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004048:	07db      	lsls	r3, r3, #31
 800404a:	d522      	bpl.n	8004092 <__cvt+0xa6>
 800404c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004050:	eb06 0905 	add.w	r9, r6, r5
 8004054:	d110      	bne.n	8004078 <__cvt+0x8c>
 8004056:	7833      	ldrb	r3, [r6, #0]
 8004058:	2b30      	cmp	r3, #48	; 0x30
 800405a:	d10a      	bne.n	8004072 <__cvt+0x86>
 800405c:	2200      	movs	r2, #0
 800405e:	2300      	movs	r3, #0
 8004060:	4620      	mov	r0, r4
 8004062:	4639      	mov	r1, r7
 8004064:	f7fc fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8004068:	b918      	cbnz	r0, 8004072 <__cvt+0x86>
 800406a:	f1c5 0501 	rsb	r5, r5, #1
 800406e:	f8ca 5000 	str.w	r5, [sl]
 8004072:	f8da 3000 	ldr.w	r3, [sl]
 8004076:	4499      	add	r9, r3
 8004078:	2200      	movs	r2, #0
 800407a:	2300      	movs	r3, #0
 800407c:	4620      	mov	r0, r4
 800407e:	4639      	mov	r1, r7
 8004080:	f7fc fc92 	bl	80009a8 <__aeabi_dcmpeq>
 8004084:	b108      	cbz	r0, 800408a <__cvt+0x9e>
 8004086:	f8cd 901c 	str.w	r9, [sp, #28]
 800408a:	2230      	movs	r2, #48	; 0x30
 800408c:	9b07      	ldr	r3, [sp, #28]
 800408e:	454b      	cmp	r3, r9
 8004090:	d307      	bcc.n	80040a2 <__cvt+0xb6>
 8004092:	4630      	mov	r0, r6
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004098:	1b9b      	subs	r3, r3, r6
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	b008      	add	sp, #32
 800409e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	9107      	str	r1, [sp, #28]
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e7f0      	b.n	800408c <__cvt+0xa0>

080040aa <__exponent>:
 80040aa:	4603      	mov	r3, r0
 80040ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ae:	2900      	cmp	r1, #0
 80040b0:	f803 2b02 	strb.w	r2, [r3], #2
 80040b4:	bfb6      	itet	lt
 80040b6:	222d      	movlt	r2, #45	; 0x2d
 80040b8:	222b      	movge	r2, #43	; 0x2b
 80040ba:	4249      	neglt	r1, r1
 80040bc:	2909      	cmp	r1, #9
 80040be:	7042      	strb	r2, [r0, #1]
 80040c0:	dd2b      	ble.n	800411a <__exponent+0x70>
 80040c2:	f10d 0407 	add.w	r4, sp, #7
 80040c6:	46a4      	mov	ip, r4
 80040c8:	270a      	movs	r7, #10
 80040ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80040ce:	460a      	mov	r2, r1
 80040d0:	46a6      	mov	lr, r4
 80040d2:	fb07 1516 	mls	r5, r7, r6, r1
 80040d6:	2a63      	cmp	r2, #99	; 0x63
 80040d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80040dc:	4631      	mov	r1, r6
 80040de:	f104 34ff 	add.w	r4, r4, #4294967295
 80040e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040e6:	dcf0      	bgt.n	80040ca <__exponent+0x20>
 80040e8:	3130      	adds	r1, #48	; 0x30
 80040ea:	f1ae 0502 	sub.w	r5, lr, #2
 80040ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040f2:	4629      	mov	r1, r5
 80040f4:	1c44      	adds	r4, r0, #1
 80040f6:	4561      	cmp	r1, ip
 80040f8:	d30a      	bcc.n	8004110 <__exponent+0x66>
 80040fa:	f10d 0209 	add.w	r2, sp, #9
 80040fe:	eba2 020e 	sub.w	r2, r2, lr
 8004102:	4565      	cmp	r5, ip
 8004104:	bf88      	it	hi
 8004106:	2200      	movhi	r2, #0
 8004108:	4413      	add	r3, r2
 800410a:	1a18      	subs	r0, r3, r0
 800410c:	b003      	add	sp, #12
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004110:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004114:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004118:	e7ed      	b.n	80040f6 <__exponent+0x4c>
 800411a:	2330      	movs	r3, #48	; 0x30
 800411c:	3130      	adds	r1, #48	; 0x30
 800411e:	7083      	strb	r3, [r0, #2]
 8004120:	70c1      	strb	r1, [r0, #3]
 8004122:	1d03      	adds	r3, r0, #4
 8004124:	e7f1      	b.n	800410a <__exponent+0x60>
	...

08004128 <_printf_float>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	b091      	sub	sp, #68	; 0x44
 800412e:	460c      	mov	r4, r1
 8004130:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004134:	4616      	mov	r6, r2
 8004136:	461f      	mov	r7, r3
 8004138:	4605      	mov	r5, r0
 800413a:	f001 fd3b 	bl	8005bb4 <_localeconv_r>
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	9309      	str	r3, [sp, #36]	; 0x24
 8004144:	f7fc f804 	bl	8000150 <strlen>
 8004148:	2300      	movs	r3, #0
 800414a:	930e      	str	r3, [sp, #56]	; 0x38
 800414c:	f8d8 3000 	ldr.w	r3, [r8]
 8004150:	900a      	str	r0, [sp, #40]	; 0x28
 8004152:	3307      	adds	r3, #7
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	f103 0208 	add.w	r2, r3, #8
 800415c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004160:	f8d4 b000 	ldr.w	fp, [r4]
 8004164:	f8c8 2000 	str.w	r2, [r8]
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004170:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004174:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004178:	930b      	str	r3, [sp, #44]	; 0x2c
 800417a:	f04f 32ff 	mov.w	r2, #4294967295
 800417e:	4640      	mov	r0, r8
 8004180:	4b9c      	ldr	r3, [pc, #624]	; (80043f4 <_printf_float+0x2cc>)
 8004182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004184:	f7fc fc42 	bl	8000a0c <__aeabi_dcmpun>
 8004188:	bb70      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800418a:	f04f 32ff 	mov.w	r2, #4294967295
 800418e:	4640      	mov	r0, r8
 8004190:	4b98      	ldr	r3, [pc, #608]	; (80043f4 <_printf_float+0x2cc>)
 8004192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004194:	f7fc fc1c 	bl	80009d0 <__aeabi_dcmple>
 8004198:	bb30      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	4640      	mov	r0, r8
 80041a0:	4651      	mov	r1, sl
 80041a2:	f7fc fc0b 	bl	80009bc <__aeabi_dcmplt>
 80041a6:	b110      	cbz	r0, 80041ae <_printf_float+0x86>
 80041a8:	232d      	movs	r3, #45	; 0x2d
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ae:	4b92      	ldr	r3, [pc, #584]	; (80043f8 <_printf_float+0x2d0>)
 80041b0:	4892      	ldr	r0, [pc, #584]	; (80043fc <_printf_float+0x2d4>)
 80041b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041b6:	bf94      	ite	ls
 80041b8:	4698      	movls	r8, r3
 80041ba:	4680      	movhi	r8, r0
 80041bc:	2303      	movs	r3, #3
 80041be:	f04f 0a00 	mov.w	sl, #0
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	f02b 0304 	bic.w	r3, fp, #4
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	4633      	mov	r3, r6
 80041cc:	4621      	mov	r1, r4
 80041ce:	4628      	mov	r0, r5
 80041d0:	9700      	str	r7, [sp, #0]
 80041d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80041d4:	f000 f9d4 	bl	8004580 <_printf_common>
 80041d8:	3001      	adds	r0, #1
 80041da:	f040 8090 	bne.w	80042fe <_printf_float+0x1d6>
 80041de:	f04f 30ff 	mov.w	r0, #4294967295
 80041e2:	b011      	add	sp, #68	; 0x44
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	4642      	mov	r2, r8
 80041ea:	4653      	mov	r3, sl
 80041ec:	4640      	mov	r0, r8
 80041ee:	4651      	mov	r1, sl
 80041f0:	f7fc fc0c 	bl	8000a0c <__aeabi_dcmpun>
 80041f4:	b148      	cbz	r0, 800420a <_printf_float+0xe2>
 80041f6:	f1ba 0f00 	cmp.w	sl, #0
 80041fa:	bfb8      	it	lt
 80041fc:	232d      	movlt	r3, #45	; 0x2d
 80041fe:	4880      	ldr	r0, [pc, #512]	; (8004400 <_printf_float+0x2d8>)
 8004200:	bfb8      	it	lt
 8004202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004206:	4b7f      	ldr	r3, [pc, #508]	; (8004404 <_printf_float+0x2dc>)
 8004208:	e7d3      	b.n	80041b2 <_printf_float+0x8a>
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	d142      	bne.n	800429a <_printf_float+0x172>
 8004214:	2306      	movs	r3, #6
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	9206      	str	r2, [sp, #24]
 800421c:	aa0e      	add	r2, sp, #56	; 0x38
 800421e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004222:	aa0d      	add	r2, sp, #52	; 0x34
 8004224:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004228:	9203      	str	r2, [sp, #12]
 800422a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800422e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	4642      	mov	r2, r8
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4628      	mov	r0, r5
 800423c:	4653      	mov	r3, sl
 800423e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004240:	f7ff fed4 	bl	8003fec <__cvt>
 8004244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004246:	4680      	mov	r8, r0
 8004248:	2947      	cmp	r1, #71	; 0x47
 800424a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800424c:	d108      	bne.n	8004260 <_printf_float+0x138>
 800424e:	1cc8      	adds	r0, r1, #3
 8004250:	db02      	blt.n	8004258 <_printf_float+0x130>
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	4299      	cmp	r1, r3
 8004256:	dd40      	ble.n	80042da <_printf_float+0x1b2>
 8004258:	f1a9 0902 	sub.w	r9, r9, #2
 800425c:	fa5f f989 	uxtb.w	r9, r9
 8004260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004264:	d81f      	bhi.n	80042a6 <_printf_float+0x17e>
 8004266:	464a      	mov	r2, r9
 8004268:	3901      	subs	r1, #1
 800426a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800426e:	910d      	str	r1, [sp, #52]	; 0x34
 8004270:	f7ff ff1b 	bl	80040aa <__exponent>
 8004274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004276:	4682      	mov	sl, r0
 8004278:	1813      	adds	r3, r2, r0
 800427a:	2a01      	cmp	r2, #1
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	dc02      	bgt.n	8004286 <_printf_float+0x15e>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	07d2      	lsls	r2, r2, #31
 8004284:	d501      	bpl.n	800428a <_printf_float+0x162>
 8004286:	3301      	adds	r3, #1
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800428e:	2b00      	cmp	r3, #0
 8004290:	d09b      	beq.n	80041ca <_printf_float+0xa2>
 8004292:	232d      	movs	r3, #45	; 0x2d
 8004294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004298:	e797      	b.n	80041ca <_printf_float+0xa2>
 800429a:	2947      	cmp	r1, #71	; 0x47
 800429c:	d1bc      	bne.n	8004218 <_printf_float+0xf0>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ba      	bne.n	8004218 <_printf_float+0xf0>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e7b7      	b.n	8004216 <_printf_float+0xee>
 80042a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042aa:	d118      	bne.n	80042de <_printf_float+0x1b6>
 80042ac:	2900      	cmp	r1, #0
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	dd0b      	ble.n	80042ca <_printf_float+0x1a2>
 80042b2:	6121      	str	r1, [r4, #16]
 80042b4:	b913      	cbnz	r3, 80042bc <_printf_float+0x194>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	07d0      	lsls	r0, r2, #31
 80042ba:	d502      	bpl.n	80042c2 <_printf_float+0x19a>
 80042bc:	3301      	adds	r3, #1
 80042be:	440b      	add	r3, r1
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	f04f 0a00 	mov.w	sl, #0
 80042c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80042c8:	e7df      	b.n	800428a <_printf_float+0x162>
 80042ca:	b913      	cbnz	r3, 80042d2 <_printf_float+0x1aa>
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	07d2      	lsls	r2, r2, #31
 80042d0:	d501      	bpl.n	80042d6 <_printf_float+0x1ae>
 80042d2:	3302      	adds	r3, #2
 80042d4:	e7f4      	b.n	80042c0 <_printf_float+0x198>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f2      	b.n	80042c0 <_printf_float+0x198>
 80042da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e0:	4299      	cmp	r1, r3
 80042e2:	db05      	blt.n	80042f0 <_printf_float+0x1c8>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6121      	str	r1, [r4, #16]
 80042e8:	07d8      	lsls	r0, r3, #31
 80042ea:	d5ea      	bpl.n	80042c2 <_printf_float+0x19a>
 80042ec:	1c4b      	adds	r3, r1, #1
 80042ee:	e7e7      	b.n	80042c0 <_printf_float+0x198>
 80042f0:	2900      	cmp	r1, #0
 80042f2:	bfcc      	ite	gt
 80042f4:	2201      	movgt	r2, #1
 80042f6:	f1c1 0202 	rsble	r2, r1, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	e7e0      	b.n	80042c0 <_printf_float+0x198>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	055a      	lsls	r2, r3, #21
 8004302:	d407      	bmi.n	8004314 <_printf_float+0x1ec>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	4642      	mov	r2, r8
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	d12b      	bne.n	800436a <_printf_float+0x242>
 8004312:	e764      	b.n	80041de <_printf_float+0xb6>
 8004314:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004318:	f240 80dd 	bls.w	80044d6 <_printf_float+0x3ae>
 800431c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	f7fc fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8004328:	2800      	cmp	r0, #0
 800432a:	d033      	beq.n	8004394 <_printf_float+0x26c>
 800432c:	2301      	movs	r3, #1
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	4a35      	ldr	r2, [pc, #212]	; (8004408 <_printf_float+0x2e0>)
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f af51 	beq.w	80041de <_printf_float+0xb6>
 800433c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004340:	429a      	cmp	r2, r3
 8004342:	db02      	blt.n	800434a <_printf_float+0x222>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07d8      	lsls	r0, r3, #31
 8004348:	d50f      	bpl.n	800436a <_printf_float+0x242>
 800434a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f af42 	beq.w	80041de <_printf_float+0xb6>
 800435a:	f04f 0800 	mov.w	r8, #0
 800435e:	f104 091a 	add.w	r9, r4, #26
 8004362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004364:	3b01      	subs	r3, #1
 8004366:	4543      	cmp	r3, r8
 8004368:	dc09      	bgt.n	800437e <_printf_float+0x256>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	f100 8102 	bmi.w	8004576 <_printf_float+0x44e>
 8004372:	68e0      	ldr	r0, [r4, #12]
 8004374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004376:	4298      	cmp	r0, r3
 8004378:	bfb8      	it	lt
 800437a:	4618      	movlt	r0, r3
 800437c:	e731      	b.n	80041e2 <_printf_float+0xba>
 800437e:	2301      	movs	r3, #1
 8004380:	464a      	mov	r2, r9
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f af28 	beq.w	80041de <_printf_float+0xb6>
 800438e:	f108 0801 	add.w	r8, r8, #1
 8004392:	e7e6      	b.n	8004362 <_printf_float+0x23a>
 8004394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004396:	2b00      	cmp	r3, #0
 8004398:	dc38      	bgt.n	800440c <_printf_float+0x2e4>
 800439a:	2301      	movs	r3, #1
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <_printf_float+0x2e0>)
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f af1a 	beq.w	80041de <_printf_float+0xb6>
 80043aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d102      	bne.n	80043b8 <_printf_float+0x290>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	07d9      	lsls	r1, r3, #31
 80043b6:	d5d8      	bpl.n	800436a <_printf_float+0x242>
 80043b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f af0b 	beq.w	80041de <_printf_float+0xb6>
 80043c8:	f04f 0900 	mov.w	r9, #0
 80043cc:	f104 0a1a 	add.w	sl, r4, #26
 80043d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043d2:	425b      	negs	r3, r3
 80043d4:	454b      	cmp	r3, r9
 80043d6:	dc01      	bgt.n	80043dc <_printf_float+0x2b4>
 80043d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043da:	e794      	b.n	8004306 <_printf_float+0x1de>
 80043dc:	2301      	movs	r3, #1
 80043de:	4652      	mov	r2, sl
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f aef9 	beq.w	80041de <_printf_float+0xb6>
 80043ec:	f109 0901 	add.w	r9, r9, #1
 80043f0:	e7ee      	b.n	80043d0 <_printf_float+0x2a8>
 80043f2:	bf00      	nop
 80043f4:	7fefffff 	.word	0x7fefffff
 80043f8:	08006d04 	.word	0x08006d04
 80043fc:	08006d08 	.word	0x08006d08
 8004400:	08006d10 	.word	0x08006d10
 8004404:	08006d0c 	.word	0x08006d0c
 8004408:	08006d14 	.word	0x08006d14
 800440c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800440e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004410:	429a      	cmp	r2, r3
 8004412:	bfa8      	it	ge
 8004414:	461a      	movge	r2, r3
 8004416:	2a00      	cmp	r2, #0
 8004418:	4691      	mov	r9, r2
 800441a:	dc37      	bgt.n	800448c <_printf_float+0x364>
 800441c:	f04f 0b00 	mov.w	fp, #0
 8004420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004424:	f104 021a 	add.w	r2, r4, #26
 8004428:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800442c:	ebaa 0309 	sub.w	r3, sl, r9
 8004430:	455b      	cmp	r3, fp
 8004432:	dc33      	bgt.n	800449c <_printf_float+0x374>
 8004434:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004438:	429a      	cmp	r2, r3
 800443a:	db3b      	blt.n	80044b4 <_printf_float+0x38c>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d438      	bmi.n	80044b4 <_printf_float+0x38c>
 8004442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004444:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004446:	eba2 030a 	sub.w	r3, r2, sl
 800444a:	eba2 0901 	sub.w	r9, r2, r1
 800444e:	4599      	cmp	r9, r3
 8004450:	bfa8      	it	ge
 8004452:	4699      	movge	r9, r3
 8004454:	f1b9 0f00 	cmp.w	r9, #0
 8004458:	dc34      	bgt.n	80044c4 <_printf_float+0x39c>
 800445a:	f04f 0800 	mov.w	r8, #0
 800445e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004462:	f104 0a1a 	add.w	sl, r4, #26
 8004466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	eba3 0309 	sub.w	r3, r3, r9
 8004470:	4543      	cmp	r3, r8
 8004472:	f77f af7a 	ble.w	800436a <_printf_float+0x242>
 8004476:	2301      	movs	r3, #1
 8004478:	4652      	mov	r2, sl
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f aeac 	beq.w	80041de <_printf_float+0xb6>
 8004486:	f108 0801 	add.w	r8, r8, #1
 800448a:	e7ec      	b.n	8004466 <_printf_float+0x33e>
 800448c:	4613      	mov	r3, r2
 800448e:	4631      	mov	r1, r6
 8004490:	4642      	mov	r2, r8
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	d1c0      	bne.n	800441c <_printf_float+0x2f4>
 800449a:	e6a0      	b.n	80041de <_printf_float+0xb6>
 800449c:	2301      	movs	r3, #1
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f ae99 	beq.w	80041de <_printf_float+0xb6>
 80044ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044ae:	f10b 0b01 	add.w	fp, fp, #1
 80044b2:	e7b9      	b.n	8004428 <_printf_float+0x300>
 80044b4:	4631      	mov	r1, r6
 80044b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	d1bf      	bne.n	8004442 <_printf_float+0x31a>
 80044c2:	e68c      	b.n	80041de <_printf_float+0xb6>
 80044c4:	464b      	mov	r3, r9
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	eb08 020a 	add.w	r2, r8, sl
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	d1c2      	bne.n	800445a <_printf_float+0x332>
 80044d4:	e683      	b.n	80041de <_printf_float+0xb6>
 80044d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044d8:	2a01      	cmp	r2, #1
 80044da:	dc01      	bgt.n	80044e0 <_printf_float+0x3b8>
 80044dc:	07db      	lsls	r3, r3, #31
 80044de:	d537      	bpl.n	8004550 <_printf_float+0x428>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4642      	mov	r2, r8
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f ae77 	beq.w	80041de <_printf_float+0xb6>
 80044f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f4:	4631      	mov	r1, r6
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b8      	blx	r7
 80044fa:	3001      	adds	r0, #1
 80044fc:	f43f ae6f 	beq.w	80041de <_printf_float+0xb6>
 8004500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004504:	2200      	movs	r2, #0
 8004506:	2300      	movs	r3, #0
 8004508:	f7fc fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800450c:	b9d8      	cbnz	r0, 8004546 <_printf_float+0x41e>
 800450e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004510:	f108 0201 	add.w	r2, r8, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	d10e      	bne.n	800453e <_printf_float+0x416>
 8004520:	e65d      	b.n	80041de <_printf_float+0xb6>
 8004522:	2301      	movs	r3, #1
 8004524:	464a      	mov	r2, r9
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	f43f ae56 	beq.w	80041de <_printf_float+0xb6>
 8004532:	f108 0801 	add.w	r8, r8, #1
 8004536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004538:	3b01      	subs	r3, #1
 800453a:	4543      	cmp	r3, r8
 800453c:	dcf1      	bgt.n	8004522 <_printf_float+0x3fa>
 800453e:	4653      	mov	r3, sl
 8004540:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004544:	e6e0      	b.n	8004308 <_printf_float+0x1e0>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 091a 	add.w	r9, r4, #26
 800454e:	e7f2      	b.n	8004536 <_printf_float+0x40e>
 8004550:	2301      	movs	r3, #1
 8004552:	4642      	mov	r2, r8
 8004554:	e7df      	b.n	8004516 <_printf_float+0x3ee>
 8004556:	2301      	movs	r3, #1
 8004558:	464a      	mov	r2, r9
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	f43f ae3c 	beq.w	80041de <_printf_float+0xb6>
 8004566:	f108 0801 	add.w	r8, r8, #1
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800456e:	1a5b      	subs	r3, r3, r1
 8004570:	4543      	cmp	r3, r8
 8004572:	dcf0      	bgt.n	8004556 <_printf_float+0x42e>
 8004574:	e6fd      	b.n	8004372 <_printf_float+0x24a>
 8004576:	f04f 0800 	mov.w	r8, #0
 800457a:	f104 0919 	add.w	r9, r4, #25
 800457e:	e7f4      	b.n	800456a <_printf_float+0x442>

08004580 <_printf_common>:
 8004580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	4616      	mov	r6, r2
 8004586:	4699      	mov	r9, r3
 8004588:	688a      	ldr	r2, [r1, #8]
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	4607      	mov	r7, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	bfb8      	it	lt
 8004592:	4613      	movlt	r3, r2
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a0:	b10a      	cbz	r2, 80045a6 <_printf_common+0x26>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	0699      	lsls	r1, r3, #26
 80045aa:	bf42      	ittt	mi
 80045ac:	6833      	ldrmi	r3, [r6, #0]
 80045ae:	3302      	addmi	r3, #2
 80045b0:	6033      	strmi	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d106      	bne.n	80045c8 <_printf_common+0x48>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	6832      	ldr	r2, [r6, #0]
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dc28      	bgt.n	800461a <_printf_common+0x9a>
 80045c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045cc:	1e13      	subs	r3, r2, #0
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	bf18      	it	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	0692      	lsls	r2, r2, #26
 80045d6:	d42d      	bmi.n	8004634 <_printf_common+0xb4>
 80045d8:	4649      	mov	r1, r9
 80045da:	4638      	mov	r0, r7
 80045dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e0:	47c0      	blx	r8
 80045e2:	3001      	adds	r0, #1
 80045e4:	d020      	beq.n	8004628 <_printf_common+0xa8>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	68e5      	ldr	r5, [r4, #12]
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf18      	it	ne
 80045f2:	2500      	movne	r5, #0
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	f04f 0600 	mov.w	r6, #0
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	bf08      	it	eq
 80045fe:	1aad      	subeq	r5, r5, r2
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	bf08      	it	eq
 8004604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004608:	4293      	cmp	r3, r2
 800460a:	bfc4      	itt	gt
 800460c:	1a9b      	subgt	r3, r3, r2
 800460e:	18ed      	addgt	r5, r5, r3
 8004610:	341a      	adds	r4, #26
 8004612:	42b5      	cmp	r5, r6
 8004614:	d11a      	bne.n	800464c <_printf_common+0xcc>
 8004616:	2000      	movs	r0, #0
 8004618:	e008      	b.n	800462c <_printf_common+0xac>
 800461a:	2301      	movs	r3, #1
 800461c:	4652      	mov	r2, sl
 800461e:	4649      	mov	r1, r9
 8004620:	4638      	mov	r0, r7
 8004622:	47c0      	blx	r8
 8004624:	3001      	adds	r0, #1
 8004626:	d103      	bne.n	8004630 <_printf_common+0xb0>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004630:	3501      	adds	r5, #1
 8004632:	e7c4      	b.n	80045be <_printf_common+0x3e>
 8004634:	2030      	movs	r0, #48	; 0x30
 8004636:	18e1      	adds	r1, r4, r3
 8004638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004642:	4422      	add	r2, r4
 8004644:	3302      	adds	r3, #2
 8004646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800464a:	e7c5      	b.n	80045d8 <_printf_common+0x58>
 800464c:	2301      	movs	r3, #1
 800464e:	4622      	mov	r2, r4
 8004650:	4649      	mov	r1, r9
 8004652:	4638      	mov	r0, r7
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d0e6      	beq.n	8004628 <_printf_common+0xa8>
 800465a:	3601      	adds	r6, #1
 800465c:	e7d9      	b.n	8004612 <_printf_common+0x92>
	...

08004660 <_printf_i>:
 8004660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	7e27      	ldrb	r7, [r4, #24]
 8004668:	4691      	mov	r9, r2
 800466a:	2f78      	cmp	r7, #120	; 0x78
 800466c:	4680      	mov	r8, r0
 800466e:	469a      	mov	sl, r3
 8004670:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004676:	d807      	bhi.n	8004688 <_printf_i+0x28>
 8004678:	2f62      	cmp	r7, #98	; 0x62
 800467a:	d80a      	bhi.n	8004692 <_printf_i+0x32>
 800467c:	2f00      	cmp	r7, #0
 800467e:	f000 80d9 	beq.w	8004834 <_printf_i+0x1d4>
 8004682:	2f58      	cmp	r7, #88	; 0x58
 8004684:	f000 80a4 	beq.w	80047d0 <_printf_i+0x170>
 8004688:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800468c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004690:	e03a      	b.n	8004708 <_printf_i+0xa8>
 8004692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004696:	2b15      	cmp	r3, #21
 8004698:	d8f6      	bhi.n	8004688 <_printf_i+0x28>
 800469a:	a001      	add	r0, pc, #4	; (adr r0, 80046a0 <_printf_i+0x40>)
 800469c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	08004689 	.word	0x08004689
 80046ac:	08004689 	.word	0x08004689
 80046b0:	08004689 	.word	0x08004689
 80046b4:	08004689 	.word	0x08004689
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	08004689 	.word	0x08004689
 80046c0:	08004689 	.word	0x08004689
 80046c4:	08004689 	.word	0x08004689
 80046c8:	08004689 	.word	0x08004689
 80046cc:	0800481b 	.word	0x0800481b
 80046d0:	0800473d 	.word	0x0800473d
 80046d4:	080047fd 	.word	0x080047fd
 80046d8:	08004689 	.word	0x08004689
 80046dc:	08004689 	.word	0x08004689
 80046e0:	0800483d 	.word	0x0800483d
 80046e4:	08004689 	.word	0x08004689
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	08004689 	.word	0x08004689
 80046f0:	08004689 	.word	0x08004689
 80046f4:	08004805 	.word	0x08004805
 80046f8:	680b      	ldr	r3, [r1, #0]
 80046fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	600a      	str	r2, [r1, #0]
 8004704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004708:	2301      	movs	r3, #1
 800470a:	e0a4      	b.n	8004856 <_printf_i+0x1f6>
 800470c:	6825      	ldr	r5, [r4, #0]
 800470e:	6808      	ldr	r0, [r1, #0]
 8004710:	062e      	lsls	r6, r5, #24
 8004712:	f100 0304 	add.w	r3, r0, #4
 8004716:	d50a      	bpl.n	800472e <_printf_i+0xce>
 8004718:	6805      	ldr	r5, [r0, #0]
 800471a:	600b      	str	r3, [r1, #0]
 800471c:	2d00      	cmp	r5, #0
 800471e:	da03      	bge.n	8004728 <_printf_i+0xc8>
 8004720:	232d      	movs	r3, #45	; 0x2d
 8004722:	426d      	negs	r5, r5
 8004724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004728:	230a      	movs	r3, #10
 800472a:	485e      	ldr	r0, [pc, #376]	; (80048a4 <_printf_i+0x244>)
 800472c:	e019      	b.n	8004762 <_printf_i+0x102>
 800472e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004732:	6805      	ldr	r5, [r0, #0]
 8004734:	600b      	str	r3, [r1, #0]
 8004736:	bf18      	it	ne
 8004738:	b22d      	sxthne	r5, r5
 800473a:	e7ef      	b.n	800471c <_printf_i+0xbc>
 800473c:	680b      	ldr	r3, [r1, #0]
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	1d18      	adds	r0, r3, #4
 8004742:	6008      	str	r0, [r1, #0]
 8004744:	0628      	lsls	r0, r5, #24
 8004746:	d501      	bpl.n	800474c <_printf_i+0xec>
 8004748:	681d      	ldr	r5, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0xf2>
 800474c:	0669      	lsls	r1, r5, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0xe8>
 8004750:	881d      	ldrh	r5, [r3, #0]
 8004752:	2f6f      	cmp	r7, #111	; 0x6f
 8004754:	bf0c      	ite	eq
 8004756:	2308      	moveq	r3, #8
 8004758:	230a      	movne	r3, #10
 800475a:	4852      	ldr	r0, [pc, #328]	; (80048a4 <_printf_i+0x244>)
 800475c:	2100      	movs	r1, #0
 800475e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004762:	6866      	ldr	r6, [r4, #4]
 8004764:	2e00      	cmp	r6, #0
 8004766:	bfa8      	it	ge
 8004768:	6821      	ldrge	r1, [r4, #0]
 800476a:	60a6      	str	r6, [r4, #8]
 800476c:	bfa4      	itt	ge
 800476e:	f021 0104 	bicge.w	r1, r1, #4
 8004772:	6021      	strge	r1, [r4, #0]
 8004774:	b90d      	cbnz	r5, 800477a <_printf_i+0x11a>
 8004776:	2e00      	cmp	r6, #0
 8004778:	d04d      	beq.n	8004816 <_printf_i+0x1b6>
 800477a:	4616      	mov	r6, r2
 800477c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004780:	fb03 5711 	mls	r7, r3, r1, r5
 8004784:	5dc7      	ldrb	r7, [r0, r7]
 8004786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800478a:	462f      	mov	r7, r5
 800478c:	42bb      	cmp	r3, r7
 800478e:	460d      	mov	r5, r1
 8004790:	d9f4      	bls.n	800477c <_printf_i+0x11c>
 8004792:	2b08      	cmp	r3, #8
 8004794:	d10b      	bne.n	80047ae <_printf_i+0x14e>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	07df      	lsls	r7, r3, #31
 800479a:	d508      	bpl.n	80047ae <_printf_i+0x14e>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	6861      	ldr	r1, [r4, #4]
 80047a0:	4299      	cmp	r1, r3
 80047a2:	bfde      	ittt	le
 80047a4:	2330      	movle	r3, #48	; 0x30
 80047a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047ae:	1b92      	subs	r2, r2, r6
 80047b0:	6122      	str	r2, [r4, #16]
 80047b2:	464b      	mov	r3, r9
 80047b4:	4621      	mov	r1, r4
 80047b6:	4640      	mov	r0, r8
 80047b8:	f8cd a000 	str.w	sl, [sp]
 80047bc:	aa03      	add	r2, sp, #12
 80047be:	f7ff fedf 	bl	8004580 <_printf_common>
 80047c2:	3001      	adds	r0, #1
 80047c4:	d14c      	bne.n	8004860 <_printf_i+0x200>
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ca:	b004      	add	sp, #16
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	4834      	ldr	r0, [pc, #208]	; (80048a4 <_printf_i+0x244>)
 80047d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047d6:	680e      	ldr	r6, [r1, #0]
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f856 5b04 	ldr.w	r5, [r6], #4
 80047de:	061f      	lsls	r7, r3, #24
 80047e0:	600e      	str	r6, [r1, #0]
 80047e2:	d514      	bpl.n	800480e <_printf_i+0x1ae>
 80047e4:	07d9      	lsls	r1, r3, #31
 80047e6:	bf44      	itt	mi
 80047e8:	f043 0320 	orrmi.w	r3, r3, #32
 80047ec:	6023      	strmi	r3, [r4, #0]
 80047ee:	b91d      	cbnz	r5, 80047f8 <_printf_i+0x198>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	2310      	movs	r3, #16
 80047fa:	e7af      	b.n	800475c <_printf_i+0xfc>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f043 0320 	orr.w	r3, r3, #32
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	2378      	movs	r3, #120	; 0x78
 8004806:	4828      	ldr	r0, [pc, #160]	; (80048a8 <_printf_i+0x248>)
 8004808:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800480c:	e7e3      	b.n	80047d6 <_printf_i+0x176>
 800480e:	065e      	lsls	r6, r3, #25
 8004810:	bf48      	it	mi
 8004812:	b2ad      	uxthmi	r5, r5
 8004814:	e7e6      	b.n	80047e4 <_printf_i+0x184>
 8004816:	4616      	mov	r6, r2
 8004818:	e7bb      	b.n	8004792 <_printf_i+0x132>
 800481a:	680b      	ldr	r3, [r1, #0]
 800481c:	6826      	ldr	r6, [r4, #0]
 800481e:	1d1d      	adds	r5, r3, #4
 8004820:	6960      	ldr	r0, [r4, #20]
 8004822:	600d      	str	r5, [r1, #0]
 8004824:	0635      	lsls	r5, r6, #24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	d501      	bpl.n	800482e <_printf_i+0x1ce>
 800482a:	6018      	str	r0, [r3, #0]
 800482c:	e002      	b.n	8004834 <_printf_i+0x1d4>
 800482e:	0671      	lsls	r1, r6, #25
 8004830:	d5fb      	bpl.n	800482a <_printf_i+0x1ca>
 8004832:	8018      	strh	r0, [r3, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	4616      	mov	r6, r2
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	e7ba      	b.n	80047b2 <_printf_i+0x152>
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	1d1a      	adds	r2, r3, #4
 8004840:	600a      	str	r2, [r1, #0]
 8004842:	681e      	ldr	r6, [r3, #0]
 8004844:	2100      	movs	r1, #0
 8004846:	4630      	mov	r0, r6
 8004848:	6862      	ldr	r2, [r4, #4]
 800484a:	f001 fa27 	bl	8005c9c <memchr>
 800484e:	b108      	cbz	r0, 8004854 <_printf_i+0x1f4>
 8004850:	1b80      	subs	r0, r0, r6
 8004852:	6060      	str	r0, [r4, #4]
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	2300      	movs	r3, #0
 800485a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485e:	e7a8      	b.n	80047b2 <_printf_i+0x152>
 8004860:	4632      	mov	r2, r6
 8004862:	4649      	mov	r1, r9
 8004864:	4640      	mov	r0, r8
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	47d0      	blx	sl
 800486a:	3001      	adds	r0, #1
 800486c:	d0ab      	beq.n	80047c6 <_printf_i+0x166>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	079b      	lsls	r3, r3, #30
 8004872:	d413      	bmi.n	800489c <_printf_i+0x23c>
 8004874:	68e0      	ldr	r0, [r4, #12]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	4298      	cmp	r0, r3
 800487a:	bfb8      	it	lt
 800487c:	4618      	movlt	r0, r3
 800487e:	e7a4      	b.n	80047ca <_printf_i+0x16a>
 8004880:	2301      	movs	r3, #1
 8004882:	4632      	mov	r2, r6
 8004884:	4649      	mov	r1, r9
 8004886:	4640      	mov	r0, r8
 8004888:	47d0      	blx	sl
 800488a:	3001      	adds	r0, #1
 800488c:	d09b      	beq.n	80047c6 <_printf_i+0x166>
 800488e:	3501      	adds	r5, #1
 8004890:	68e3      	ldr	r3, [r4, #12]
 8004892:	9903      	ldr	r1, [sp, #12]
 8004894:	1a5b      	subs	r3, r3, r1
 8004896:	42ab      	cmp	r3, r5
 8004898:	dcf2      	bgt.n	8004880 <_printf_i+0x220>
 800489a:	e7eb      	b.n	8004874 <_printf_i+0x214>
 800489c:	2500      	movs	r5, #0
 800489e:	f104 0619 	add.w	r6, r4, #25
 80048a2:	e7f5      	b.n	8004890 <_printf_i+0x230>
 80048a4:	08006d16 	.word	0x08006d16
 80048a8:	08006d27 	.word	0x08006d27

080048ac <iprintf>:
 80048ac:	b40f      	push	{r0, r1, r2, r3}
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <iprintf+0x2c>)
 80048b0:	b513      	push	{r0, r1, r4, lr}
 80048b2:	681c      	ldr	r4, [r3, #0]
 80048b4:	b124      	cbz	r4, 80048c0 <iprintf+0x14>
 80048b6:	69a3      	ldr	r3, [r4, #24]
 80048b8:	b913      	cbnz	r3, 80048c0 <iprintf+0x14>
 80048ba:	4620      	mov	r0, r4
 80048bc:	f001 f8dc 	bl	8005a78 <__sinit>
 80048c0:	ab05      	add	r3, sp, #20
 80048c2:	4620      	mov	r0, r4
 80048c4:	9a04      	ldr	r2, [sp, #16]
 80048c6:	68a1      	ldr	r1, [r4, #8]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	f001 fe61 	bl	8006590 <_vfiprintf_r>
 80048ce:	b002      	add	sp, #8
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d4:	b004      	add	sp, #16
 80048d6:	4770      	bx	lr
 80048d8:	2000000c 	.word	0x2000000c

080048dc <_puts_r>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	460e      	mov	r6, r1
 80048e0:	4605      	mov	r5, r0
 80048e2:	b118      	cbz	r0, 80048ec <_puts_r+0x10>
 80048e4:	6983      	ldr	r3, [r0, #24]
 80048e6:	b90b      	cbnz	r3, 80048ec <_puts_r+0x10>
 80048e8:	f001 f8c6 	bl	8005a78 <__sinit>
 80048ec:	69ab      	ldr	r3, [r5, #24]
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	b913      	cbnz	r3, 80048f8 <_puts_r+0x1c>
 80048f2:	4628      	mov	r0, r5
 80048f4:	f001 f8c0 	bl	8005a78 <__sinit>
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <_puts_r+0xd0>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d120      	bne.n	8004940 <_puts_r+0x64>
 80048fe:	686c      	ldr	r4, [r5, #4]
 8004900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004902:	07db      	lsls	r3, r3, #31
 8004904:	d405      	bmi.n	8004912 <_puts_r+0x36>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	0598      	lsls	r0, r3, #22
 800490a:	d402      	bmi.n	8004912 <_puts_r+0x36>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f001 f956 	bl	8005bbe <__retarget_lock_acquire_recursive>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	0719      	lsls	r1, r3, #28
 8004916:	d51d      	bpl.n	8004954 <_puts_r+0x78>
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	b1db      	cbz	r3, 8004954 <_puts_r+0x78>
 800491c:	3e01      	subs	r6, #1
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004924:	3b01      	subs	r3, #1
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	bb39      	cbnz	r1, 800497a <_puts_r+0x9e>
 800492a:	2b00      	cmp	r3, #0
 800492c:	da38      	bge.n	80049a0 <_puts_r+0xc4>
 800492e:	4622      	mov	r2, r4
 8004930:	210a      	movs	r1, #10
 8004932:	4628      	mov	r0, r5
 8004934:	f000 f848 	bl	80049c8 <__swbuf_r>
 8004938:	3001      	adds	r0, #1
 800493a:	d011      	beq.n	8004960 <_puts_r+0x84>
 800493c:	250a      	movs	r5, #10
 800493e:	e011      	b.n	8004964 <_puts_r+0x88>
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <_puts_r+0xd4>)
 8004942:	429c      	cmp	r4, r3
 8004944:	d101      	bne.n	800494a <_puts_r+0x6e>
 8004946:	68ac      	ldr	r4, [r5, #8]
 8004948:	e7da      	b.n	8004900 <_puts_r+0x24>
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <_puts_r+0xd8>)
 800494c:	429c      	cmp	r4, r3
 800494e:	bf08      	it	eq
 8004950:	68ec      	ldreq	r4, [r5, #12]
 8004952:	e7d5      	b.n	8004900 <_puts_r+0x24>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 f888 	bl	8004a6c <__swsetup_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0dd      	beq.n	800491c <_puts_r+0x40>
 8004960:	f04f 35ff 	mov.w	r5, #4294967295
 8004964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004966:	07da      	lsls	r2, r3, #31
 8004968:	d405      	bmi.n	8004976 <_puts_r+0x9a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d402      	bmi.n	8004976 <_puts_r+0x9a>
 8004970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004972:	f001 f925 	bl	8005bc0 <__retarget_lock_release_recursive>
 8004976:	4628      	mov	r0, r5
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	2b00      	cmp	r3, #0
 800497c:	da04      	bge.n	8004988 <_puts_r+0xac>
 800497e:	69a2      	ldr	r2, [r4, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	dc06      	bgt.n	8004992 <_puts_r+0xb6>
 8004984:	290a      	cmp	r1, #10
 8004986:	d004      	beq.n	8004992 <_puts_r+0xb6>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	7019      	strb	r1, [r3, #0]
 8004990:	e7c5      	b.n	800491e <_puts_r+0x42>
 8004992:	4622      	mov	r2, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f817 	bl	80049c8 <__swbuf_r>
 800499a:	3001      	adds	r0, #1
 800499c:	d1bf      	bne.n	800491e <_puts_r+0x42>
 800499e:	e7df      	b.n	8004960 <_puts_r+0x84>
 80049a0:	250a      	movs	r5, #10
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	701d      	strb	r5, [r3, #0]
 80049aa:	e7db      	b.n	8004964 <_puts_r+0x88>
 80049ac:	08006dec 	.word	0x08006dec
 80049b0:	08006e0c 	.word	0x08006e0c
 80049b4:	08006dcc 	.word	0x08006dcc

080049b8 <puts>:
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <puts+0xc>)
 80049ba:	4601      	mov	r1, r0
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f7ff bf8d 	b.w	80048dc <_puts_r>
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <__swbuf_r>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	460e      	mov	r6, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	4605      	mov	r5, r0
 80049d0:	b118      	cbz	r0, 80049da <__swbuf_r+0x12>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <__swbuf_r+0x12>
 80049d6:	f001 f84f 	bl	8005a78 <__sinit>
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <__swbuf_r+0x98>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d12b      	bne.n	8004a38 <__swbuf_r+0x70>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	69a3      	ldr	r3, [r4, #24]
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	071a      	lsls	r2, r3, #28
 80049ea:	d52f      	bpl.n	8004a4c <__swbuf_r+0x84>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b36b      	cbz	r3, 8004a4c <__swbuf_r+0x84>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	b2f6      	uxtb	r6, r6
 80049f6:	1ac0      	subs	r0, r0, r3
 80049f8:	6963      	ldr	r3, [r4, #20]
 80049fa:	4637      	mov	r7, r6
 80049fc:	4283      	cmp	r3, r0
 80049fe:	dc04      	bgt.n	8004a0a <__swbuf_r+0x42>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 ffa4 	bl	8005950 <_fflush_r>
 8004a08:	bb30      	cbnz	r0, 8004a58 <__swbuf_r+0x90>
 8004a0a:	68a3      	ldr	r3, [r4, #8]
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	6022      	str	r2, [r4, #0]
 8004a18:	701e      	strb	r6, [r3, #0]
 8004a1a:	6963      	ldr	r3, [r4, #20]
 8004a1c:	4283      	cmp	r3, r0
 8004a1e:	d004      	beq.n	8004a2a <__swbuf_r+0x62>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d506      	bpl.n	8004a34 <__swbuf_r+0x6c>
 8004a26:	2e0a      	cmp	r6, #10
 8004a28:	d104      	bne.n	8004a34 <__swbuf_r+0x6c>
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 ff8f 	bl	8005950 <_fflush_r>
 8004a32:	b988      	cbnz	r0, 8004a58 <__swbuf_r+0x90>
 8004a34:	4638      	mov	r0, r7
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <__swbuf_r+0x9c>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d101      	bne.n	8004a42 <__swbuf_r+0x7a>
 8004a3e:	68ac      	ldr	r4, [r5, #8]
 8004a40:	e7cf      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <__swbuf_r+0xa0>)
 8004a44:	429c      	cmp	r4, r3
 8004a46:	bf08      	it	eq
 8004a48:	68ec      	ldreq	r4, [r5, #12]
 8004a4a:	e7ca      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f80c 	bl	8004a6c <__swsetup_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0cb      	beq.n	80049f0 <__swbuf_r+0x28>
 8004a58:	f04f 37ff 	mov.w	r7, #4294967295
 8004a5c:	e7ea      	b.n	8004a34 <__swbuf_r+0x6c>
 8004a5e:	bf00      	nop
 8004a60:	08006dec 	.word	0x08006dec
 8004a64:	08006e0c 	.word	0x08006e0c
 8004a68:	08006dcc 	.word	0x08006dcc

08004a6c <__swsetup_r>:
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <__swsetup_r+0xcc>)
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	681d      	ldr	r5, [r3, #0]
 8004a72:	4606      	mov	r6, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	b125      	cbz	r5, 8004a82 <__swsetup_r+0x16>
 8004a78:	69ab      	ldr	r3, [r5, #24]
 8004a7a:	b913      	cbnz	r3, 8004a82 <__swsetup_r+0x16>
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 fffb 	bl	8005a78 <__sinit>
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <__swsetup_r+0xd0>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d10f      	bne.n	8004aa8 <__swsetup_r+0x3c>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a90:	0719      	lsls	r1, r3, #28
 8004a92:	d42c      	bmi.n	8004aee <__swsetup_r+0x82>
 8004a94:	06dd      	lsls	r5, r3, #27
 8004a96:	d411      	bmi.n	8004abc <__swsetup_r+0x50>
 8004a98:	2309      	movs	r3, #9
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	e03e      	b.n	8004b26 <__swsetup_r+0xba>
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <__swsetup_r+0xd4>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d101      	bne.n	8004ab2 <__swsetup_r+0x46>
 8004aae:	68ac      	ldr	r4, [r5, #8]
 8004ab0:	e7eb      	b.n	8004a8a <__swsetup_r+0x1e>
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <__swsetup_r+0xd8>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	bf08      	it	eq
 8004ab8:	68ec      	ldreq	r4, [r5, #12]
 8004aba:	e7e6      	b.n	8004a8a <__swsetup_r+0x1e>
 8004abc:	0758      	lsls	r0, r3, #29
 8004abe:	d512      	bpl.n	8004ae6 <__swsetup_r+0x7a>
 8004ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac2:	b141      	cbz	r1, 8004ad6 <__swsetup_r+0x6a>
 8004ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <__swsetup_r+0x66>
 8004acc:	4630      	mov	r0, r6
 8004ace:	f001 fc91 	bl	80063f4 <_free_r>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	b94b      	cbnz	r3, 8004b06 <__swsetup_r+0x9a>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d003      	beq.n	8004b06 <__swsetup_r+0x9a>
 8004afe:	4621      	mov	r1, r4
 8004b00:	4630      	mov	r0, r6
 8004b02:	f001 f883 	bl	8005c0c <__smakebuf_r>
 8004b06:	89a0      	ldrh	r0, [r4, #12]
 8004b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b0c:	f010 0301 	ands.w	r3, r0, #1
 8004b10:	d00a      	beq.n	8004b28 <__swsetup_r+0xbc>
 8004b12:	2300      	movs	r3, #0
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	6963      	ldr	r3, [r4, #20]
 8004b18:	425b      	negs	r3, r3
 8004b1a:	61a3      	str	r3, [r4, #24]
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	b943      	cbnz	r3, 8004b32 <__swsetup_r+0xc6>
 8004b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b24:	d1ba      	bne.n	8004a9c <__swsetup_r+0x30>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	0781      	lsls	r1, r0, #30
 8004b2a:	bf58      	it	pl
 8004b2c:	6963      	ldrpl	r3, [r4, #20]
 8004b2e:	60a3      	str	r3, [r4, #8]
 8004b30:	e7f4      	b.n	8004b1c <__swsetup_r+0xb0>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e7f7      	b.n	8004b26 <__swsetup_r+0xba>
 8004b36:	bf00      	nop
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	08006dec 	.word	0x08006dec
 8004b40:	08006e0c 	.word	0x08006e0c
 8004b44:	08006dcc 	.word	0x08006dcc

08004b48 <quorem>:
 8004b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	6903      	ldr	r3, [r0, #16]
 8004b4e:	690c      	ldr	r4, [r1, #16]
 8004b50:	4607      	mov	r7, r0
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	f2c0 8083 	blt.w	8004c5e <quorem+0x116>
 8004b58:	3c01      	subs	r4, #1
 8004b5a:	f100 0514 	add.w	r5, r0, #20
 8004b5e:	f101 0814 	add.w	r8, r1, #20
 8004b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b70:	3301      	adds	r3, #1
 8004b72:	429a      	cmp	r2, r3
 8004b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b80:	d332      	bcc.n	8004be8 <quorem+0xa0>
 8004b82:	f04f 0e00 	mov.w	lr, #0
 8004b86:	4640      	mov	r0, r8
 8004b88:	46ac      	mov	ip, r5
 8004b8a:	46f2      	mov	sl, lr
 8004b8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b90:	b293      	uxth	r3, r2
 8004b92:	fb06 e303 	mla	r3, r6, r3, lr
 8004b96:	0c12      	lsrs	r2, r2, #16
 8004b98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b9c:	fb06 e202 	mla	r2, r6, r2, lr
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ba6:	f8dc a000 	ldr.w	sl, [ip]
 8004baa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bae:	fa1f fa8a 	uxth.w	sl, sl
 8004bb2:	4453      	add	r3, sl
 8004bb4:	fa1f fa82 	uxth.w	sl, r2
 8004bb8:	f8dc 2000 	ldr.w	r2, [ip]
 8004bbc:	4581      	cmp	r9, r0
 8004bbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bcc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bd0:	f84c 3b04 	str.w	r3, [ip], #4
 8004bd4:	d2da      	bcs.n	8004b8c <quorem+0x44>
 8004bd6:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bda:	b92b      	cbnz	r3, 8004be8 <quorem+0xa0>
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	3b04      	subs	r3, #4
 8004be0:	429d      	cmp	r5, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	d32f      	bcc.n	8004c46 <quorem+0xfe>
 8004be6:	613c      	str	r4, [r7, #16]
 8004be8:	4638      	mov	r0, r7
 8004bea:	f001 faed 	bl	80061c8 <__mcmp>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	db25      	blt.n	8004c3e <quorem+0xf6>
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f04f 0c00 	mov.w	ip, #0
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	f858 1b04 	ldr.w	r1, [r8], #4
 8004bfe:	f8d0 e000 	ldr.w	lr, [r0]
 8004c02:	b28b      	uxth	r3, r1
 8004c04:	ebac 0303 	sub.w	r3, ip, r3
 8004c08:	fa1f f28e 	uxth.w	r2, lr
 8004c0c:	4413      	add	r3, r2
 8004c0e:	0c0a      	lsrs	r2, r1, #16
 8004c10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c1e:	45c1      	cmp	r9, r8
 8004c20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c24:	f840 3b04 	str.w	r3, [r0], #4
 8004c28:	d2e7      	bcs.n	8004bfa <quorem+0xb2>
 8004c2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c32:	b922      	cbnz	r2, 8004c3e <quorem+0xf6>
 8004c34:	3b04      	subs	r3, #4
 8004c36:	429d      	cmp	r5, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	d30a      	bcc.n	8004c52 <quorem+0x10a>
 8004c3c:	613c      	str	r4, [r7, #16]
 8004c3e:	4630      	mov	r0, r6
 8004c40:	b003      	add	sp, #12
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d1cb      	bne.n	8004be6 <quorem+0x9e>
 8004c4e:	3c01      	subs	r4, #1
 8004c50:	e7c6      	b.n	8004be0 <quorem+0x98>
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	3b04      	subs	r3, #4
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d1f0      	bne.n	8004c3c <quorem+0xf4>
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	e7eb      	b.n	8004c36 <quorem+0xee>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e7ee      	b.n	8004c40 <quorem+0xf8>
 8004c62:	0000      	movs	r0, r0
 8004c64:	0000      	movs	r0, r0
	...

08004c68 <_dtoa_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	461f      	mov	r7, r3
 8004c70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c72:	b099      	sub	sp, #100	; 0x64
 8004c74:	4605      	mov	r5, r0
 8004c76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c7e:	b974      	cbnz	r4, 8004c9e <_dtoa_r+0x36>
 8004c80:	2010      	movs	r0, #16
 8004c82:	f001 f803 	bl	8005c8c <malloc>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6268      	str	r0, [r5, #36]	; 0x24
 8004c8a:	b920      	cbnz	r0, 8004c96 <_dtoa_r+0x2e>
 8004c8c:	21ea      	movs	r1, #234	; 0xea
 8004c8e:	4bae      	ldr	r3, [pc, #696]	; (8004f48 <_dtoa_r+0x2e0>)
 8004c90:	48ae      	ldr	r0, [pc, #696]	; (8004f4c <_dtoa_r+0x2e4>)
 8004c92:	f001 fe13 	bl	80068bc <__assert_func>
 8004c96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c9a:	6004      	str	r4, [r0, #0]
 8004c9c:	60c4      	str	r4, [r0, #12]
 8004c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	b151      	cbz	r1, 8004cba <_dtoa_r+0x52>
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	4093      	lsls	r3, r2
 8004caa:	604a      	str	r2, [r1, #4]
 8004cac:	608b      	str	r3, [r1, #8]
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f001 f850 	bl	8005d54 <_Bfree>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	1e3b      	subs	r3, r7, #0
 8004cbc:	bfaf      	iteee	ge
 8004cbe:	2300      	movge	r3, #0
 8004cc0:	2201      	movlt	r2, #1
 8004cc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cc6:	9305      	strlt	r3, [sp, #20]
 8004cc8:	bfa8      	it	ge
 8004cca:	f8c8 3000 	strge.w	r3, [r8]
 8004cce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cd2:	4b9f      	ldr	r3, [pc, #636]	; (8004f50 <_dtoa_r+0x2e8>)
 8004cd4:	bfb8      	it	lt
 8004cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cda:	ea33 0309 	bics.w	r3, r3, r9
 8004cde:	d119      	bne.n	8004d14 <_dtoa_r+0xac>
 8004ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ce4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cec:	4333      	orrs	r3, r6
 8004cee:	f000 8580 	beq.w	80057f2 <_dtoa_r+0xb8a>
 8004cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004cf4:	b953      	cbnz	r3, 8004d0c <_dtoa_r+0xa4>
 8004cf6:	4b97      	ldr	r3, [pc, #604]	; (8004f54 <_dtoa_r+0x2ec>)
 8004cf8:	e022      	b.n	8004d40 <_dtoa_r+0xd8>
 8004cfa:	4b97      	ldr	r3, [pc, #604]	; (8004f58 <_dtoa_r+0x2f0>)
 8004cfc:	9308      	str	r3, [sp, #32]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	9808      	ldr	r0, [sp, #32]
 8004d06:	b019      	add	sp, #100	; 0x64
 8004d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0c:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <_dtoa_r+0x2ec>)
 8004d0e:	9308      	str	r3, [sp, #32]
 8004d10:	3303      	adds	r3, #3
 8004d12:	e7f5      	b.n	8004d00 <_dtoa_r+0x98>
 8004d14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	f7fb fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8004d28:	4680      	mov	r8, r0
 8004d2a:	b158      	cbz	r0, 8004d44 <_dtoa_r+0xdc>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8559 	beq.w	80057ec <_dtoa_r+0xb84>
 8004d3a:	4888      	ldr	r0, [pc, #544]	; (8004f5c <_dtoa_r+0x2f4>)
 8004d3c:	6018      	str	r0, [r3, #0]
 8004d3e:	1e43      	subs	r3, r0, #1
 8004d40:	9308      	str	r3, [sp, #32]
 8004d42:	e7df      	b.n	8004d04 <_dtoa_r+0x9c>
 8004d44:	ab16      	add	r3, sp, #88	; 0x58
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	ab17      	add	r3, sp, #92	; 0x5c
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d52:	f001 fae5 	bl	8006320 <__d2b>
 8004d56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d5a:	4682      	mov	sl, r0
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	d07e      	beq.n	8004e5e <_dtoa_r+0x1f6>
 8004d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4b78      	ldr	r3, [pc, #480]	; (8004f60 <_dtoa_r+0x2f8>)
 8004d7e:	f7fb f9f3 	bl	8000168 <__aeabi_dsub>
 8004d82:	a36b      	add	r3, pc, #428	; (adr r3, 8004f30 <_dtoa_r+0x2c8>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fba6 	bl	80004d8 <__aeabi_dmul>
 8004d8c:	a36a      	add	r3, pc, #424	; (adr r3, 8004f38 <_dtoa_r+0x2d0>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f7fb f9eb 	bl	800016c <__adddf3>
 8004d96:	4606      	mov	r6, r0
 8004d98:	4620      	mov	r0, r4
 8004d9a:	460f      	mov	r7, r1
 8004d9c:	f7fb fb32 	bl	8000404 <__aeabi_i2d>
 8004da0:	a367      	add	r3, pc, #412	; (adr r3, 8004f40 <_dtoa_r+0x2d8>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fb97 	bl	80004d8 <__aeabi_dmul>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb f9db 	bl	800016c <__adddf3>
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
 8004dba:	f7fb fe3d 	bl	8000a38 <__aeabi_d2iz>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4681      	mov	r9, r0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fdf8 	bl	80009bc <__aeabi_dcmplt>
 8004dcc:	b148      	cbz	r0, 8004de2 <_dtoa_r+0x17a>
 8004dce:	4648      	mov	r0, r9
 8004dd0:	f7fb fb18 	bl	8000404 <__aeabi_i2d>
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	f7fb fde6 	bl	80009a8 <__aeabi_dcmpeq>
 8004ddc:	b908      	cbnz	r0, 8004de2 <_dtoa_r+0x17a>
 8004dde:	f109 39ff 	add.w	r9, r9, #4294967295
 8004de2:	f1b9 0f16 	cmp.w	r9, #22
 8004de6:	d857      	bhi.n	8004e98 <_dtoa_r+0x230>
 8004de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dec:	4b5d      	ldr	r3, [pc, #372]	; (8004f64 <_dtoa_r+0x2fc>)
 8004dee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f7fb fde1 	bl	80009bc <__aeabi_dcmplt>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d04e      	beq.n	8004e9c <_dtoa_r+0x234>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e08:	1b1c      	subs	r4, r3, r4
 8004e0a:	1e63      	subs	r3, r4, #1
 8004e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0e:	bf49      	itett	mi
 8004e10:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e14:	2300      	movpl	r3, #0
 8004e16:	9306      	strmi	r3, [sp, #24]
 8004e18:	2300      	movmi	r3, #0
 8004e1a:	bf54      	ite	pl
 8004e1c:	9306      	strpl	r3, [sp, #24]
 8004e1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e20:	f1b9 0f00 	cmp.w	r9, #0
 8004e24:	db3c      	blt.n	8004ea0 <_dtoa_r+0x238>
 8004e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004e2c:	444b      	add	r3, r9
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	2300      	movs	r3, #0
 8004e32:	930a      	str	r3, [sp, #40]	; 0x28
 8004e34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	d86c      	bhi.n	8004f14 <_dtoa_r+0x2ac>
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	bfc4      	itt	gt
 8004e3e:	3b04      	subgt	r3, #4
 8004e40:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e44:	bfc8      	it	gt
 8004e46:	2400      	movgt	r4, #0
 8004e48:	f1a3 0302 	sub.w	r3, r3, #2
 8004e4c:	bfd8      	it	le
 8004e4e:	2401      	movle	r4, #1
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	f200 808b 	bhi.w	8004f6c <_dtoa_r+0x304>
 8004e56:	e8df f003 	tbb	[pc, r3]
 8004e5a:	4f2d      	.short	0x4f2d
 8004e5c:	5b4d      	.short	0x5b4d
 8004e5e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e62:	441c      	add	r4, r3
 8004e64:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	bfc3      	ittte	gt
 8004e6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e70:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e74:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e78:	f1c3 0320 	rsble	r3, r3, #32
 8004e7c:	bfc6      	itte	gt
 8004e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e82:	4318      	orrgt	r0, r3
 8004e84:	fa06 f003 	lslle.w	r0, r6, r3
 8004e88:	f7fb faac 	bl	80003e4 <__aeabi_ui2d>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e92:	3c01      	subs	r4, #1
 8004e94:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e96:	e770      	b.n	8004d7a <_dtoa_r+0x112>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7b3      	b.n	8004e04 <_dtoa_r+0x19c>
 8004e9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e9e:	e7b2      	b.n	8004e06 <_dtoa_r+0x19e>
 8004ea0:	9b06      	ldr	r3, [sp, #24]
 8004ea2:	eba3 0309 	sub.w	r3, r3, r9
 8004ea6:	9306      	str	r3, [sp, #24]
 8004ea8:	f1c9 0300 	rsb	r3, r9, #0
 8004eac:	930a      	str	r3, [sp, #40]	; 0x28
 8004eae:	2300      	movs	r3, #0
 8004eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8004eb2:	e7bf      	b.n	8004e34 <_dtoa_r+0x1cc>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	dc59      	bgt.n	8004f72 <_dtoa_r+0x30a>
 8004ebe:	f04f 0b01 	mov.w	fp, #1
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	f8cd b008 	str.w	fp, [sp, #8]
 8004ec8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ed0:	6042      	str	r2, [r0, #4]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	f102 0614 	add.w	r6, r2, #20
 8004ed8:	429e      	cmp	r6, r3
 8004eda:	6841      	ldr	r1, [r0, #4]
 8004edc:	d94f      	bls.n	8004f7e <_dtoa_r+0x316>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fef8 	bl	8005cd4 <_Balloc>
 8004ee4:	9008      	str	r0, [sp, #32]
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d14d      	bne.n	8004f86 <_dtoa_r+0x31e>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <_dtoa_r+0x300>)
 8004ef2:	e6cd      	b.n	8004c90 <_dtoa_r+0x28>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e7de      	b.n	8004eb6 <_dtoa_r+0x24e>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004efc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004efe:	eb09 0b03 	add.w	fp, r9, r3
 8004f02:	f10b 0301 	add.w	r3, fp, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	bfb8      	it	lt
 8004f0c:	2301      	movlt	r3, #1
 8004f0e:	e7dd      	b.n	8004ecc <_dtoa_r+0x264>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e7f2      	b.n	8004efa <_dtoa_r+0x292>
 8004f14:	2401      	movs	r4, #1
 8004f16:	2300      	movs	r3, #0
 8004f18:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f1c:	f04f 3bff 	mov.w	fp, #4294967295
 8004f20:	2200      	movs	r2, #0
 8004f22:	2312      	movs	r3, #18
 8004f24:	f8cd b008 	str.w	fp, [sp, #8]
 8004f28:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f2a:	e7cf      	b.n	8004ecc <_dtoa_r+0x264>
 8004f2c:	f3af 8000 	nop.w
 8004f30:	636f4361 	.word	0x636f4361
 8004f34:	3fd287a7 	.word	0x3fd287a7
 8004f38:	8b60c8b3 	.word	0x8b60c8b3
 8004f3c:	3fc68a28 	.word	0x3fc68a28
 8004f40:	509f79fb 	.word	0x509f79fb
 8004f44:	3fd34413 	.word	0x3fd34413
 8004f48:	08006d45 	.word	0x08006d45
 8004f4c:	08006d5c 	.word	0x08006d5c
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	08006d41 	.word	0x08006d41
 8004f58:	08006d38 	.word	0x08006d38
 8004f5c:	08006d15 	.word	0x08006d15
 8004f60:	3ff80000 	.word	0x3ff80000
 8004f64:	08006eb8 	.word	0x08006eb8
 8004f68:	08006dbb 	.word	0x08006dbb
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f70:	e7d4      	b.n	8004f1c <_dtoa_r+0x2b4>
 8004f72:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004f76:	465b      	mov	r3, fp
 8004f78:	f8cd b008 	str.w	fp, [sp, #8]
 8004f7c:	e7a6      	b.n	8004ecc <_dtoa_r+0x264>
 8004f7e:	3101      	adds	r1, #1
 8004f80:	6041      	str	r1, [r0, #4]
 8004f82:	0052      	lsls	r2, r2, #1
 8004f84:	e7a6      	b.n	8004ed4 <_dtoa_r+0x26c>
 8004f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f88:	9a08      	ldr	r2, [sp, #32]
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	9b02      	ldr	r3, [sp, #8]
 8004f8e:	2b0e      	cmp	r3, #14
 8004f90:	f200 80a8 	bhi.w	80050e4 <_dtoa_r+0x47c>
 8004f94:	2c00      	cmp	r4, #0
 8004f96:	f000 80a5 	beq.w	80050e4 <_dtoa_r+0x47c>
 8004f9a:	f1b9 0f00 	cmp.w	r9, #0
 8004f9e:	dd34      	ble.n	800500a <_dtoa_r+0x3a2>
 8004fa0:	4a9a      	ldr	r2, [pc, #616]	; (800520c <_dtoa_r+0x5a4>)
 8004fa2:	f009 030f 	and.w	r3, r9, #15
 8004fa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004faa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fb6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004fba:	d016      	beq.n	8004fea <_dtoa_r+0x382>
 8004fbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fc0:	4b93      	ldr	r3, [pc, #588]	; (8005210 <_dtoa_r+0x5a8>)
 8004fc2:	2703      	movs	r7, #3
 8004fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fc8:	f7fb fbb0 	bl	800072c <__aeabi_ddiv>
 8004fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd0:	f004 040f 	and.w	r4, r4, #15
 8004fd4:	4e8e      	ldr	r6, [pc, #568]	; (8005210 <_dtoa_r+0x5a8>)
 8004fd6:	b954      	cbnz	r4, 8004fee <_dtoa_r+0x386>
 8004fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe0:	f7fb fba4 	bl	800072c <__aeabi_ddiv>
 8004fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fe8:	e029      	b.n	800503e <_dtoa_r+0x3d6>
 8004fea:	2702      	movs	r7, #2
 8004fec:	e7f2      	b.n	8004fd4 <_dtoa_r+0x36c>
 8004fee:	07e1      	lsls	r1, r4, #31
 8004ff0:	d508      	bpl.n	8005004 <_dtoa_r+0x39c>
 8004ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ffa:	f7fb fa6d 	bl	80004d8 <__aeabi_dmul>
 8004ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005002:	3701      	adds	r7, #1
 8005004:	1064      	asrs	r4, r4, #1
 8005006:	3608      	adds	r6, #8
 8005008:	e7e5      	b.n	8004fd6 <_dtoa_r+0x36e>
 800500a:	f000 80a5 	beq.w	8005158 <_dtoa_r+0x4f0>
 800500e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005012:	f1c9 0400 	rsb	r4, r9, #0
 8005016:	4b7d      	ldr	r3, [pc, #500]	; (800520c <_dtoa_r+0x5a4>)
 8005018:	f004 020f 	and.w	r2, r4, #15
 800501c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fa58 	bl	80004d8 <__aeabi_dmul>
 8005028:	2702      	movs	r7, #2
 800502a:	2300      	movs	r3, #0
 800502c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005030:	4e77      	ldr	r6, [pc, #476]	; (8005210 <_dtoa_r+0x5a8>)
 8005032:	1124      	asrs	r4, r4, #4
 8005034:	2c00      	cmp	r4, #0
 8005036:	f040 8084 	bne.w	8005142 <_dtoa_r+0x4da>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d2      	bne.n	8004fe4 <_dtoa_r+0x37c>
 800503e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 808b 	beq.w	800515c <_dtoa_r+0x4f4>
 8005046:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800504a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800504e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005052:	2200      	movs	r2, #0
 8005054:	4b6f      	ldr	r3, [pc, #444]	; (8005214 <_dtoa_r+0x5ac>)
 8005056:	f7fb fcb1 	bl	80009bc <__aeabi_dcmplt>
 800505a:	2800      	cmp	r0, #0
 800505c:	d07e      	beq.n	800515c <_dtoa_r+0x4f4>
 800505e:	9b02      	ldr	r3, [sp, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d07b      	beq.n	800515c <_dtoa_r+0x4f4>
 8005064:	f1bb 0f00 	cmp.w	fp, #0
 8005068:	dd38      	ble.n	80050dc <_dtoa_r+0x474>
 800506a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800506e:	2200      	movs	r2, #0
 8005070:	4b69      	ldr	r3, [pc, #420]	; (8005218 <_dtoa_r+0x5b0>)
 8005072:	f7fb fa31 	bl	80004d8 <__aeabi_dmul>
 8005076:	465c      	mov	r4, fp
 8005078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800507c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005080:	3701      	adds	r7, #1
 8005082:	4638      	mov	r0, r7
 8005084:	f7fb f9be 	bl	8000404 <__aeabi_i2d>
 8005088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800508c:	f7fb fa24 	bl	80004d8 <__aeabi_dmul>
 8005090:	2200      	movs	r2, #0
 8005092:	4b62      	ldr	r3, [pc, #392]	; (800521c <_dtoa_r+0x5b4>)
 8005094:	f7fb f86a 	bl	800016c <__adddf3>
 8005098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800509c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050a0:	9611      	str	r6, [sp, #68]	; 0x44
 80050a2:	2c00      	cmp	r4, #0
 80050a4:	d15d      	bne.n	8005162 <_dtoa_r+0x4fa>
 80050a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050aa:	2200      	movs	r2, #0
 80050ac:	4b5c      	ldr	r3, [pc, #368]	; (8005220 <_dtoa_r+0x5b8>)
 80050ae:	f7fb f85b 	bl	8000168 <__aeabi_dsub>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ba:	4633      	mov	r3, r6
 80050bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050be:	f7fb fc9b 	bl	80009f8 <__aeabi_dcmpgt>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	f040 829e 	bne.w	8005604 <_dtoa_r+0x99c>
 80050c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050d2:	f7fb fc73 	bl	80009bc <__aeabi_dcmplt>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f040 8292 	bne.w	8005600 <_dtoa_r+0x998>
 80050dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f2c0 8153 	blt.w	8005392 <_dtoa_r+0x72a>
 80050ec:	f1b9 0f0e 	cmp.w	r9, #14
 80050f0:	f300 814f 	bgt.w	8005392 <_dtoa_r+0x72a>
 80050f4:	4b45      	ldr	r3, [pc, #276]	; (800520c <_dtoa_r+0x5a4>)
 80050f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80050fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005104:	2b00      	cmp	r3, #0
 8005106:	f280 80db 	bge.w	80052c0 <_dtoa_r+0x658>
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f300 80d7 	bgt.w	80052c0 <_dtoa_r+0x658>
 8005112:	f040 8274 	bne.w	80055fe <_dtoa_r+0x996>
 8005116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800511a:	2200      	movs	r2, #0
 800511c:	4b40      	ldr	r3, [pc, #256]	; (8005220 <_dtoa_r+0x5b8>)
 800511e:	f7fb f9db 	bl	80004d8 <__aeabi_dmul>
 8005122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005126:	f7fb fc5d 	bl	80009e4 <__aeabi_dcmpge>
 800512a:	9c02      	ldr	r4, [sp, #8]
 800512c:	4626      	mov	r6, r4
 800512e:	2800      	cmp	r0, #0
 8005130:	f040 824a 	bne.w	80055c8 <_dtoa_r+0x960>
 8005134:	2331      	movs	r3, #49	; 0x31
 8005136:	9f08      	ldr	r7, [sp, #32]
 8005138:	f109 0901 	add.w	r9, r9, #1
 800513c:	f807 3b01 	strb.w	r3, [r7], #1
 8005140:	e246      	b.n	80055d0 <_dtoa_r+0x968>
 8005142:	07e2      	lsls	r2, r4, #31
 8005144:	d505      	bpl.n	8005152 <_dtoa_r+0x4ea>
 8005146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800514a:	f7fb f9c5 	bl	80004d8 <__aeabi_dmul>
 800514e:	2301      	movs	r3, #1
 8005150:	3701      	adds	r7, #1
 8005152:	1064      	asrs	r4, r4, #1
 8005154:	3608      	adds	r6, #8
 8005156:	e76d      	b.n	8005034 <_dtoa_r+0x3cc>
 8005158:	2702      	movs	r7, #2
 800515a:	e770      	b.n	800503e <_dtoa_r+0x3d6>
 800515c:	46c8      	mov	r8, r9
 800515e:	9c02      	ldr	r4, [sp, #8]
 8005160:	e78f      	b.n	8005082 <_dtoa_r+0x41a>
 8005162:	9908      	ldr	r1, [sp, #32]
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <_dtoa_r+0x5a4>)
 8005166:	4421      	add	r1, r4
 8005168:	9112      	str	r1, [sp, #72]	; 0x48
 800516a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800516c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005170:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005174:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005178:	2900      	cmp	r1, #0
 800517a:	d055      	beq.n	8005228 <_dtoa_r+0x5c0>
 800517c:	2000      	movs	r0, #0
 800517e:	4929      	ldr	r1, [pc, #164]	; (8005224 <_dtoa_r+0x5bc>)
 8005180:	f7fb fad4 	bl	800072c <__aeabi_ddiv>
 8005184:	463b      	mov	r3, r7
 8005186:	4632      	mov	r2, r6
 8005188:	f7fa ffee 	bl	8000168 <__aeabi_dsub>
 800518c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005190:	9f08      	ldr	r7, [sp, #32]
 8005192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005196:	f7fb fc4f 	bl	8000a38 <__aeabi_d2iz>
 800519a:	4604      	mov	r4, r0
 800519c:	f7fb f932 	bl	8000404 <__aeabi_i2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a8:	f7fa ffde 	bl	8000168 <__aeabi_dsub>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	3430      	adds	r4, #48	; 0x30
 80051b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ba:	f807 4b01 	strb.w	r4, [r7], #1
 80051be:	f7fb fbfd 	bl	80009bc <__aeabi_dcmplt>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d174      	bne.n	80052b0 <_dtoa_r+0x648>
 80051c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ca:	2000      	movs	r0, #0
 80051cc:	4911      	ldr	r1, [pc, #68]	; (8005214 <_dtoa_r+0x5ac>)
 80051ce:	f7fa ffcb 	bl	8000168 <__aeabi_dsub>
 80051d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d6:	f7fb fbf1 	bl	80009bc <__aeabi_dcmplt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f040 80b6 	bne.w	800534c <_dtoa_r+0x6e4>
 80051e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051e2:	429f      	cmp	r7, r3
 80051e4:	f43f af7a 	beq.w	80050dc <_dtoa_r+0x474>
 80051e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ec:	2200      	movs	r2, #0
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <_dtoa_r+0x5b0>)
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	2200      	movs	r2, #0
 80051f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <_dtoa_r+0x5b0>)
 8005200:	f7fb f96a 	bl	80004d8 <__aeabi_dmul>
 8005204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005208:	e7c3      	b.n	8005192 <_dtoa_r+0x52a>
 800520a:	bf00      	nop
 800520c:	08006eb8 	.word	0x08006eb8
 8005210:	08006e90 	.word	0x08006e90
 8005214:	3ff00000 	.word	0x3ff00000
 8005218:	40240000 	.word	0x40240000
 800521c:	401c0000 	.word	0x401c0000
 8005220:	40140000 	.word	0x40140000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fb f954 	bl	80004d8 <__aeabi_dmul>
 8005230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005232:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005236:	9c08      	ldr	r4, [sp, #32]
 8005238:	9314      	str	r3, [sp, #80]	; 0x50
 800523a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800523e:	f7fb fbfb 	bl	8000a38 <__aeabi_d2iz>
 8005242:	9015      	str	r0, [sp, #84]	; 0x54
 8005244:	f7fb f8de 	bl	8000404 <__aeabi_i2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005250:	f7fa ff8a 	bl	8000168 <__aeabi_dsub>
 8005254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005256:	4606      	mov	r6, r0
 8005258:	3330      	adds	r3, #48	; 0x30
 800525a:	f804 3b01 	strb.w	r3, [r4], #1
 800525e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005260:	460f      	mov	r7, r1
 8005262:	429c      	cmp	r4, r3
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	d124      	bne.n	80052b4 <_dtoa_r+0x64c>
 800526a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800526e:	4bb3      	ldr	r3, [pc, #716]	; (800553c <_dtoa_r+0x8d4>)
 8005270:	f7fa ff7c 	bl	800016c <__adddf3>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4630      	mov	r0, r6
 800527a:	4639      	mov	r1, r7
 800527c:	f7fb fbbc 	bl	80009f8 <__aeabi_dcmpgt>
 8005280:	2800      	cmp	r0, #0
 8005282:	d162      	bne.n	800534a <_dtoa_r+0x6e2>
 8005284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005288:	2000      	movs	r0, #0
 800528a:	49ac      	ldr	r1, [pc, #688]	; (800553c <_dtoa_r+0x8d4>)
 800528c:	f7fa ff6c 	bl	8000168 <__aeabi_dsub>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fb fb90 	bl	80009bc <__aeabi_dcmplt>
 800529c:	2800      	cmp	r0, #0
 800529e:	f43f af1d 	beq.w	80050dc <_dtoa_r+0x474>
 80052a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052a4:	1e7b      	subs	r3, r7, #1
 80052a6:	9314      	str	r3, [sp, #80]	; 0x50
 80052a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d0f8      	beq.n	80052a2 <_dtoa_r+0x63a>
 80052b0:	46c1      	mov	r9, r8
 80052b2:	e03a      	b.n	800532a <_dtoa_r+0x6c2>
 80052b4:	4ba2      	ldr	r3, [pc, #648]	; (8005540 <_dtoa_r+0x8d8>)
 80052b6:	f7fb f90f 	bl	80004d8 <__aeabi_dmul>
 80052ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052be:	e7bc      	b.n	800523a <_dtoa_r+0x5d2>
 80052c0:	9f08      	ldr	r7, [sp, #32]
 80052c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	f7fb fbb3 	bl	8000a38 <__aeabi_d2iz>
 80052d2:	4604      	mov	r4, r0
 80052d4:	f7fb f896 	bl	8000404 <__aeabi_i2d>
 80052d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052e4:	460b      	mov	r3, r1
 80052e6:	4602      	mov	r2, r0
 80052e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ec:	f7fa ff3c 	bl	8000168 <__aeabi_dsub>
 80052f0:	f807 6b01 	strb.w	r6, [r7], #1
 80052f4:	9e08      	ldr	r6, [sp, #32]
 80052f6:	9b02      	ldr	r3, [sp, #8]
 80052f8:	1bbe      	subs	r6, r7, r6
 80052fa:	42b3      	cmp	r3, r6
 80052fc:	d13a      	bne.n	8005374 <_dtoa_r+0x70c>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	f7fa ff33 	bl	800016c <__adddf3>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800530e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005312:	f7fb fb71 	bl	80009f8 <__aeabi_dcmpgt>
 8005316:	bb58      	cbnz	r0, 8005370 <_dtoa_r+0x708>
 8005318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800531c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005320:	f7fb fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8005324:	b108      	cbz	r0, 800532a <_dtoa_r+0x6c2>
 8005326:	07e1      	lsls	r1, r4, #31
 8005328:	d422      	bmi.n	8005370 <_dtoa_r+0x708>
 800532a:	4628      	mov	r0, r5
 800532c:	4651      	mov	r1, sl
 800532e:	f000 fd11 	bl	8005d54 <_Bfree>
 8005332:	2300      	movs	r3, #0
 8005334:	703b      	strb	r3, [r7, #0]
 8005336:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005338:	f109 0001 	add.w	r0, r9, #1
 800533c:	6018      	str	r0, [r3, #0]
 800533e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005340:	2b00      	cmp	r3, #0
 8005342:	f43f acdf 	beq.w	8004d04 <_dtoa_r+0x9c>
 8005346:	601f      	str	r7, [r3, #0]
 8005348:	e4dc      	b.n	8004d04 <_dtoa_r+0x9c>
 800534a:	4627      	mov	r7, r4
 800534c:	463b      	mov	r3, r7
 800534e:	461f      	mov	r7, r3
 8005350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005354:	2a39      	cmp	r2, #57	; 0x39
 8005356:	d107      	bne.n	8005368 <_dtoa_r+0x700>
 8005358:	9a08      	ldr	r2, [sp, #32]
 800535a:	429a      	cmp	r2, r3
 800535c:	d1f7      	bne.n	800534e <_dtoa_r+0x6e6>
 800535e:	2230      	movs	r2, #48	; 0x30
 8005360:	9908      	ldr	r1, [sp, #32]
 8005362:	f108 0801 	add.w	r8, r8, #1
 8005366:	700a      	strb	r2, [r1, #0]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	3201      	adds	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e79f      	b.n	80052b0 <_dtoa_r+0x648>
 8005370:	46c8      	mov	r8, r9
 8005372:	e7eb      	b.n	800534c <_dtoa_r+0x6e4>
 8005374:	2200      	movs	r2, #0
 8005376:	4b72      	ldr	r3, [pc, #456]	; (8005540 <_dtoa_r+0x8d8>)
 8005378:	f7fb f8ae 	bl	80004d8 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	f7fb fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800538c:	2800      	cmp	r0, #0
 800538e:	d098      	beq.n	80052c2 <_dtoa_r+0x65a>
 8005390:	e7cb      	b.n	800532a <_dtoa_r+0x6c2>
 8005392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005394:	2a00      	cmp	r2, #0
 8005396:	f000 80cd 	beq.w	8005534 <_dtoa_r+0x8cc>
 800539a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800539c:	2a01      	cmp	r2, #1
 800539e:	f300 80af 	bgt.w	8005500 <_dtoa_r+0x898>
 80053a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	f000 80a7 	beq.w	80054f8 <_dtoa_r+0x890>
 80053aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053b0:	9f06      	ldr	r7, [sp, #24]
 80053b2:	9a06      	ldr	r2, [sp, #24]
 80053b4:	2101      	movs	r1, #1
 80053b6:	441a      	add	r2, r3
 80053b8:	9206      	str	r2, [sp, #24]
 80053ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053bc:	4628      	mov	r0, r5
 80053be:	441a      	add	r2, r3
 80053c0:	9209      	str	r2, [sp, #36]	; 0x24
 80053c2:	f000 fd81 	bl	8005ec8 <__i2b>
 80053c6:	4606      	mov	r6, r0
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	dd0c      	ble.n	80053e6 <_dtoa_r+0x77e>
 80053cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd09      	ble.n	80053e6 <_dtoa_r+0x77e>
 80053d2:	42bb      	cmp	r3, r7
 80053d4:	bfa8      	it	ge
 80053d6:	463b      	movge	r3, r7
 80053d8:	9a06      	ldr	r2, [sp, #24]
 80053da:	1aff      	subs	r7, r7, r3
 80053dc:	1ad2      	subs	r2, r2, r3
 80053de:	9206      	str	r2, [sp, #24]
 80053e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	9309      	str	r3, [sp, #36]	; 0x24
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	b1f3      	cbz	r3, 8005428 <_dtoa_r+0x7c0>
 80053ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a9 	beq.w	8005544 <_dtoa_r+0x8dc>
 80053f2:	2c00      	cmp	r4, #0
 80053f4:	dd10      	ble.n	8005418 <_dtoa_r+0x7b0>
 80053f6:	4631      	mov	r1, r6
 80053f8:	4622      	mov	r2, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fe1e 	bl	800603c <__pow5mult>
 8005400:	4652      	mov	r2, sl
 8005402:	4601      	mov	r1, r0
 8005404:	4606      	mov	r6, r0
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fd74 	bl	8005ef4 <__multiply>
 800540c:	4680      	mov	r8, r0
 800540e:	4651      	mov	r1, sl
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fc9f 	bl	8005d54 <_Bfree>
 8005416:	46c2      	mov	sl, r8
 8005418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541a:	1b1a      	subs	r2, r3, r4
 800541c:	d004      	beq.n	8005428 <_dtoa_r+0x7c0>
 800541e:	4651      	mov	r1, sl
 8005420:	4628      	mov	r0, r5
 8005422:	f000 fe0b 	bl	800603c <__pow5mult>
 8005426:	4682      	mov	sl, r0
 8005428:	2101      	movs	r1, #1
 800542a:	4628      	mov	r0, r5
 800542c:	f000 fd4c 	bl	8005ec8 <__i2b>
 8005430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005432:	4604      	mov	r4, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	f340 8087 	ble.w	8005548 <_dtoa_r+0x8e0>
 800543a:	461a      	mov	r2, r3
 800543c:	4601      	mov	r1, r0
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fdfc 	bl	800603c <__pow5mult>
 8005444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005446:	4604      	mov	r4, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	f340 8080 	ble.w	800554e <_dtoa_r+0x8e6>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005458:	6918      	ldr	r0, [r3, #16]
 800545a:	f000 fce7 	bl	8005e2c <__hi0bits>
 800545e:	f1c0 0020 	rsb	r0, r0, #32
 8005462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005464:	4418      	add	r0, r3
 8005466:	f010 001f 	ands.w	r0, r0, #31
 800546a:	f000 8092 	beq.w	8005592 <_dtoa_r+0x92a>
 800546e:	f1c0 0320 	rsb	r3, r0, #32
 8005472:	2b04      	cmp	r3, #4
 8005474:	f340 808a 	ble.w	800558c <_dtoa_r+0x924>
 8005478:	f1c0 001c 	rsb	r0, r0, #28
 800547c:	9b06      	ldr	r3, [sp, #24]
 800547e:	4407      	add	r7, r0
 8005480:	4403      	add	r3, r0
 8005482:	9306      	str	r3, [sp, #24]
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	4403      	add	r3, r0
 8005488:	9309      	str	r3, [sp, #36]	; 0x24
 800548a:	9b06      	ldr	r3, [sp, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	dd05      	ble.n	800549c <_dtoa_r+0x834>
 8005490:	4651      	mov	r1, sl
 8005492:	461a      	mov	r2, r3
 8005494:	4628      	mov	r0, r5
 8005496:	f000 fe2b 	bl	80060f0 <__lshift>
 800549a:	4682      	mov	sl, r0
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dd05      	ble.n	80054ae <_dtoa_r+0x846>
 80054a2:	4621      	mov	r1, r4
 80054a4:	461a      	mov	r2, r3
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fe22 	bl	80060f0 <__lshift>
 80054ac:	4604      	mov	r4, r0
 80054ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d070      	beq.n	8005596 <_dtoa_r+0x92e>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4650      	mov	r0, sl
 80054b8:	f000 fe86 	bl	80061c8 <__mcmp>
 80054bc:	2800      	cmp	r0, #0
 80054be:	da6a      	bge.n	8005596 <_dtoa_r+0x92e>
 80054c0:	2300      	movs	r3, #0
 80054c2:	4651      	mov	r1, sl
 80054c4:	220a      	movs	r2, #10
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fc66 	bl	8005d98 <__multadd>
 80054cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ce:	4682      	mov	sl, r0
 80054d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8193 	beq.w	8005800 <_dtoa_r+0xb98>
 80054da:	4631      	mov	r1, r6
 80054dc:	2300      	movs	r3, #0
 80054de:	220a      	movs	r2, #10
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fc59 	bl	8005d98 <__multadd>
 80054e6:	f1bb 0f00 	cmp.w	fp, #0
 80054ea:	4606      	mov	r6, r0
 80054ec:	f300 8093 	bgt.w	8005616 <_dtoa_r+0x9ae>
 80054f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	dc57      	bgt.n	80055a6 <_dtoa_r+0x93e>
 80054f6:	e08e      	b.n	8005616 <_dtoa_r+0x9ae>
 80054f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054fe:	e756      	b.n	80053ae <_dtoa_r+0x746>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	1e5c      	subs	r4, r3, #1
 8005504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005506:	42a3      	cmp	r3, r4
 8005508:	bfb7      	itett	lt
 800550a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800550c:	1b1c      	subge	r4, r3, r4
 800550e:	1ae2      	sublt	r2, r4, r3
 8005510:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005512:	bfbe      	ittt	lt
 8005514:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005516:	189b      	addlt	r3, r3, r2
 8005518:	930e      	strlt	r3, [sp, #56]	; 0x38
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	bfb8      	it	lt
 800551e:	2400      	movlt	r4, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfbb      	ittet	lt
 8005524:	9b06      	ldrlt	r3, [sp, #24]
 8005526:	9a02      	ldrlt	r2, [sp, #8]
 8005528:	9f06      	ldrge	r7, [sp, #24]
 800552a:	1a9f      	sublt	r7, r3, r2
 800552c:	bfac      	ite	ge
 800552e:	9b02      	ldrge	r3, [sp, #8]
 8005530:	2300      	movlt	r3, #0
 8005532:	e73e      	b.n	80053b2 <_dtoa_r+0x74a>
 8005534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005536:	9f06      	ldr	r7, [sp, #24]
 8005538:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800553a:	e745      	b.n	80053c8 <_dtoa_r+0x760>
 800553c:	3fe00000 	.word	0x3fe00000
 8005540:	40240000 	.word	0x40240000
 8005544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005546:	e76a      	b.n	800541e <_dtoa_r+0x7b6>
 8005548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800554a:	2b01      	cmp	r3, #1
 800554c:	dc19      	bgt.n	8005582 <_dtoa_r+0x91a>
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	b9bb      	cbnz	r3, 8005582 <_dtoa_r+0x91a>
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	b99b      	cbnz	r3, 8005582 <_dtoa_r+0x91a>
 800555a:	9b05      	ldr	r3, [sp, #20]
 800555c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005560:	0d1b      	lsrs	r3, r3, #20
 8005562:	051b      	lsls	r3, r3, #20
 8005564:	b183      	cbz	r3, 8005588 <_dtoa_r+0x920>
 8005566:	f04f 0801 	mov.w	r8, #1
 800556a:	9b06      	ldr	r3, [sp, #24]
 800556c:	3301      	adds	r3, #1
 800556e:	9306      	str	r3, [sp, #24]
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	3301      	adds	r3, #1
 8005574:	9309      	str	r3, [sp, #36]	; 0x24
 8005576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	f47f af6a 	bne.w	8005452 <_dtoa_r+0x7ea>
 800557e:	2001      	movs	r0, #1
 8005580:	e76f      	b.n	8005462 <_dtoa_r+0x7fa>
 8005582:	f04f 0800 	mov.w	r8, #0
 8005586:	e7f6      	b.n	8005576 <_dtoa_r+0x90e>
 8005588:	4698      	mov	r8, r3
 800558a:	e7f4      	b.n	8005576 <_dtoa_r+0x90e>
 800558c:	f43f af7d 	beq.w	800548a <_dtoa_r+0x822>
 8005590:	4618      	mov	r0, r3
 8005592:	301c      	adds	r0, #28
 8005594:	e772      	b.n	800547c <_dtoa_r+0x814>
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	dc36      	bgt.n	800560a <_dtoa_r+0x9a2>
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	2b02      	cmp	r3, #2
 80055a0:	dd33      	ble.n	800560a <_dtoa_r+0x9a2>
 80055a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80055a6:	f1bb 0f00 	cmp.w	fp, #0
 80055aa:	d10d      	bne.n	80055c8 <_dtoa_r+0x960>
 80055ac:	4621      	mov	r1, r4
 80055ae:	465b      	mov	r3, fp
 80055b0:	2205      	movs	r2, #5
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 fbf0 	bl	8005d98 <__multadd>
 80055b8:	4601      	mov	r1, r0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4650      	mov	r0, sl
 80055be:	f000 fe03 	bl	80061c8 <__mcmp>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	f73f adb6 	bgt.w	8005134 <_dtoa_r+0x4cc>
 80055c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ca:	9f08      	ldr	r7, [sp, #32]
 80055cc:	ea6f 0903 	mvn.w	r9, r3
 80055d0:	f04f 0800 	mov.w	r8, #0
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fbbc 	bl	8005d54 <_Bfree>
 80055dc:	2e00      	cmp	r6, #0
 80055de:	f43f aea4 	beq.w	800532a <_dtoa_r+0x6c2>
 80055e2:	f1b8 0f00 	cmp.w	r8, #0
 80055e6:	d005      	beq.n	80055f4 <_dtoa_r+0x98c>
 80055e8:	45b0      	cmp	r8, r6
 80055ea:	d003      	beq.n	80055f4 <_dtoa_r+0x98c>
 80055ec:	4641      	mov	r1, r8
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 fbb0 	bl	8005d54 <_Bfree>
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fbac 	bl	8005d54 <_Bfree>
 80055fc:	e695      	b.n	800532a <_dtoa_r+0x6c2>
 80055fe:	2400      	movs	r4, #0
 8005600:	4626      	mov	r6, r4
 8005602:	e7e1      	b.n	80055c8 <_dtoa_r+0x960>
 8005604:	46c1      	mov	r9, r8
 8005606:	4626      	mov	r6, r4
 8005608:	e594      	b.n	8005134 <_dtoa_r+0x4cc>
 800560a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80fc 	beq.w	800580e <_dtoa_r+0xba6>
 8005616:	2f00      	cmp	r7, #0
 8005618:	dd05      	ble.n	8005626 <_dtoa_r+0x9be>
 800561a:	4631      	mov	r1, r6
 800561c:	463a      	mov	r2, r7
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fd66 	bl	80060f0 <__lshift>
 8005624:	4606      	mov	r6, r0
 8005626:	f1b8 0f00 	cmp.w	r8, #0
 800562a:	d05c      	beq.n	80056e6 <_dtoa_r+0xa7e>
 800562c:	4628      	mov	r0, r5
 800562e:	6871      	ldr	r1, [r6, #4]
 8005630:	f000 fb50 	bl	8005cd4 <_Balloc>
 8005634:	4607      	mov	r7, r0
 8005636:	b928      	cbnz	r0, 8005644 <_dtoa_r+0x9dc>
 8005638:	4602      	mov	r2, r0
 800563a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800563e:	4b7e      	ldr	r3, [pc, #504]	; (8005838 <_dtoa_r+0xbd0>)
 8005640:	f7ff bb26 	b.w	8004c90 <_dtoa_r+0x28>
 8005644:	6932      	ldr	r2, [r6, #16]
 8005646:	f106 010c 	add.w	r1, r6, #12
 800564a:	3202      	adds	r2, #2
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	300c      	adds	r0, #12
 8005650:	f000 fb32 	bl	8005cb8 <memcpy>
 8005654:	2201      	movs	r2, #1
 8005656:	4639      	mov	r1, r7
 8005658:	4628      	mov	r0, r5
 800565a:	f000 fd49 	bl	80060f0 <__lshift>
 800565e:	46b0      	mov	r8, r6
 8005660:	4606      	mov	r6, r0
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	3301      	adds	r3, #1
 8005666:	9302      	str	r3, [sp, #8]
 8005668:	9b08      	ldr	r3, [sp, #32]
 800566a:	445b      	add	r3, fp
 800566c:	930a      	str	r3, [sp, #40]	; 0x28
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	9309      	str	r3, [sp, #36]	; 0x24
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	4621      	mov	r1, r4
 800567a:	4650      	mov	r0, sl
 800567c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005680:	f7ff fa62 	bl	8004b48 <quorem>
 8005684:	4603      	mov	r3, r0
 8005686:	4641      	mov	r1, r8
 8005688:	3330      	adds	r3, #48	; 0x30
 800568a:	9004      	str	r0, [sp, #16]
 800568c:	4650      	mov	r0, sl
 800568e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005690:	f000 fd9a 	bl	80061c8 <__mcmp>
 8005694:	4632      	mov	r2, r6
 8005696:	9006      	str	r0, [sp, #24]
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 fdb0 	bl	8006200 <__mdiff>
 80056a0:	68c2      	ldr	r2, [r0, #12]
 80056a2:	4607      	mov	r7, r0
 80056a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a6:	bb02      	cbnz	r2, 80056ea <_dtoa_r+0xa82>
 80056a8:	4601      	mov	r1, r0
 80056aa:	4650      	mov	r0, sl
 80056ac:	f000 fd8c 	bl	80061c8 <__mcmp>
 80056b0:	4602      	mov	r2, r0
 80056b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b4:	4639      	mov	r1, r7
 80056b6:	4628      	mov	r0, r5
 80056b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056bc:	f000 fb4a 	bl	8005d54 <_Bfree>
 80056c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056c4:	9f02      	ldr	r7, [sp, #8]
 80056c6:	ea43 0102 	orr.w	r1, r3, r2
 80056ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056cc:	430b      	orrs	r3, r1
 80056ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d0:	d10d      	bne.n	80056ee <_dtoa_r+0xa86>
 80056d2:	2b39      	cmp	r3, #57	; 0x39
 80056d4:	d027      	beq.n	8005726 <_dtoa_r+0xabe>
 80056d6:	9a06      	ldr	r2, [sp, #24]
 80056d8:	2a00      	cmp	r2, #0
 80056da:	dd01      	ble.n	80056e0 <_dtoa_r+0xa78>
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	3331      	adds	r3, #49	; 0x31
 80056e0:	f88b 3000 	strb.w	r3, [fp]
 80056e4:	e776      	b.n	80055d4 <_dtoa_r+0x96c>
 80056e6:	4630      	mov	r0, r6
 80056e8:	e7b9      	b.n	800565e <_dtoa_r+0x9f6>
 80056ea:	2201      	movs	r2, #1
 80056ec:	e7e2      	b.n	80056b4 <_dtoa_r+0xa4c>
 80056ee:	9906      	ldr	r1, [sp, #24]
 80056f0:	2900      	cmp	r1, #0
 80056f2:	db04      	blt.n	80056fe <_dtoa_r+0xa96>
 80056f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80056f6:	4301      	orrs	r1, r0
 80056f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fa:	4301      	orrs	r1, r0
 80056fc:	d120      	bne.n	8005740 <_dtoa_r+0xad8>
 80056fe:	2a00      	cmp	r2, #0
 8005700:	ddee      	ble.n	80056e0 <_dtoa_r+0xa78>
 8005702:	4651      	mov	r1, sl
 8005704:	2201      	movs	r2, #1
 8005706:	4628      	mov	r0, r5
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	f000 fcf1 	bl	80060f0 <__lshift>
 800570e:	4621      	mov	r1, r4
 8005710:	4682      	mov	sl, r0
 8005712:	f000 fd59 	bl	80061c8 <__mcmp>
 8005716:	2800      	cmp	r0, #0
 8005718:	9b02      	ldr	r3, [sp, #8]
 800571a:	dc02      	bgt.n	8005722 <_dtoa_r+0xaba>
 800571c:	d1e0      	bne.n	80056e0 <_dtoa_r+0xa78>
 800571e:	07da      	lsls	r2, r3, #31
 8005720:	d5de      	bpl.n	80056e0 <_dtoa_r+0xa78>
 8005722:	2b39      	cmp	r3, #57	; 0x39
 8005724:	d1da      	bne.n	80056dc <_dtoa_r+0xa74>
 8005726:	2339      	movs	r3, #57	; 0x39
 8005728:	f88b 3000 	strb.w	r3, [fp]
 800572c:	463b      	mov	r3, r7
 800572e:	461f      	mov	r7, r3
 8005730:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005734:	3b01      	subs	r3, #1
 8005736:	2a39      	cmp	r2, #57	; 0x39
 8005738:	d050      	beq.n	80057dc <_dtoa_r+0xb74>
 800573a:	3201      	adds	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	e749      	b.n	80055d4 <_dtoa_r+0x96c>
 8005740:	2a00      	cmp	r2, #0
 8005742:	dd03      	ble.n	800574c <_dtoa_r+0xae4>
 8005744:	2b39      	cmp	r3, #57	; 0x39
 8005746:	d0ee      	beq.n	8005726 <_dtoa_r+0xabe>
 8005748:	3301      	adds	r3, #1
 800574a:	e7c9      	b.n	80056e0 <_dtoa_r+0xa78>
 800574c:	9a02      	ldr	r2, [sp, #8]
 800574e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005750:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005754:	428a      	cmp	r2, r1
 8005756:	d02a      	beq.n	80057ae <_dtoa_r+0xb46>
 8005758:	4651      	mov	r1, sl
 800575a:	2300      	movs	r3, #0
 800575c:	220a      	movs	r2, #10
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fb1a 	bl	8005d98 <__multadd>
 8005764:	45b0      	cmp	r8, r6
 8005766:	4682      	mov	sl, r0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	f04f 020a 	mov.w	r2, #10
 8005770:	4641      	mov	r1, r8
 8005772:	4628      	mov	r0, r5
 8005774:	d107      	bne.n	8005786 <_dtoa_r+0xb1e>
 8005776:	f000 fb0f 	bl	8005d98 <__multadd>
 800577a:	4680      	mov	r8, r0
 800577c:	4606      	mov	r6, r0
 800577e:	9b02      	ldr	r3, [sp, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	e777      	b.n	8005676 <_dtoa_r+0xa0e>
 8005786:	f000 fb07 	bl	8005d98 <__multadd>
 800578a:	4631      	mov	r1, r6
 800578c:	4680      	mov	r8, r0
 800578e:	2300      	movs	r3, #0
 8005790:	220a      	movs	r2, #10
 8005792:	4628      	mov	r0, r5
 8005794:	f000 fb00 	bl	8005d98 <__multadd>
 8005798:	4606      	mov	r6, r0
 800579a:	e7f0      	b.n	800577e <_dtoa_r+0xb16>
 800579c:	f1bb 0f00 	cmp.w	fp, #0
 80057a0:	bfcc      	ite	gt
 80057a2:	465f      	movgt	r7, fp
 80057a4:	2701      	movle	r7, #1
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	9a08      	ldr	r2, [sp, #32]
 80057ac:	4417      	add	r7, r2
 80057ae:	4651      	mov	r1, sl
 80057b0:	2201      	movs	r2, #1
 80057b2:	4628      	mov	r0, r5
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	f000 fc9b 	bl	80060f0 <__lshift>
 80057ba:	4621      	mov	r1, r4
 80057bc:	4682      	mov	sl, r0
 80057be:	f000 fd03 	bl	80061c8 <__mcmp>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	dcb2      	bgt.n	800572c <_dtoa_r+0xac4>
 80057c6:	d102      	bne.n	80057ce <_dtoa_r+0xb66>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	07db      	lsls	r3, r3, #31
 80057cc:	d4ae      	bmi.n	800572c <_dtoa_r+0xac4>
 80057ce:	463b      	mov	r3, r7
 80057d0:	461f      	mov	r7, r3
 80057d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057d6:	2a30      	cmp	r2, #48	; 0x30
 80057d8:	d0fa      	beq.n	80057d0 <_dtoa_r+0xb68>
 80057da:	e6fb      	b.n	80055d4 <_dtoa_r+0x96c>
 80057dc:	9a08      	ldr	r2, [sp, #32]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d1a5      	bne.n	800572e <_dtoa_r+0xac6>
 80057e2:	2331      	movs	r3, #49	; 0x31
 80057e4:	f109 0901 	add.w	r9, r9, #1
 80057e8:	7013      	strb	r3, [r2, #0]
 80057ea:	e6f3      	b.n	80055d4 <_dtoa_r+0x96c>
 80057ec:	4b13      	ldr	r3, [pc, #76]	; (800583c <_dtoa_r+0xbd4>)
 80057ee:	f7ff baa7 	b.w	8004d40 <_dtoa_r+0xd8>
 80057f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f aa80 	bne.w	8004cfa <_dtoa_r+0x92>
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <_dtoa_r+0xbd8>)
 80057fc:	f7ff baa0 	b.w	8004d40 <_dtoa_r+0xd8>
 8005800:	f1bb 0f00 	cmp.w	fp, #0
 8005804:	dc03      	bgt.n	800580e <_dtoa_r+0xba6>
 8005806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005808:	2b02      	cmp	r3, #2
 800580a:	f73f aecc 	bgt.w	80055a6 <_dtoa_r+0x93e>
 800580e:	9f08      	ldr	r7, [sp, #32]
 8005810:	4621      	mov	r1, r4
 8005812:	4650      	mov	r0, sl
 8005814:	f7ff f998 	bl	8004b48 <quorem>
 8005818:	9a08      	ldr	r2, [sp, #32]
 800581a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800581e:	f807 3b01 	strb.w	r3, [r7], #1
 8005822:	1aba      	subs	r2, r7, r2
 8005824:	4593      	cmp	fp, r2
 8005826:	ddb9      	ble.n	800579c <_dtoa_r+0xb34>
 8005828:	4651      	mov	r1, sl
 800582a:	2300      	movs	r3, #0
 800582c:	220a      	movs	r2, #10
 800582e:	4628      	mov	r0, r5
 8005830:	f000 fab2 	bl	8005d98 <__multadd>
 8005834:	4682      	mov	sl, r0
 8005836:	e7eb      	b.n	8005810 <_dtoa_r+0xba8>
 8005838:	08006dbb 	.word	0x08006dbb
 800583c:	08006d14 	.word	0x08006d14
 8005840:	08006d38 	.word	0x08006d38

08005844 <__sflush_r>:
 8005844:	898a      	ldrh	r2, [r1, #12]
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	0710      	lsls	r0, r2, #28
 800584e:	460c      	mov	r4, r1
 8005850:	d458      	bmi.n	8005904 <__sflush_r+0xc0>
 8005852:	684b      	ldr	r3, [r1, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc05      	bgt.n	8005864 <__sflush_r+0x20>
 8005858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	dc02      	bgt.n	8005864 <__sflush_r+0x20>
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005866:	2e00      	cmp	r6, #0
 8005868:	d0f9      	beq.n	800585e <__sflush_r+0x1a>
 800586a:	2300      	movs	r3, #0
 800586c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005870:	682f      	ldr	r7, [r5, #0]
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	d032      	beq.n	80058dc <__sflush_r+0x98>
 8005876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	075a      	lsls	r2, r3, #29
 800587c:	d505      	bpl.n	800588a <__sflush_r+0x46>
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005884:	b10b      	cbz	r3, 800588a <__sflush_r+0x46>
 8005886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005888:	1ac0      	subs	r0, r0, r3
 800588a:	2300      	movs	r3, #0
 800588c:	4602      	mov	r2, r0
 800588e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005890:	4628      	mov	r0, r5
 8005892:	6a21      	ldr	r1, [r4, #32]
 8005894:	47b0      	blx	r6
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	d106      	bne.n	80058aa <__sflush_r+0x66>
 800589c:	6829      	ldr	r1, [r5, #0]
 800589e:	291d      	cmp	r1, #29
 80058a0:	d82c      	bhi.n	80058fc <__sflush_r+0xb8>
 80058a2:	4a2a      	ldr	r2, [pc, #168]	; (800594c <__sflush_r+0x108>)
 80058a4:	40ca      	lsrs	r2, r1
 80058a6:	07d6      	lsls	r6, r2, #31
 80058a8:	d528      	bpl.n	80058fc <__sflush_r+0xb8>
 80058aa:	2200      	movs	r2, #0
 80058ac:	6062      	str	r2, [r4, #4]
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	04d9      	lsls	r1, r3, #19
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	d504      	bpl.n	80058c0 <__sflush_r+0x7c>
 80058b6:	1c42      	adds	r2, r0, #1
 80058b8:	d101      	bne.n	80058be <__sflush_r+0x7a>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b903      	cbnz	r3, 80058c0 <__sflush_r+0x7c>
 80058be:	6560      	str	r0, [r4, #84]	; 0x54
 80058c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c2:	602f      	str	r7, [r5, #0]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d0ca      	beq.n	800585e <__sflush_r+0x1a>
 80058c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <__sflush_r+0x92>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 fd8f 	bl	80063f4 <_free_r>
 80058d6:	2000      	movs	r0, #0
 80058d8:	6360      	str	r0, [r4, #52]	; 0x34
 80058da:	e7c1      	b.n	8005860 <__sflush_r+0x1c>
 80058dc:	6a21      	ldr	r1, [r4, #32]
 80058de:	2301      	movs	r3, #1
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	1c41      	adds	r1, r0, #1
 80058e6:	d1c7      	bne.n	8005878 <__sflush_r+0x34>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c4      	beq.n	8005878 <__sflush_r+0x34>
 80058ee:	2b1d      	cmp	r3, #29
 80058f0:	d001      	beq.n	80058f6 <__sflush_r+0xb2>
 80058f2:	2b16      	cmp	r3, #22
 80058f4:	d101      	bne.n	80058fa <__sflush_r+0xb6>
 80058f6:	602f      	str	r7, [r5, #0]
 80058f8:	e7b1      	b.n	800585e <__sflush_r+0x1a>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	e7ad      	b.n	8005860 <__sflush_r+0x1c>
 8005904:	690f      	ldr	r7, [r1, #16]
 8005906:	2f00      	cmp	r7, #0
 8005908:	d0a9      	beq.n	800585e <__sflush_r+0x1a>
 800590a:	0793      	lsls	r3, r2, #30
 800590c:	bf18      	it	ne
 800590e:	2300      	movne	r3, #0
 8005910:	680e      	ldr	r6, [r1, #0]
 8005912:	bf08      	it	eq
 8005914:	694b      	ldreq	r3, [r1, #20]
 8005916:	eba6 0807 	sub.w	r8, r6, r7
 800591a:	600f      	str	r7, [r1, #0]
 800591c:	608b      	str	r3, [r1, #8]
 800591e:	f1b8 0f00 	cmp.w	r8, #0
 8005922:	dd9c      	ble.n	800585e <__sflush_r+0x1a>
 8005924:	4643      	mov	r3, r8
 8005926:	463a      	mov	r2, r7
 8005928:	4628      	mov	r0, r5
 800592a:	6a21      	ldr	r1, [r4, #32]
 800592c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800592e:	47b0      	blx	r6
 8005930:	2800      	cmp	r0, #0
 8005932:	dc06      	bgt.n	8005942 <__sflush_r+0xfe>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	e78e      	b.n	8005860 <__sflush_r+0x1c>
 8005942:	4407      	add	r7, r0
 8005944:	eba8 0800 	sub.w	r8, r8, r0
 8005948:	e7e9      	b.n	800591e <__sflush_r+0xda>
 800594a:	bf00      	nop
 800594c:	20400001 	.word	0x20400001

08005950 <_fflush_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b913      	cbnz	r3, 8005960 <_fflush_r+0x10>
 800595a:	2500      	movs	r5, #0
 800595c:	4628      	mov	r0, r5
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	b118      	cbz	r0, 800596a <_fflush_r+0x1a>
 8005962:	6983      	ldr	r3, [r0, #24]
 8005964:	b90b      	cbnz	r3, 800596a <_fflush_r+0x1a>
 8005966:	f000 f887 	bl	8005a78 <__sinit>
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <_fflush_r+0x6c>)
 800596c:	429c      	cmp	r4, r3
 800596e:	d11b      	bne.n	80059a8 <_fflush_r+0x58>
 8005970:	686c      	ldr	r4, [r5, #4]
 8005972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ef      	beq.n	800595a <_fflush_r+0xa>
 800597a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800597c:	07d0      	lsls	r0, r2, #31
 800597e:	d404      	bmi.n	800598a <_fflush_r+0x3a>
 8005980:	0599      	lsls	r1, r3, #22
 8005982:	d402      	bmi.n	800598a <_fflush_r+0x3a>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f000 f91a 	bl	8005bbe <__retarget_lock_acquire_recursive>
 800598a:	4628      	mov	r0, r5
 800598c:	4621      	mov	r1, r4
 800598e:	f7ff ff59 	bl	8005844 <__sflush_r>
 8005992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005994:	4605      	mov	r5, r0
 8005996:	07da      	lsls	r2, r3, #31
 8005998:	d4e0      	bmi.n	800595c <_fflush_r+0xc>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	059b      	lsls	r3, r3, #22
 800599e:	d4dd      	bmi.n	800595c <_fflush_r+0xc>
 80059a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a2:	f000 f90d 	bl	8005bc0 <__retarget_lock_release_recursive>
 80059a6:	e7d9      	b.n	800595c <_fflush_r+0xc>
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <_fflush_r+0x70>)
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d101      	bne.n	80059b2 <_fflush_r+0x62>
 80059ae:	68ac      	ldr	r4, [r5, #8]
 80059b0:	e7df      	b.n	8005972 <_fflush_r+0x22>
 80059b2:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <_fflush_r+0x74>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	bf08      	it	eq
 80059b8:	68ec      	ldreq	r4, [r5, #12]
 80059ba:	e7da      	b.n	8005972 <_fflush_r+0x22>
 80059bc:	08006dec 	.word	0x08006dec
 80059c0:	08006e0c 	.word	0x08006e0c
 80059c4:	08006dcc 	.word	0x08006dcc

080059c8 <std>:
 80059c8:	2300      	movs	r3, #0
 80059ca:	b510      	push	{r4, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	e9c0 3300 	strd	r3, r3, [r0]
 80059d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059d6:	6083      	str	r3, [r0, #8]
 80059d8:	8181      	strh	r1, [r0, #12]
 80059da:	6643      	str	r3, [r0, #100]	; 0x64
 80059dc:	81c2      	strh	r2, [r0, #14]
 80059de:	6183      	str	r3, [r0, #24]
 80059e0:	4619      	mov	r1, r3
 80059e2:	2208      	movs	r2, #8
 80059e4:	305c      	adds	r0, #92	; 0x5c
 80059e6:	f7fe faf9 	bl	8003fdc <memset>
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x38>)
 80059ec:	6224      	str	r4, [r4, #32]
 80059ee:	6263      	str	r3, [r4, #36]	; 0x24
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <std+0x3c>)
 80059f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <std+0x40>)
 80059f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <std+0x44>)
 80059fa:	6323      	str	r3, [r4, #48]	; 0x30
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	08006811 	.word	0x08006811
 8005a04:	08006833 	.word	0x08006833
 8005a08:	0800686b 	.word	0x0800686b
 8005a0c:	0800688f 	.word	0x0800688f

08005a10 <_cleanup_r>:
 8005a10:	4901      	ldr	r1, [pc, #4]	; (8005a18 <_cleanup_r+0x8>)
 8005a12:	f000 b8af 	b.w	8005b74 <_fwalk_reent>
 8005a16:	bf00      	nop
 8005a18:	08005951 	.word	0x08005951

08005a1c <__sfmoreglue>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	2568      	movs	r5, #104	; 0x68
 8005a20:	1e4a      	subs	r2, r1, #1
 8005a22:	4355      	muls	r5, r2
 8005a24:	460e      	mov	r6, r1
 8005a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a2a:	f000 fd2f 	bl	800648c <_malloc_r>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	b140      	cbz	r0, 8005a44 <__sfmoreglue+0x28>
 8005a32:	2100      	movs	r1, #0
 8005a34:	e9c0 1600 	strd	r1, r6, [r0]
 8005a38:	300c      	adds	r0, #12
 8005a3a:	60a0      	str	r0, [r4, #8]
 8005a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a40:	f7fe facc 	bl	8003fdc <memset>
 8005a44:	4620      	mov	r0, r4
 8005a46:	bd70      	pop	{r4, r5, r6, pc}

08005a48 <__sfp_lock_acquire>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__sfp_lock_acquire+0x8>)
 8005a4a:	f000 b8b8 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8005a4e:	bf00      	nop
 8005a50:	200002e4 	.word	0x200002e4

08005a54 <__sfp_lock_release>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__sfp_lock_release+0x8>)
 8005a56:	f000 b8b3 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	200002e4 	.word	0x200002e4

08005a60 <__sinit_lock_acquire>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__sinit_lock_acquire+0x8>)
 8005a62:	f000 b8ac 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	200002df 	.word	0x200002df

08005a6c <__sinit_lock_release>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sinit_lock_release+0x8>)
 8005a6e:	f000 b8a7 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	200002df 	.word	0x200002df

08005a78 <__sinit>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	f7ff fff0 	bl	8005a60 <__sinit_lock_acquire>
 8005a80:	69a3      	ldr	r3, [r4, #24]
 8005a82:	b11b      	cbz	r3, 8005a8c <__sinit+0x14>
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a88:	f7ff bff0 	b.w	8005a6c <__sinit_lock_release>
 8005a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a90:	6523      	str	r3, [r4, #80]	; 0x50
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <__sinit+0x68>)
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <__sinit+0x6c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	bf08      	it	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	bf08      	it	eq
 8005aa4:	61a3      	streq	r3, [r4, #24]
 8005aa6:	f000 f81f 	bl	8005ae8 <__sfp>
 8005aaa:	6060      	str	r0, [r4, #4]
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 f81b 	bl	8005ae8 <__sfp>
 8005ab2:	60a0      	str	r0, [r4, #8]
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 f817 	bl	8005ae8 <__sfp>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2104      	movs	r1, #4
 8005abe:	60e0      	str	r0, [r4, #12]
 8005ac0:	6860      	ldr	r0, [r4, #4]
 8005ac2:	f7ff ff81 	bl	80059c8 <std>
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2109      	movs	r1, #9
 8005aca:	68a0      	ldr	r0, [r4, #8]
 8005acc:	f7ff ff7c 	bl	80059c8 <std>
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	2112      	movs	r1, #18
 8005ad4:	68e0      	ldr	r0, [r4, #12]
 8005ad6:	f7ff ff77 	bl	80059c8 <std>
 8005ada:	2301      	movs	r3, #1
 8005adc:	61a3      	str	r3, [r4, #24]
 8005ade:	e7d1      	b.n	8005a84 <__sinit+0xc>
 8005ae0:	08006d00 	.word	0x08006d00
 8005ae4:	08005a11 	.word	0x08005a11

08005ae8 <__sfp>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	4607      	mov	r7, r0
 8005aec:	f7ff ffac 	bl	8005a48 <__sfp_lock_acquire>
 8005af0:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <__sfp+0x84>)
 8005af2:	681e      	ldr	r6, [r3, #0]
 8005af4:	69b3      	ldr	r3, [r6, #24]
 8005af6:	b913      	cbnz	r3, 8005afe <__sfp+0x16>
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff ffbd 	bl	8005a78 <__sinit>
 8005afe:	3648      	adds	r6, #72	; 0x48
 8005b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	d503      	bpl.n	8005b10 <__sfp+0x28>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	b30b      	cbz	r3, 8005b50 <__sfp+0x68>
 8005b0c:	6836      	ldr	r6, [r6, #0]
 8005b0e:	e7f7      	b.n	8005b00 <__sfp+0x18>
 8005b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b14:	b9d5      	cbnz	r5, 8005b4c <__sfp+0x64>
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <__sfp+0x88>)
 8005b18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b1c:	60e3      	str	r3, [r4, #12]
 8005b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b20:	f000 f84c 	bl	8005bbc <__retarget_lock_init_recursive>
 8005b24:	f7ff ff96 	bl	8005a54 <__sfp_lock_release>
 8005b28:	2208      	movs	r2, #8
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b34:	6025      	str	r5, [r4, #0]
 8005b36:	61a5      	str	r5, [r4, #24]
 8005b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b3c:	f7fe fa4e 	bl	8003fdc <memset>
 8005b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b48:	4620      	mov	r0, r4
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	3468      	adds	r4, #104	; 0x68
 8005b4e:	e7d9      	b.n	8005b04 <__sfp+0x1c>
 8005b50:	2104      	movs	r1, #4
 8005b52:	4638      	mov	r0, r7
 8005b54:	f7ff ff62 	bl	8005a1c <__sfmoreglue>
 8005b58:	4604      	mov	r4, r0
 8005b5a:	6030      	str	r0, [r6, #0]
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d1d5      	bne.n	8005b0c <__sfp+0x24>
 8005b60:	f7ff ff78 	bl	8005a54 <__sfp_lock_release>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	e7ee      	b.n	8005b48 <__sfp+0x60>
 8005b6a:	bf00      	nop
 8005b6c:	08006d00 	.word	0x08006d00
 8005b70:	ffff0001 	.word	0xffff0001

08005b74 <_fwalk_reent>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4606      	mov	r6, r0
 8005b7a:	4688      	mov	r8, r1
 8005b7c:	2700      	movs	r7, #0
 8005b7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b86:	f1b9 0901 	subs.w	r9, r9, #1
 8005b8a:	d505      	bpl.n	8005b98 <_fwalk_reent+0x24>
 8005b8c:	6824      	ldr	r4, [r4, #0]
 8005b8e:	2c00      	cmp	r4, #0
 8005b90:	d1f7      	bne.n	8005b82 <_fwalk_reent+0xe>
 8005b92:	4638      	mov	r0, r7
 8005b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b98:	89ab      	ldrh	r3, [r5, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d907      	bls.n	8005bae <_fwalk_reent+0x3a>
 8005b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	d003      	beq.n	8005bae <_fwalk_reent+0x3a>
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4630      	mov	r0, r6
 8005baa:	47c0      	blx	r8
 8005bac:	4307      	orrs	r7, r0
 8005bae:	3568      	adds	r5, #104	; 0x68
 8005bb0:	e7e9      	b.n	8005b86 <_fwalk_reent+0x12>
	...

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000160 	.word	0x20000160

08005bbc <__retarget_lock_init_recursive>:
 8005bbc:	4770      	bx	lr

08005bbe <__retarget_lock_acquire_recursive>:
 8005bbe:	4770      	bx	lr

08005bc0 <__retarget_lock_release_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__swhatbuf_r>:
 8005bc2:	b570      	push	{r4, r5, r6, lr}
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	4614      	mov	r4, r2
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	461d      	mov	r5, r3
 8005bd0:	b096      	sub	sp, #88	; 0x58
 8005bd2:	da07      	bge.n	8005be4 <__swhatbuf_r+0x22>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	89b3      	ldrh	r3, [r6, #12]
 8005bda:	061a      	lsls	r2, r3, #24
 8005bdc:	d410      	bmi.n	8005c00 <__swhatbuf_r+0x3e>
 8005bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be2:	e00e      	b.n	8005c02 <__swhatbuf_r+0x40>
 8005be4:	466a      	mov	r2, sp
 8005be6:	f000 fea9 	bl	800693c <_fstat_r>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	dbf2      	blt.n	8005bd4 <__swhatbuf_r+0x12>
 8005bee:	9a01      	ldr	r2, [sp, #4]
 8005bf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bf8:	425a      	negs	r2, r3
 8005bfa:	415a      	adcs	r2, r3
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	e7ee      	b.n	8005bde <__swhatbuf_r+0x1c>
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	2000      	movs	r0, #0
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	b016      	add	sp, #88	; 0x58
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c0c <__smakebuf_r>:
 8005c0c:	898b      	ldrh	r3, [r1, #12]
 8005c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c10:	079d      	lsls	r5, r3, #30
 8005c12:	4606      	mov	r6, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	d507      	bpl.n	8005c28 <__smakebuf_r+0x1c>
 8005c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2301      	movs	r3, #1
 8005c22:	6163      	str	r3, [r4, #20]
 8005c24:	b002      	add	sp, #8
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	466a      	mov	r2, sp
 8005c2a:	ab01      	add	r3, sp, #4
 8005c2c:	f7ff ffc9 	bl	8005bc2 <__swhatbuf_r>
 8005c30:	9900      	ldr	r1, [sp, #0]
 8005c32:	4605      	mov	r5, r0
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 fc29 	bl	800648c <_malloc_r>
 8005c3a:	b948      	cbnz	r0, 8005c50 <__smakebuf_r+0x44>
 8005c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d4ef      	bmi.n	8005c24 <__smakebuf_r+0x18>
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e7e3      	b.n	8005c18 <__smakebuf_r+0xc>
 8005c50:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <__smakebuf_r+0x7c>)
 8005c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	9b00      	ldr	r3, [sp, #0]
 8005c60:	6120      	str	r0, [r4, #16]
 8005c62:	6163      	str	r3, [r4, #20]
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	b15b      	cbz	r3, 8005c80 <__smakebuf_r+0x74>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c6e:	f000 fe77 	bl	8006960 <_isatty_r>
 8005c72:	b128      	cbz	r0, 8005c80 <__smakebuf_r+0x74>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	89a0      	ldrh	r0, [r4, #12]
 8005c82:	4305      	orrs	r5, r0
 8005c84:	81a5      	strh	r5, [r4, #12]
 8005c86:	e7cd      	b.n	8005c24 <__smakebuf_r+0x18>
 8005c88:	08005a11 	.word	0x08005a11

08005c8c <malloc>:
 8005c8c:	4b02      	ldr	r3, [pc, #8]	; (8005c98 <malloc+0xc>)
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f000 bbfb 	b.w	800648c <_malloc_r>
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c

08005c9c <memchr>:
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	b2c9      	uxtb	r1, r1
 8005ca2:	4402      	add	r2, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	d101      	bne.n	8005cae <memchr+0x12>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e003      	b.n	8005cb6 <memchr+0x1a>
 8005cae:	7804      	ldrb	r4, [r0, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	428c      	cmp	r4, r1
 8005cb4:	d1f6      	bne.n	8005ca4 <memchr+0x8>
 8005cb6:	bd10      	pop	{r4, pc}

08005cb8 <memcpy>:
 8005cb8:	440a      	add	r2, r1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc0:	d100      	bne.n	8005cc4 <memcpy+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd0:	d1f9      	bne.n	8005cc6 <memcpy+0xe>
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <_Balloc>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	b976      	cbnz	r6, 8005cfc <_Balloc+0x28>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f7ff ffd4 	bl	8005c8c <malloc>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ce8:	b920      	cbnz	r0, 8005cf4 <_Balloc+0x20>
 8005cea:	2166      	movs	r1, #102	; 0x66
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <_Balloc+0x78>)
 8005cee:	4818      	ldr	r0, [pc, #96]	; (8005d50 <_Balloc+0x7c>)
 8005cf0:	f000 fde4 	bl	80068bc <__assert_func>
 8005cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf8:	6006      	str	r6, [r0, #0]
 8005cfa:	60c6      	str	r6, [r0, #12]
 8005cfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cfe:	68f3      	ldr	r3, [r6, #12]
 8005d00:	b183      	cbz	r3, 8005d24 <_Balloc+0x50>
 8005d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d0a:	b9b8      	cbnz	r0, 8005d3c <_Balloc+0x68>
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d12:	1d72      	adds	r2, r6, #5
 8005d14:	4620      	mov	r0, r4
 8005d16:	0092      	lsls	r2, r2, #2
 8005d18:	f000 fb5e 	bl	80063d8 <_calloc_r>
 8005d1c:	b160      	cbz	r0, 8005d38 <_Balloc+0x64>
 8005d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d22:	e00e      	b.n	8005d42 <_Balloc+0x6e>
 8005d24:	2221      	movs	r2, #33	; 0x21
 8005d26:	2104      	movs	r1, #4
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fb55 	bl	80063d8 <_calloc_r>
 8005d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d30:	60f0      	str	r0, [r6, #12]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e4      	bne.n	8005d02 <_Balloc+0x2e>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	6802      	ldr	r2, [r0, #0]
 8005d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d42:	2300      	movs	r3, #0
 8005d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d48:	e7f7      	b.n	8005d3a <_Balloc+0x66>
 8005d4a:	bf00      	nop
 8005d4c:	08006d45 	.word	0x08006d45
 8005d50:	08006e2c 	.word	0x08006e2c

08005d54 <_Bfree>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	b976      	cbnz	r6, 8005d7c <_Bfree+0x28>
 8005d5e:	2010      	movs	r0, #16
 8005d60:	f7ff ff94 	bl	8005c8c <malloc>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6268      	str	r0, [r5, #36]	; 0x24
 8005d68:	b920      	cbnz	r0, 8005d74 <_Bfree+0x20>
 8005d6a:	218a      	movs	r1, #138	; 0x8a
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <_Bfree+0x3c>)
 8005d6e:	4809      	ldr	r0, [pc, #36]	; (8005d94 <_Bfree+0x40>)
 8005d70:	f000 fda4 	bl	80068bc <__assert_func>
 8005d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d78:	6006      	str	r6, [r0, #0]
 8005d7a:	60c6      	str	r6, [r0, #12]
 8005d7c:	b13c      	cbz	r4, 8005d8e <_Bfree+0x3a>
 8005d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d80:	6862      	ldr	r2, [r4, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d88:	6021      	str	r1, [r4, #0]
 8005d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	08006d45 	.word	0x08006d45
 8005d94:	08006e2c 	.word	0x08006e2c

08005d98 <__multadd>:
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	4698      	mov	r8, r3
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2300      	movs	r3, #0
 8005da2:	690e      	ldr	r6, [r1, #16]
 8005da4:	4607      	mov	r7, r0
 8005da6:	f101 0014 	add.w	r0, r1, #20
 8005daa:	6805      	ldr	r5, [r0, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2a9      	uxth	r1, r5
 8005db0:	fb02 8101 	mla	r1, r2, r1, r8
 8005db4:	0c2d      	lsrs	r5, r5, #16
 8005db6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005dba:	fb02 c505 	mla	r5, r2, r5, ip
 8005dbe:	b289      	uxth	r1, r1
 8005dc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005dc4:	429e      	cmp	r6, r3
 8005dc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005dca:	f840 1b04 	str.w	r1, [r0], #4
 8005dce:	dcec      	bgt.n	8005daa <__multadd+0x12>
 8005dd0:	f1b8 0f00 	cmp.w	r8, #0
 8005dd4:	d022      	beq.n	8005e1c <__multadd+0x84>
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	dc19      	bgt.n	8005e10 <__multadd+0x78>
 8005ddc:	6861      	ldr	r1, [r4, #4]
 8005dde:	4638      	mov	r0, r7
 8005de0:	3101      	adds	r1, #1
 8005de2:	f7ff ff77 	bl	8005cd4 <_Balloc>
 8005de6:	4605      	mov	r5, r0
 8005de8:	b928      	cbnz	r0, 8005df6 <__multadd+0x5e>
 8005dea:	4602      	mov	r2, r0
 8005dec:	21b5      	movs	r1, #181	; 0xb5
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <__multadd+0x8c>)
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <__multadd+0x90>)
 8005df2:	f000 fd63 	bl	80068bc <__assert_func>
 8005df6:	6922      	ldr	r2, [r4, #16]
 8005df8:	f104 010c 	add.w	r1, r4, #12
 8005dfc:	3202      	adds	r2, #2
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	300c      	adds	r0, #12
 8005e02:	f7ff ff59 	bl	8005cb8 <memcpy>
 8005e06:	4621      	mov	r1, r4
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff ffa3 	bl	8005d54 <_Bfree>
 8005e0e:	462c      	mov	r4, r5
 8005e10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e14:	3601      	adds	r6, #1
 8005e16:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e1a:	6126      	str	r6, [r4, #16]
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e22:	bf00      	nop
 8005e24:	08006dbb 	.word	0x08006dbb
 8005e28:	08006e2c 	.word	0x08006e2c

08005e2c <__hi0bits>:
 8005e2c:	0c02      	lsrs	r2, r0, #16
 8005e2e:	0412      	lsls	r2, r2, #16
 8005e30:	4603      	mov	r3, r0
 8005e32:	b9ca      	cbnz	r2, 8005e68 <__hi0bits+0x3c>
 8005e34:	0403      	lsls	r3, r0, #16
 8005e36:	2010      	movs	r0, #16
 8005e38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e3c:	bf04      	itt	eq
 8005e3e:	021b      	lsleq	r3, r3, #8
 8005e40:	3008      	addeq	r0, #8
 8005e42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e46:	bf04      	itt	eq
 8005e48:	011b      	lsleq	r3, r3, #4
 8005e4a:	3004      	addeq	r0, #4
 8005e4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e50:	bf04      	itt	eq
 8005e52:	009b      	lsleq	r3, r3, #2
 8005e54:	3002      	addeq	r0, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	db05      	blt.n	8005e66 <__hi0bits+0x3a>
 8005e5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e5e:	f100 0001 	add.w	r0, r0, #1
 8005e62:	bf08      	it	eq
 8005e64:	2020      	moveq	r0, #32
 8005e66:	4770      	bx	lr
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e7e5      	b.n	8005e38 <__hi0bits+0xc>

08005e6c <__lo0bits>:
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	4602      	mov	r2, r0
 8005e70:	f013 0007 	ands.w	r0, r3, #7
 8005e74:	d00b      	beq.n	8005e8e <__lo0bits+0x22>
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d422      	bmi.n	8005ec0 <__lo0bits+0x54>
 8005e7a:	0798      	lsls	r0, r3, #30
 8005e7c:	bf49      	itett	mi
 8005e7e:	085b      	lsrmi	r3, r3, #1
 8005e80:	089b      	lsrpl	r3, r3, #2
 8005e82:	2001      	movmi	r0, #1
 8005e84:	6013      	strmi	r3, [r2, #0]
 8005e86:	bf5c      	itt	pl
 8005e88:	2002      	movpl	r0, #2
 8005e8a:	6013      	strpl	r3, [r2, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	b909      	cbnz	r1, 8005e96 <__lo0bits+0x2a>
 8005e92:	2010      	movs	r0, #16
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e9a:	bf04      	itt	eq
 8005e9c:	0a1b      	lsreq	r3, r3, #8
 8005e9e:	3008      	addeq	r0, #8
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	bf04      	itt	eq
 8005ea4:	091b      	lsreq	r3, r3, #4
 8005ea6:	3004      	addeq	r0, #4
 8005ea8:	0799      	lsls	r1, r3, #30
 8005eaa:	bf04      	itt	eq
 8005eac:	089b      	lsreq	r3, r3, #2
 8005eae:	3002      	addeq	r0, #2
 8005eb0:	07d9      	lsls	r1, r3, #31
 8005eb2:	d403      	bmi.n	8005ebc <__lo0bits+0x50>
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	f100 0001 	add.w	r0, r0, #1
 8005eba:	d003      	beq.n	8005ec4 <__lo0bits+0x58>
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4770      	bx	lr
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	4770      	bx	lr
 8005ec4:	2020      	movs	r0, #32
 8005ec6:	4770      	bx	lr

08005ec8 <__i2b>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	460c      	mov	r4, r1
 8005ecc:	2101      	movs	r1, #1
 8005ece:	f7ff ff01 	bl	8005cd4 <_Balloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	b928      	cbnz	r0, 8005ee2 <__i2b+0x1a>
 8005ed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005eda:	4b04      	ldr	r3, [pc, #16]	; (8005eec <__i2b+0x24>)
 8005edc:	4804      	ldr	r0, [pc, #16]	; (8005ef0 <__i2b+0x28>)
 8005ede:	f000 fced 	bl	80068bc <__assert_func>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	6144      	str	r4, [r0, #20]
 8005ee6:	6103      	str	r3, [r0, #16]
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	08006dbb 	.word	0x08006dbb
 8005ef0:	08006e2c 	.word	0x08006e2c

08005ef4 <__multiply>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	4614      	mov	r4, r2
 8005efa:	690a      	ldr	r2, [r1, #16]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	460d      	mov	r5, r1
 8005f00:	429a      	cmp	r2, r3
 8005f02:	bfbe      	ittt	lt
 8005f04:	460b      	movlt	r3, r1
 8005f06:	4625      	movlt	r5, r4
 8005f08:	461c      	movlt	r4, r3
 8005f0a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f12:	68ab      	ldr	r3, [r5, #8]
 8005f14:	6869      	ldr	r1, [r5, #4]
 8005f16:	eb0a 0709 	add.w	r7, sl, r9
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	bfb8      	it	lt
 8005f20:	3101      	addlt	r1, #1
 8005f22:	f7ff fed7 	bl	8005cd4 <_Balloc>
 8005f26:	b930      	cbnz	r0, 8005f36 <__multiply+0x42>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	f240 115d 	movw	r1, #349	; 0x15d
 8005f2e:	4b41      	ldr	r3, [pc, #260]	; (8006034 <__multiply+0x140>)
 8005f30:	4841      	ldr	r0, [pc, #260]	; (8006038 <__multiply+0x144>)
 8005f32:	f000 fcc3 	bl	80068bc <__assert_func>
 8005f36:	f100 0614 	add.w	r6, r0, #20
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005f42:	4543      	cmp	r3, r8
 8005f44:	d31e      	bcc.n	8005f84 <__multiply+0x90>
 8005f46:	f105 0c14 	add.w	ip, r5, #20
 8005f4a:	f104 0314 	add.w	r3, r4, #20
 8005f4e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005f52:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005f56:	9202      	str	r2, [sp, #8]
 8005f58:	ebac 0205 	sub.w	r2, ip, r5
 8005f5c:	3a15      	subs	r2, #21
 8005f5e:	f022 0203 	bic.w	r2, r2, #3
 8005f62:	3204      	adds	r2, #4
 8005f64:	f105 0115 	add.w	r1, r5, #21
 8005f68:	458c      	cmp	ip, r1
 8005f6a:	bf38      	it	cc
 8005f6c:	2204      	movcc	r2, #4
 8005f6e:	9201      	str	r2, [sp, #4]
 8005f70:	9a02      	ldr	r2, [sp, #8]
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d808      	bhi.n	8005f8a <__multiply+0x96>
 8005f78:	2f00      	cmp	r7, #0
 8005f7a:	dc55      	bgt.n	8006028 <__multiply+0x134>
 8005f7c:	6107      	str	r7, [r0, #16]
 8005f7e:	b005      	add	sp, #20
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	f843 2b04 	str.w	r2, [r3], #4
 8005f88:	e7db      	b.n	8005f42 <__multiply+0x4e>
 8005f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f8e:	f1ba 0f00 	cmp.w	sl, #0
 8005f92:	d020      	beq.n	8005fd6 <__multiply+0xe2>
 8005f94:	46b1      	mov	r9, r6
 8005f96:	2200      	movs	r2, #0
 8005f98:	f105 0e14 	add.w	lr, r5, #20
 8005f9c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005fa0:	f8d9 b000 	ldr.w	fp, [r9]
 8005fa4:	b2a1      	uxth	r1, r4
 8005fa6:	fa1f fb8b 	uxth.w	fp, fp
 8005faa:	fb0a b101 	mla	r1, sl, r1, fp
 8005fae:	4411      	add	r1, r2
 8005fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb4:	0c24      	lsrs	r4, r4, #16
 8005fb6:	0c12      	lsrs	r2, r2, #16
 8005fb8:	fb0a 2404 	mla	r4, sl, r4, r2
 8005fbc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005fc0:	b289      	uxth	r1, r1
 8005fc2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005fc6:	45f4      	cmp	ip, lr
 8005fc8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005fcc:	f849 1b04 	str.w	r1, [r9], #4
 8005fd0:	d8e4      	bhi.n	8005f9c <__multiply+0xa8>
 8005fd2:	9901      	ldr	r1, [sp, #4]
 8005fd4:	5072      	str	r2, [r6, r1]
 8005fd6:	9a03      	ldr	r2, [sp, #12]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fde:	f1b9 0f00 	cmp.w	r9, #0
 8005fe2:	d01f      	beq.n	8006024 <__multiply+0x130>
 8005fe4:	46b6      	mov	lr, r6
 8005fe6:	f04f 0a00 	mov.w	sl, #0
 8005fea:	6834      	ldr	r4, [r6, #0]
 8005fec:	f105 0114 	add.w	r1, r5, #20
 8005ff0:	880a      	ldrh	r2, [r1, #0]
 8005ff2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005ff6:	b2a4      	uxth	r4, r4
 8005ff8:	fb09 b202 	mla	r2, r9, r2, fp
 8005ffc:	4492      	add	sl, r2
 8005ffe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006002:	f84e 4b04 	str.w	r4, [lr], #4
 8006006:	f851 4b04 	ldr.w	r4, [r1], #4
 800600a:	f8be 2000 	ldrh.w	r2, [lr]
 800600e:	0c24      	lsrs	r4, r4, #16
 8006010:	fb09 2404 	mla	r4, r9, r4, r2
 8006014:	458c      	cmp	ip, r1
 8006016:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800601a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800601e:	d8e7      	bhi.n	8005ff0 <__multiply+0xfc>
 8006020:	9a01      	ldr	r2, [sp, #4]
 8006022:	50b4      	str	r4, [r6, r2]
 8006024:	3604      	adds	r6, #4
 8006026:	e7a3      	b.n	8005f70 <__multiply+0x7c>
 8006028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1a5      	bne.n	8005f7c <__multiply+0x88>
 8006030:	3f01      	subs	r7, #1
 8006032:	e7a1      	b.n	8005f78 <__multiply+0x84>
 8006034:	08006dbb 	.word	0x08006dbb
 8006038:	08006e2c 	.word	0x08006e2c

0800603c <__pow5mult>:
 800603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006040:	4615      	mov	r5, r2
 8006042:	f012 0203 	ands.w	r2, r2, #3
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	d007      	beq.n	800605c <__pow5mult+0x20>
 800604c:	4c25      	ldr	r4, [pc, #148]	; (80060e4 <__pow5mult+0xa8>)
 800604e:	3a01      	subs	r2, #1
 8006050:	2300      	movs	r3, #0
 8006052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006056:	f7ff fe9f 	bl	8005d98 <__multadd>
 800605a:	4607      	mov	r7, r0
 800605c:	10ad      	asrs	r5, r5, #2
 800605e:	d03d      	beq.n	80060dc <__pow5mult+0xa0>
 8006060:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006062:	b97c      	cbnz	r4, 8006084 <__pow5mult+0x48>
 8006064:	2010      	movs	r0, #16
 8006066:	f7ff fe11 	bl	8005c8c <malloc>
 800606a:	4602      	mov	r2, r0
 800606c:	6270      	str	r0, [r6, #36]	; 0x24
 800606e:	b928      	cbnz	r0, 800607c <__pow5mult+0x40>
 8006070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006074:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <__pow5mult+0xac>)
 8006076:	481d      	ldr	r0, [pc, #116]	; (80060ec <__pow5mult+0xb0>)
 8006078:	f000 fc20 	bl	80068bc <__assert_func>
 800607c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006080:	6004      	str	r4, [r0, #0]
 8006082:	60c4      	str	r4, [r0, #12]
 8006084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800608c:	b94c      	cbnz	r4, 80060a2 <__pow5mult+0x66>
 800608e:	f240 2171 	movw	r1, #625	; 0x271
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff ff18 	bl	8005ec8 <__i2b>
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	f8c8 0008 	str.w	r0, [r8, #8]
 80060a0:	6003      	str	r3, [r0, #0]
 80060a2:	f04f 0900 	mov.w	r9, #0
 80060a6:	07eb      	lsls	r3, r5, #31
 80060a8:	d50a      	bpl.n	80060c0 <__pow5mult+0x84>
 80060aa:	4639      	mov	r1, r7
 80060ac:	4622      	mov	r2, r4
 80060ae:	4630      	mov	r0, r6
 80060b0:	f7ff ff20 	bl	8005ef4 <__multiply>
 80060b4:	4680      	mov	r8, r0
 80060b6:	4639      	mov	r1, r7
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff fe4b 	bl	8005d54 <_Bfree>
 80060be:	4647      	mov	r7, r8
 80060c0:	106d      	asrs	r5, r5, #1
 80060c2:	d00b      	beq.n	80060dc <__pow5mult+0xa0>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	b938      	cbnz	r0, 80060d8 <__pow5mult+0x9c>
 80060c8:	4622      	mov	r2, r4
 80060ca:	4621      	mov	r1, r4
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff ff11 	bl	8005ef4 <__multiply>
 80060d2:	6020      	str	r0, [r4, #0]
 80060d4:	f8c0 9000 	str.w	r9, [r0]
 80060d8:	4604      	mov	r4, r0
 80060da:	e7e4      	b.n	80060a6 <__pow5mult+0x6a>
 80060dc:	4638      	mov	r0, r7
 80060de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e2:	bf00      	nop
 80060e4:	08006f80 	.word	0x08006f80
 80060e8:	08006d45 	.word	0x08006d45
 80060ec:	08006e2c 	.word	0x08006e2c

080060f0 <__lshift>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	460c      	mov	r4, r1
 80060f6:	4607      	mov	r7, r0
 80060f8:	4691      	mov	r9, r2
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6849      	ldr	r1, [r1, #4]
 80060fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006108:	f108 0601 	add.w	r6, r8, #1
 800610c:	42b3      	cmp	r3, r6
 800610e:	db0b      	blt.n	8006128 <__lshift+0x38>
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff fddf 	bl	8005cd4 <_Balloc>
 8006116:	4605      	mov	r5, r0
 8006118:	b948      	cbnz	r0, 800612e <__lshift+0x3e>
 800611a:	4602      	mov	r2, r0
 800611c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <__lshift+0xd0>)
 8006122:	4828      	ldr	r0, [pc, #160]	; (80061c4 <__lshift+0xd4>)
 8006124:	f000 fbca 	bl	80068bc <__assert_func>
 8006128:	3101      	adds	r1, #1
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	e7ee      	b.n	800610c <__lshift+0x1c>
 800612e:	2300      	movs	r3, #0
 8006130:	f100 0114 	add.w	r1, r0, #20
 8006134:	f100 0210 	add.w	r2, r0, #16
 8006138:	4618      	mov	r0, r3
 800613a:	4553      	cmp	r3, sl
 800613c:	db33      	blt.n	80061a6 <__lshift+0xb6>
 800613e:	6920      	ldr	r0, [r4, #16]
 8006140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006144:	f104 0314 	add.w	r3, r4, #20
 8006148:	f019 091f 	ands.w	r9, r9, #31
 800614c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006154:	d02b      	beq.n	80061ae <__lshift+0xbe>
 8006156:	468a      	mov	sl, r1
 8006158:	2200      	movs	r2, #0
 800615a:	f1c9 0e20 	rsb	lr, r9, #32
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	fa00 f009 	lsl.w	r0, r0, r9
 8006164:	4302      	orrs	r2, r0
 8006166:	f84a 2b04 	str.w	r2, [sl], #4
 800616a:	f853 2b04 	ldr.w	r2, [r3], #4
 800616e:	459c      	cmp	ip, r3
 8006170:	fa22 f20e 	lsr.w	r2, r2, lr
 8006174:	d8f3      	bhi.n	800615e <__lshift+0x6e>
 8006176:	ebac 0304 	sub.w	r3, ip, r4
 800617a:	3b15      	subs	r3, #21
 800617c:	f023 0303 	bic.w	r3, r3, #3
 8006180:	3304      	adds	r3, #4
 8006182:	f104 0015 	add.w	r0, r4, #21
 8006186:	4584      	cmp	ip, r0
 8006188:	bf38      	it	cc
 800618a:	2304      	movcc	r3, #4
 800618c:	50ca      	str	r2, [r1, r3]
 800618e:	b10a      	cbz	r2, 8006194 <__lshift+0xa4>
 8006190:	f108 0602 	add.w	r6, r8, #2
 8006194:	3e01      	subs	r6, #1
 8006196:	4638      	mov	r0, r7
 8006198:	4621      	mov	r1, r4
 800619a:	612e      	str	r6, [r5, #16]
 800619c:	f7ff fdda 	bl	8005d54 <_Bfree>
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80061aa:	3301      	adds	r3, #1
 80061ac:	e7c5      	b.n	800613a <__lshift+0x4a>
 80061ae:	3904      	subs	r1, #4
 80061b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b4:	459c      	cmp	ip, r3
 80061b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061ba:	d8f9      	bhi.n	80061b0 <__lshift+0xc0>
 80061bc:	e7ea      	b.n	8006194 <__lshift+0xa4>
 80061be:	bf00      	nop
 80061c0:	08006dbb 	.word	0x08006dbb
 80061c4:	08006e2c 	.word	0x08006e2c

080061c8 <__mcmp>:
 80061c8:	4603      	mov	r3, r0
 80061ca:	690a      	ldr	r2, [r1, #16]
 80061cc:	6900      	ldr	r0, [r0, #16]
 80061ce:	b530      	push	{r4, r5, lr}
 80061d0:	1a80      	subs	r0, r0, r2
 80061d2:	d10d      	bne.n	80061f0 <__mcmp+0x28>
 80061d4:	3314      	adds	r3, #20
 80061d6:	3114      	adds	r1, #20
 80061d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061e8:	4295      	cmp	r5, r2
 80061ea:	d002      	beq.n	80061f2 <__mcmp+0x2a>
 80061ec:	d304      	bcc.n	80061f8 <__mcmp+0x30>
 80061ee:	2001      	movs	r0, #1
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d3f4      	bcc.n	80061e0 <__mcmp+0x18>
 80061f6:	e7fb      	b.n	80061f0 <__mcmp+0x28>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e7f8      	b.n	80061f0 <__mcmp+0x28>
	...

08006200 <__mdiff>:
 8006200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	4606      	mov	r6, r0
 8006208:	4611      	mov	r1, r2
 800620a:	4620      	mov	r0, r4
 800620c:	4692      	mov	sl, r2
 800620e:	f7ff ffdb 	bl	80061c8 <__mcmp>
 8006212:	1e05      	subs	r5, r0, #0
 8006214:	d111      	bne.n	800623a <__mdiff+0x3a>
 8006216:	4629      	mov	r1, r5
 8006218:	4630      	mov	r0, r6
 800621a:	f7ff fd5b 	bl	8005cd4 <_Balloc>
 800621e:	4602      	mov	r2, r0
 8006220:	b928      	cbnz	r0, 800622e <__mdiff+0x2e>
 8006222:	f240 2132 	movw	r1, #562	; 0x232
 8006226:	4b3c      	ldr	r3, [pc, #240]	; (8006318 <__mdiff+0x118>)
 8006228:	483c      	ldr	r0, [pc, #240]	; (800631c <__mdiff+0x11c>)
 800622a:	f000 fb47 	bl	80068bc <__assert_func>
 800622e:	2301      	movs	r3, #1
 8006230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006234:	4610      	mov	r0, r2
 8006236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	bfa4      	itt	ge
 800623c:	4653      	movge	r3, sl
 800623e:	46a2      	movge	sl, r4
 8006240:	4630      	mov	r0, r6
 8006242:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006246:	bfa6      	itte	ge
 8006248:	461c      	movge	r4, r3
 800624a:	2500      	movge	r5, #0
 800624c:	2501      	movlt	r5, #1
 800624e:	f7ff fd41 	bl	8005cd4 <_Balloc>
 8006252:	4602      	mov	r2, r0
 8006254:	b918      	cbnz	r0, 800625e <__mdiff+0x5e>
 8006256:	f44f 7110 	mov.w	r1, #576	; 0x240
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <__mdiff+0x118>)
 800625c:	e7e4      	b.n	8006228 <__mdiff+0x28>
 800625e:	f100 0814 	add.w	r8, r0, #20
 8006262:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006266:	60c5      	str	r5, [r0, #12]
 8006268:	f04f 0c00 	mov.w	ip, #0
 800626c:	f10a 0514 	add.w	r5, sl, #20
 8006270:	f10a 0010 	add.w	r0, sl, #16
 8006274:	46c2      	mov	sl, r8
 8006276:	6926      	ldr	r6, [r4, #16]
 8006278:	f104 0914 	add.w	r9, r4, #20
 800627c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006284:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006288:	f859 3b04 	ldr.w	r3, [r9], #4
 800628c:	fa1f f18b 	uxth.w	r1, fp
 8006290:	4461      	add	r1, ip
 8006292:	fa1f fc83 	uxth.w	ip, r3
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	eba1 010c 	sub.w	r1, r1, ip
 800629c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062a4:	b289      	uxth	r1, r1
 80062a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062aa:	454e      	cmp	r6, r9
 80062ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80062b0:	f84a 3b04 	str.w	r3, [sl], #4
 80062b4:	d8e6      	bhi.n	8006284 <__mdiff+0x84>
 80062b6:	1b33      	subs	r3, r6, r4
 80062b8:	3b15      	subs	r3, #21
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	3415      	adds	r4, #21
 80062c0:	3304      	adds	r3, #4
 80062c2:	42a6      	cmp	r6, r4
 80062c4:	bf38      	it	cc
 80062c6:	2304      	movcc	r3, #4
 80062c8:	441d      	add	r5, r3
 80062ca:	4443      	add	r3, r8
 80062cc:	461e      	mov	r6, r3
 80062ce:	462c      	mov	r4, r5
 80062d0:	4574      	cmp	r4, lr
 80062d2:	d30e      	bcc.n	80062f2 <__mdiff+0xf2>
 80062d4:	f10e 0103 	add.w	r1, lr, #3
 80062d8:	1b49      	subs	r1, r1, r5
 80062da:	f021 0103 	bic.w	r1, r1, #3
 80062de:	3d03      	subs	r5, #3
 80062e0:	45ae      	cmp	lr, r5
 80062e2:	bf38      	it	cc
 80062e4:	2100      	movcc	r1, #0
 80062e6:	4419      	add	r1, r3
 80062e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062ec:	b18b      	cbz	r3, 8006312 <__mdiff+0x112>
 80062ee:	6117      	str	r7, [r2, #16]
 80062f0:	e7a0      	b.n	8006234 <__mdiff+0x34>
 80062f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80062f6:	fa1f f188 	uxth.w	r1, r8
 80062fa:	4461      	add	r1, ip
 80062fc:	1408      	asrs	r0, r1, #16
 80062fe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006302:	b289      	uxth	r1, r1
 8006304:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800630c:	f846 1b04 	str.w	r1, [r6], #4
 8006310:	e7de      	b.n	80062d0 <__mdiff+0xd0>
 8006312:	3f01      	subs	r7, #1
 8006314:	e7e8      	b.n	80062e8 <__mdiff+0xe8>
 8006316:	bf00      	nop
 8006318:	08006dbb 	.word	0x08006dbb
 800631c:	08006e2c 	.word	0x08006e2c

08006320 <__d2b>:
 8006320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006324:	2101      	movs	r1, #1
 8006326:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800632a:	4690      	mov	r8, r2
 800632c:	461d      	mov	r5, r3
 800632e:	f7ff fcd1 	bl	8005cd4 <_Balloc>
 8006332:	4604      	mov	r4, r0
 8006334:	b930      	cbnz	r0, 8006344 <__d2b+0x24>
 8006336:	4602      	mov	r2, r0
 8006338:	f240 310a 	movw	r1, #778	; 0x30a
 800633c:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <__d2b+0xb0>)
 800633e:	4825      	ldr	r0, [pc, #148]	; (80063d4 <__d2b+0xb4>)
 8006340:	f000 fabc 	bl	80068bc <__assert_func>
 8006344:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006348:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800634c:	bb2d      	cbnz	r5, 800639a <__d2b+0x7a>
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	f1b8 0300 	subs.w	r3, r8, #0
 8006354:	d026      	beq.n	80063a4 <__d2b+0x84>
 8006356:	4668      	mov	r0, sp
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	f7ff fd87 	bl	8005e6c <__lo0bits>
 800635e:	9900      	ldr	r1, [sp, #0]
 8006360:	b1f0      	cbz	r0, 80063a0 <__d2b+0x80>
 8006362:	9a01      	ldr	r2, [sp, #4]
 8006364:	f1c0 0320 	rsb	r3, r0, #32
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	430b      	orrs	r3, r1
 800636e:	40c2      	lsrs	r2, r0
 8006370:	6163      	str	r3, [r4, #20]
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	bf14      	ite	ne
 800637a:	2102      	movne	r1, #2
 800637c:	2101      	moveq	r1, #1
 800637e:	61a3      	str	r3, [r4, #24]
 8006380:	6121      	str	r1, [r4, #16]
 8006382:	b1c5      	cbz	r5, 80063b6 <__d2b+0x96>
 8006384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006388:	4405      	add	r5, r0
 800638a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800638e:	603d      	str	r5, [r7, #0]
 8006390:	6030      	str	r0, [r6, #0]
 8006392:	4620      	mov	r0, r4
 8006394:	b002      	add	sp, #8
 8006396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639e:	e7d6      	b.n	800634e <__d2b+0x2e>
 80063a0:	6161      	str	r1, [r4, #20]
 80063a2:	e7e7      	b.n	8006374 <__d2b+0x54>
 80063a4:	a801      	add	r0, sp, #4
 80063a6:	f7ff fd61 	bl	8005e6c <__lo0bits>
 80063aa:	2101      	movs	r1, #1
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	6121      	str	r1, [r4, #16]
 80063b0:	6163      	str	r3, [r4, #20]
 80063b2:	3020      	adds	r0, #32
 80063b4:	e7e5      	b.n	8006382 <__d2b+0x62>
 80063b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80063ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063be:	6038      	str	r0, [r7, #0]
 80063c0:	6918      	ldr	r0, [r3, #16]
 80063c2:	f7ff fd33 	bl	8005e2c <__hi0bits>
 80063c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80063ca:	6031      	str	r1, [r6, #0]
 80063cc:	e7e1      	b.n	8006392 <__d2b+0x72>
 80063ce:	bf00      	nop
 80063d0:	08006dbb 	.word	0x08006dbb
 80063d4:	08006e2c 	.word	0x08006e2c

080063d8 <_calloc_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	fb02 f501 	mul.w	r5, r2, r1
 80063de:	4629      	mov	r1, r5
 80063e0:	f000 f854 	bl	800648c <_malloc_r>
 80063e4:	4604      	mov	r4, r0
 80063e6:	b118      	cbz	r0, 80063f0 <_calloc_r+0x18>
 80063e8:	462a      	mov	r2, r5
 80063ea:	2100      	movs	r1, #0
 80063ec:	f7fd fdf6 	bl	8003fdc <memset>
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd38      	pop	{r3, r4, r5, pc}

080063f4 <_free_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4605      	mov	r5, r0
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d043      	beq.n	8006484 <_free_r+0x90>
 80063fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006400:	1f0c      	subs	r4, r1, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfb8      	it	lt
 8006406:	18e4      	addlt	r4, r4, r3
 8006408:	f000 fade 	bl	80069c8 <__malloc_lock>
 800640c:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <_free_r+0x94>)
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	4610      	mov	r0, r2
 8006412:	b933      	cbnz	r3, 8006422 <_free_r+0x2e>
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	6014      	str	r4, [r2, #0]
 8006418:	4628      	mov	r0, r5
 800641a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641e:	f000 bad9 	b.w	80069d4 <__malloc_unlock>
 8006422:	42a3      	cmp	r3, r4
 8006424:	d90a      	bls.n	800643c <_free_r+0x48>
 8006426:	6821      	ldr	r1, [r4, #0]
 8006428:	1862      	adds	r2, r4, r1
 800642a:	4293      	cmp	r3, r2
 800642c:	bf01      	itttt	eq
 800642e:	681a      	ldreq	r2, [r3, #0]
 8006430:	685b      	ldreq	r3, [r3, #4]
 8006432:	1852      	addeq	r2, r2, r1
 8006434:	6022      	streq	r2, [r4, #0]
 8006436:	6063      	str	r3, [r4, #4]
 8006438:	6004      	str	r4, [r0, #0]
 800643a:	e7ed      	b.n	8006418 <_free_r+0x24>
 800643c:	461a      	mov	r2, r3
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	b10b      	cbz	r3, 8006446 <_free_r+0x52>
 8006442:	42a3      	cmp	r3, r4
 8006444:	d9fa      	bls.n	800643c <_free_r+0x48>
 8006446:	6811      	ldr	r1, [r2, #0]
 8006448:	1850      	adds	r0, r2, r1
 800644a:	42a0      	cmp	r0, r4
 800644c:	d10b      	bne.n	8006466 <_free_r+0x72>
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	4401      	add	r1, r0
 8006452:	1850      	adds	r0, r2, r1
 8006454:	4283      	cmp	r3, r0
 8006456:	6011      	str	r1, [r2, #0]
 8006458:	d1de      	bne.n	8006418 <_free_r+0x24>
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4401      	add	r1, r0
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	6053      	str	r3, [r2, #4]
 8006464:	e7d8      	b.n	8006418 <_free_r+0x24>
 8006466:	d902      	bls.n	800646e <_free_r+0x7a>
 8006468:	230c      	movs	r3, #12
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	e7d4      	b.n	8006418 <_free_r+0x24>
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	1821      	adds	r1, r4, r0
 8006472:	428b      	cmp	r3, r1
 8006474:	bf01      	itttt	eq
 8006476:	6819      	ldreq	r1, [r3, #0]
 8006478:	685b      	ldreq	r3, [r3, #4]
 800647a:	1809      	addeq	r1, r1, r0
 800647c:	6021      	streq	r1, [r4, #0]
 800647e:	6063      	str	r3, [r4, #4]
 8006480:	6054      	str	r4, [r2, #4]
 8006482:	e7c9      	b.n	8006418 <_free_r+0x24>
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	bf00      	nop
 8006488:	2000020c 	.word	0x2000020c

0800648c <_malloc_r>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	1ccd      	adds	r5, r1, #3
 8006490:	f025 0503 	bic.w	r5, r5, #3
 8006494:	3508      	adds	r5, #8
 8006496:	2d0c      	cmp	r5, #12
 8006498:	bf38      	it	cc
 800649a:	250c      	movcc	r5, #12
 800649c:	2d00      	cmp	r5, #0
 800649e:	4606      	mov	r6, r0
 80064a0:	db01      	blt.n	80064a6 <_malloc_r+0x1a>
 80064a2:	42a9      	cmp	r1, r5
 80064a4:	d903      	bls.n	80064ae <_malloc_r+0x22>
 80064a6:	230c      	movs	r3, #12
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	2000      	movs	r0, #0
 80064ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ae:	f000 fa8b 	bl	80069c8 <__malloc_lock>
 80064b2:	4921      	ldr	r1, [pc, #132]	; (8006538 <_malloc_r+0xac>)
 80064b4:	680a      	ldr	r2, [r1, #0]
 80064b6:	4614      	mov	r4, r2
 80064b8:	b99c      	cbnz	r4, 80064e2 <_malloc_r+0x56>
 80064ba:	4f20      	ldr	r7, [pc, #128]	; (800653c <_malloc_r+0xb0>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	b923      	cbnz	r3, 80064ca <_malloc_r+0x3e>
 80064c0:	4621      	mov	r1, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f000 f994 	bl	80067f0 <_sbrk_r>
 80064c8:	6038      	str	r0, [r7, #0]
 80064ca:	4629      	mov	r1, r5
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 f98f 	bl	80067f0 <_sbrk_r>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	d123      	bne.n	800651e <_malloc_r+0x92>
 80064d6:	230c      	movs	r3, #12
 80064d8:	4630      	mov	r0, r6
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	f000 fa7a 	bl	80069d4 <__malloc_unlock>
 80064e0:	e7e3      	b.n	80064aa <_malloc_r+0x1e>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	1b5b      	subs	r3, r3, r5
 80064e6:	d417      	bmi.n	8006518 <_malloc_r+0x8c>
 80064e8:	2b0b      	cmp	r3, #11
 80064ea:	d903      	bls.n	80064f4 <_malloc_r+0x68>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	441c      	add	r4, r3
 80064f0:	6025      	str	r5, [r4, #0]
 80064f2:	e004      	b.n	80064fe <_malloc_r+0x72>
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	42a2      	cmp	r2, r4
 80064f8:	bf0c      	ite	eq
 80064fa:	600b      	streq	r3, [r1, #0]
 80064fc:	6053      	strne	r3, [r2, #4]
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 fa68 	bl	80069d4 <__malloc_unlock>
 8006504:	f104 000b 	add.w	r0, r4, #11
 8006508:	1d23      	adds	r3, r4, #4
 800650a:	f020 0007 	bic.w	r0, r0, #7
 800650e:	1ac2      	subs	r2, r0, r3
 8006510:	d0cc      	beq.n	80064ac <_malloc_r+0x20>
 8006512:	1a1b      	subs	r3, r3, r0
 8006514:	50a3      	str	r3, [r4, r2]
 8006516:	e7c9      	b.n	80064ac <_malloc_r+0x20>
 8006518:	4622      	mov	r2, r4
 800651a:	6864      	ldr	r4, [r4, #4]
 800651c:	e7cc      	b.n	80064b8 <_malloc_r+0x2c>
 800651e:	1cc4      	adds	r4, r0, #3
 8006520:	f024 0403 	bic.w	r4, r4, #3
 8006524:	42a0      	cmp	r0, r4
 8006526:	d0e3      	beq.n	80064f0 <_malloc_r+0x64>
 8006528:	1a21      	subs	r1, r4, r0
 800652a:	4630      	mov	r0, r6
 800652c:	f000 f960 	bl	80067f0 <_sbrk_r>
 8006530:	3001      	adds	r0, #1
 8006532:	d1dd      	bne.n	80064f0 <_malloc_r+0x64>
 8006534:	e7cf      	b.n	80064d6 <_malloc_r+0x4a>
 8006536:	bf00      	nop
 8006538:	2000020c 	.word	0x2000020c
 800653c:	20000210 	.word	0x20000210

08006540 <__sfputc_r>:
 8006540:	6893      	ldr	r3, [r2, #8]
 8006542:	b410      	push	{r4}
 8006544:	3b01      	subs	r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	6093      	str	r3, [r2, #8]
 800654a:	da07      	bge.n	800655c <__sfputc_r+0x1c>
 800654c:	6994      	ldr	r4, [r2, #24]
 800654e:	42a3      	cmp	r3, r4
 8006550:	db01      	blt.n	8006556 <__sfputc_r+0x16>
 8006552:	290a      	cmp	r1, #10
 8006554:	d102      	bne.n	800655c <__sfputc_r+0x1c>
 8006556:	bc10      	pop	{r4}
 8006558:	f7fe ba36 	b.w	80049c8 <__swbuf_r>
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	1c58      	adds	r0, r3, #1
 8006560:	6010      	str	r0, [r2, #0]
 8006562:	7019      	strb	r1, [r3, #0]
 8006564:	4608      	mov	r0, r1
 8006566:	bc10      	pop	{r4}
 8006568:	4770      	bx	lr

0800656a <__sfputs_r>:
 800656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	4614      	mov	r4, r2
 8006572:	18d5      	adds	r5, r2, r3
 8006574:	42ac      	cmp	r4, r5
 8006576:	d101      	bne.n	800657c <__sfputs_r+0x12>
 8006578:	2000      	movs	r0, #0
 800657a:	e007      	b.n	800658c <__sfputs_r+0x22>
 800657c:	463a      	mov	r2, r7
 800657e:	4630      	mov	r0, r6
 8006580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006584:	f7ff ffdc 	bl	8006540 <__sfputc_r>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d1f3      	bne.n	8006574 <__sfputs_r+0xa>
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006590 <_vfiprintf_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	460d      	mov	r5, r1
 8006596:	4614      	mov	r4, r2
 8006598:	4698      	mov	r8, r3
 800659a:	4606      	mov	r6, r0
 800659c:	b09d      	sub	sp, #116	; 0x74
 800659e:	b118      	cbz	r0, 80065a8 <_vfiprintf_r+0x18>
 80065a0:	6983      	ldr	r3, [r0, #24]
 80065a2:	b90b      	cbnz	r3, 80065a8 <_vfiprintf_r+0x18>
 80065a4:	f7ff fa68 	bl	8005a78 <__sinit>
 80065a8:	4b89      	ldr	r3, [pc, #548]	; (80067d0 <_vfiprintf_r+0x240>)
 80065aa:	429d      	cmp	r5, r3
 80065ac:	d11b      	bne.n	80065e6 <_vfiprintf_r+0x56>
 80065ae:	6875      	ldr	r5, [r6, #4]
 80065b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b2:	07d9      	lsls	r1, r3, #31
 80065b4:	d405      	bmi.n	80065c2 <_vfiprintf_r+0x32>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	059a      	lsls	r2, r3, #22
 80065ba:	d402      	bmi.n	80065c2 <_vfiprintf_r+0x32>
 80065bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065be:	f7ff fafe 	bl	8005bbe <__retarget_lock_acquire_recursive>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	071b      	lsls	r3, r3, #28
 80065c6:	d501      	bpl.n	80065cc <_vfiprintf_r+0x3c>
 80065c8:	692b      	ldr	r3, [r5, #16]
 80065ca:	b9eb      	cbnz	r3, 8006608 <_vfiprintf_r+0x78>
 80065cc:	4629      	mov	r1, r5
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7fe fa4c 	bl	8004a6c <__swsetup_r>
 80065d4:	b1c0      	cbz	r0, 8006608 <_vfiprintf_r+0x78>
 80065d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d8:	07dc      	lsls	r4, r3, #31
 80065da:	d50e      	bpl.n	80065fa <_vfiprintf_r+0x6a>
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	b01d      	add	sp, #116	; 0x74
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <_vfiprintf_r+0x244>)
 80065e8:	429d      	cmp	r5, r3
 80065ea:	d101      	bne.n	80065f0 <_vfiprintf_r+0x60>
 80065ec:	68b5      	ldr	r5, [r6, #8]
 80065ee:	e7df      	b.n	80065b0 <_vfiprintf_r+0x20>
 80065f0:	4b79      	ldr	r3, [pc, #484]	; (80067d8 <_vfiprintf_r+0x248>)
 80065f2:	429d      	cmp	r5, r3
 80065f4:	bf08      	it	eq
 80065f6:	68f5      	ldreq	r5, [r6, #12]
 80065f8:	e7da      	b.n	80065b0 <_vfiprintf_r+0x20>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	0598      	lsls	r0, r3, #22
 80065fe:	d4ed      	bmi.n	80065dc <_vfiprintf_r+0x4c>
 8006600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006602:	f7ff fadd 	bl	8005bc0 <__retarget_lock_release_recursive>
 8006606:	e7e9      	b.n	80065dc <_vfiprintf_r+0x4c>
 8006608:	2300      	movs	r3, #0
 800660a:	9309      	str	r3, [sp, #36]	; 0x24
 800660c:	2320      	movs	r3, #32
 800660e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006612:	2330      	movs	r3, #48	; 0x30
 8006614:	f04f 0901 	mov.w	r9, #1
 8006618:	f8cd 800c 	str.w	r8, [sp, #12]
 800661c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80067dc <_vfiprintf_r+0x24c>
 8006620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006624:	4623      	mov	r3, r4
 8006626:	469a      	mov	sl, r3
 8006628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662c:	b10a      	cbz	r2, 8006632 <_vfiprintf_r+0xa2>
 800662e:	2a25      	cmp	r2, #37	; 0x25
 8006630:	d1f9      	bne.n	8006626 <_vfiprintf_r+0x96>
 8006632:	ebba 0b04 	subs.w	fp, sl, r4
 8006636:	d00b      	beq.n	8006650 <_vfiprintf_r+0xc0>
 8006638:	465b      	mov	r3, fp
 800663a:	4622      	mov	r2, r4
 800663c:	4629      	mov	r1, r5
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ff93 	bl	800656a <__sfputs_r>
 8006644:	3001      	adds	r0, #1
 8006646:	f000 80aa 	beq.w	800679e <_vfiprintf_r+0x20e>
 800664a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664c:	445a      	add	r2, fp
 800664e:	9209      	str	r2, [sp, #36]	; 0x24
 8006650:	f89a 3000 	ldrb.w	r3, [sl]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80a2 	beq.w	800679e <_vfiprintf_r+0x20e>
 800665a:	2300      	movs	r3, #0
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006664:	f10a 0a01 	add.w	sl, sl, #1
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006670:	931a      	str	r3, [sp, #104]	; 0x68
 8006672:	4654      	mov	r4, sl
 8006674:	2205      	movs	r2, #5
 8006676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667a:	4858      	ldr	r0, [pc, #352]	; (80067dc <_vfiprintf_r+0x24c>)
 800667c:	f7ff fb0e 	bl	8005c9c <memchr>
 8006680:	9a04      	ldr	r2, [sp, #16]
 8006682:	b9d8      	cbnz	r0, 80066bc <_vfiprintf_r+0x12c>
 8006684:	06d1      	lsls	r1, r2, #27
 8006686:	bf44      	itt	mi
 8006688:	2320      	movmi	r3, #32
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668e:	0713      	lsls	r3, r2, #28
 8006690:	bf44      	itt	mi
 8006692:	232b      	movmi	r3, #43	; 0x2b
 8006694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006698:	f89a 3000 	ldrb.w	r3, [sl]
 800669c:	2b2a      	cmp	r3, #42	; 0x2a
 800669e:	d015      	beq.n	80066cc <_vfiprintf_r+0x13c>
 80066a0:	4654      	mov	r4, sl
 80066a2:	2000      	movs	r0, #0
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	9a07      	ldr	r2, [sp, #28]
 80066aa:	4621      	mov	r1, r4
 80066ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b0:	3b30      	subs	r3, #48	; 0x30
 80066b2:	2b09      	cmp	r3, #9
 80066b4:	d94e      	bls.n	8006754 <_vfiprintf_r+0x1c4>
 80066b6:	b1b0      	cbz	r0, 80066e6 <_vfiprintf_r+0x156>
 80066b8:	9207      	str	r2, [sp, #28]
 80066ba:	e014      	b.n	80066e6 <_vfiprintf_r+0x156>
 80066bc:	eba0 0308 	sub.w	r3, r0, r8
 80066c0:	fa09 f303 	lsl.w	r3, r9, r3
 80066c4:	4313      	orrs	r3, r2
 80066c6:	46a2      	mov	sl, r4
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	e7d2      	b.n	8006672 <_vfiprintf_r+0xe2>
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	1d19      	adds	r1, r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	9103      	str	r1, [sp, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bfbb      	ittet	lt
 80066d8:	425b      	neglt	r3, r3
 80066da:	f042 0202 	orrlt.w	r2, r2, #2
 80066de:	9307      	strge	r3, [sp, #28]
 80066e0:	9307      	strlt	r3, [sp, #28]
 80066e2:	bfb8      	it	lt
 80066e4:	9204      	strlt	r2, [sp, #16]
 80066e6:	7823      	ldrb	r3, [r4, #0]
 80066e8:	2b2e      	cmp	r3, #46	; 0x2e
 80066ea:	d10c      	bne.n	8006706 <_vfiprintf_r+0x176>
 80066ec:	7863      	ldrb	r3, [r4, #1]
 80066ee:	2b2a      	cmp	r3, #42	; 0x2a
 80066f0:	d135      	bne.n	800675e <_vfiprintf_r+0x1ce>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	3402      	adds	r4, #2
 80066f6:	1d1a      	adds	r2, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfb8      	it	lt
 8006700:	f04f 33ff 	movlt.w	r3, #4294967295
 8006704:	9305      	str	r3, [sp, #20]
 8006706:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067ec <_vfiprintf_r+0x25c>
 800670a:	2203      	movs	r2, #3
 800670c:	4650      	mov	r0, sl
 800670e:	7821      	ldrb	r1, [r4, #0]
 8006710:	f7ff fac4 	bl	8005c9c <memchr>
 8006714:	b140      	cbz	r0, 8006728 <_vfiprintf_r+0x198>
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	eba0 000a 	sub.w	r0, r0, sl
 800671c:	fa03 f000 	lsl.w	r0, r3, r0
 8006720:	9b04      	ldr	r3, [sp, #16]
 8006722:	3401      	adds	r4, #1
 8006724:	4303      	orrs	r3, r0
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672c:	2206      	movs	r2, #6
 800672e:	482c      	ldr	r0, [pc, #176]	; (80067e0 <_vfiprintf_r+0x250>)
 8006730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006734:	f7ff fab2 	bl	8005c9c <memchr>
 8006738:	2800      	cmp	r0, #0
 800673a:	d03f      	beq.n	80067bc <_vfiprintf_r+0x22c>
 800673c:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <_vfiprintf_r+0x254>)
 800673e:	bb1b      	cbnz	r3, 8006788 <_vfiprintf_r+0x1f8>
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	3307      	adds	r3, #7
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	3308      	adds	r3, #8
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674e:	443b      	add	r3, r7
 8006750:	9309      	str	r3, [sp, #36]	; 0x24
 8006752:	e767      	b.n	8006624 <_vfiprintf_r+0x94>
 8006754:	460c      	mov	r4, r1
 8006756:	2001      	movs	r0, #1
 8006758:	fb0c 3202 	mla	r2, ip, r2, r3
 800675c:	e7a5      	b.n	80066aa <_vfiprintf_r+0x11a>
 800675e:	2300      	movs	r3, #0
 8006760:	f04f 0c0a 	mov.w	ip, #10
 8006764:	4619      	mov	r1, r3
 8006766:	3401      	adds	r4, #1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	4620      	mov	r0, r4
 800676c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006770:	3a30      	subs	r2, #48	; 0x30
 8006772:	2a09      	cmp	r2, #9
 8006774:	d903      	bls.n	800677e <_vfiprintf_r+0x1ee>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0c5      	beq.n	8006706 <_vfiprintf_r+0x176>
 800677a:	9105      	str	r1, [sp, #20]
 800677c:	e7c3      	b.n	8006706 <_vfiprintf_r+0x176>
 800677e:	4604      	mov	r4, r0
 8006780:	2301      	movs	r3, #1
 8006782:	fb0c 2101 	mla	r1, ip, r1, r2
 8006786:	e7f0      	b.n	800676a <_vfiprintf_r+0x1da>
 8006788:	ab03      	add	r3, sp, #12
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	462a      	mov	r2, r5
 800678e:	4630      	mov	r0, r6
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <_vfiprintf_r+0x258>)
 8006792:	a904      	add	r1, sp, #16
 8006794:	f7fd fcc8 	bl	8004128 <_printf_float>
 8006798:	4607      	mov	r7, r0
 800679a:	1c78      	adds	r0, r7, #1
 800679c:	d1d6      	bne.n	800674c <_vfiprintf_r+0x1bc>
 800679e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a0:	07d9      	lsls	r1, r3, #31
 80067a2:	d405      	bmi.n	80067b0 <_vfiprintf_r+0x220>
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	059a      	lsls	r2, r3, #22
 80067a8:	d402      	bmi.n	80067b0 <_vfiprintf_r+0x220>
 80067aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ac:	f7ff fa08 	bl	8005bc0 <__retarget_lock_release_recursive>
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	065b      	lsls	r3, r3, #25
 80067b4:	f53f af12 	bmi.w	80065dc <_vfiprintf_r+0x4c>
 80067b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ba:	e711      	b.n	80065e0 <_vfiprintf_r+0x50>
 80067bc:	ab03      	add	r3, sp, #12
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <_vfiprintf_r+0x258>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	f7fd ff4a 	bl	8004660 <_printf_i>
 80067cc:	e7e4      	b.n	8006798 <_vfiprintf_r+0x208>
 80067ce:	bf00      	nop
 80067d0:	08006dec 	.word	0x08006dec
 80067d4:	08006e0c 	.word	0x08006e0c
 80067d8:	08006dcc 	.word	0x08006dcc
 80067dc:	08006f8c 	.word	0x08006f8c
 80067e0:	08006f96 	.word	0x08006f96
 80067e4:	08004129 	.word	0x08004129
 80067e8:	0800656b 	.word	0x0800656b
 80067ec:	08006f92 	.word	0x08006f92

080067f0 <_sbrk_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	2300      	movs	r3, #0
 80067f4:	4d05      	ldr	r5, [pc, #20]	; (800680c <_sbrk_r+0x1c>)
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fb fb06 	bl	8001e0c <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_sbrk_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_sbrk_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	200002e8 	.word	0x200002e8

08006810 <__sread>:
 8006810:	b510      	push	{r4, lr}
 8006812:	460c      	mov	r4, r1
 8006814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006818:	f000 f8e2 	bl	80069e0 <_read_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	bfab      	itete	ge
 8006820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006822:	89a3      	ldrhlt	r3, [r4, #12]
 8006824:	181b      	addge	r3, r3, r0
 8006826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800682a:	bfac      	ite	ge
 800682c:	6563      	strge	r3, [r4, #84]	; 0x54
 800682e:	81a3      	strhlt	r3, [r4, #12]
 8006830:	bd10      	pop	{r4, pc}

08006832 <__swrite>:
 8006832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006836:	461f      	mov	r7, r3
 8006838:	898b      	ldrh	r3, [r1, #12]
 800683a:	4605      	mov	r5, r0
 800683c:	05db      	lsls	r3, r3, #23
 800683e:	460c      	mov	r4, r1
 8006840:	4616      	mov	r6, r2
 8006842:	d505      	bpl.n	8006850 <__swrite+0x1e>
 8006844:	2302      	movs	r3, #2
 8006846:	2200      	movs	r2, #0
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	f000 f898 	bl	8006980 <_lseek_r>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	4632      	mov	r2, r6
 8006854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	4628      	mov	r0, r5
 800685c:	463b      	mov	r3, r7
 800685e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006866:	f000 b817 	b.w	8006898 <_write_r>

0800686a <__sseek>:
 800686a:	b510      	push	{r4, lr}
 800686c:	460c      	mov	r4, r1
 800686e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006872:	f000 f885 	bl	8006980 <_lseek_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	bf15      	itete	ne
 800687c:	6560      	strne	r0, [r4, #84]	; 0x54
 800687e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006886:	81a3      	strheq	r3, [r4, #12]
 8006888:	bf18      	it	ne
 800688a:	81a3      	strhne	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__sclose>:
 800688e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006892:	f000 b831 	b.w	80068f8 <_close_r>
	...

08006898 <_write_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	4d05      	ldr	r5, [pc, #20]	; (80068b8 <_write_r+0x20>)
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fb fa64 	bl	8001d74 <_write>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_write_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_write_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	200002e8 	.word	0x200002e8

080068bc <__assert_func>:
 80068bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068be:	4614      	mov	r4, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <__assert_func+0x2c>)
 80068c4:	4605      	mov	r5, r0
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68d8      	ldr	r0, [r3, #12]
 80068ca:	b14c      	cbz	r4, 80068e0 <__assert_func+0x24>
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <__assert_func+0x30>)
 80068ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068d2:	9100      	str	r1, [sp, #0]
 80068d4:	462b      	mov	r3, r5
 80068d6:	4906      	ldr	r1, [pc, #24]	; (80068f0 <__assert_func+0x34>)
 80068d8:	f000 f81e 	bl	8006918 <fiprintf>
 80068dc:	f000 f89f 	bl	8006a1e <abort>
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <__assert_func+0x38>)
 80068e2:	461c      	mov	r4, r3
 80068e4:	e7f3      	b.n	80068ce <__assert_func+0x12>
 80068e6:	bf00      	nop
 80068e8:	2000000c 	.word	0x2000000c
 80068ec:	08006f9d 	.word	0x08006f9d
 80068f0:	08006faa 	.word	0x08006faa
 80068f4:	08006fd8 	.word	0x08006fd8

080068f8 <_close_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	2300      	movs	r3, #0
 80068fc:	4d05      	ldr	r5, [pc, #20]	; (8006914 <_close_r+0x1c>)
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fb fa52 	bl	8001dac <_close>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_close_r+0x1a>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_close_r+0x1a>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200002e8 	.word	0x200002e8

08006918 <fiprintf>:
 8006918:	b40e      	push	{r1, r2, r3}
 800691a:	b503      	push	{r0, r1, lr}
 800691c:	4601      	mov	r1, r0
 800691e:	ab03      	add	r3, sp, #12
 8006920:	4805      	ldr	r0, [pc, #20]	; (8006938 <fiprintf+0x20>)
 8006922:	f853 2b04 	ldr.w	r2, [r3], #4
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	f7ff fe31 	bl	8006590 <_vfiprintf_r>
 800692e:	b002      	add	sp, #8
 8006930:	f85d eb04 	ldr.w	lr, [sp], #4
 8006934:	b003      	add	sp, #12
 8006936:	4770      	bx	lr
 8006938:	2000000c 	.word	0x2000000c

0800693c <_fstat_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	2300      	movs	r3, #0
 8006940:	4d06      	ldr	r5, [pc, #24]	; (800695c <_fstat_r+0x20>)
 8006942:	4604      	mov	r4, r0
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	f7fb fa3a 	bl	8001dc2 <_fstat>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d102      	bne.n	8006958 <_fstat_r+0x1c>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b103      	cbz	r3, 8006958 <_fstat_r+0x1c>
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	bd38      	pop	{r3, r4, r5, pc}
 800695a:	bf00      	nop
 800695c:	200002e8 	.word	0x200002e8

08006960 <_isatty_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	2300      	movs	r3, #0
 8006964:	4d05      	ldr	r5, [pc, #20]	; (800697c <_isatty_r+0x1c>)
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fb fa38 	bl	8001de0 <_isatty>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_isatty_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_isatty_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	200002e8 	.word	0x200002e8

08006980 <_lseek_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	4611      	mov	r1, r2
 8006988:	2200      	movs	r2, #0
 800698a:	4d05      	ldr	r5, [pc, #20]	; (80069a0 <_lseek_r+0x20>)
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f7fb fa30 	bl	8001df4 <_lseek>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_lseek_r+0x1e>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_lseek_r+0x1e>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200002e8 	.word	0x200002e8

080069a4 <__ascii_mbtowc>:
 80069a4:	b082      	sub	sp, #8
 80069a6:	b901      	cbnz	r1, 80069aa <__ascii_mbtowc+0x6>
 80069a8:	a901      	add	r1, sp, #4
 80069aa:	b142      	cbz	r2, 80069be <__ascii_mbtowc+0x1a>
 80069ac:	b14b      	cbz	r3, 80069c2 <__ascii_mbtowc+0x1e>
 80069ae:	7813      	ldrb	r3, [r2, #0]
 80069b0:	600b      	str	r3, [r1, #0]
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	1e10      	subs	r0, r2, #0
 80069b6:	bf18      	it	ne
 80069b8:	2001      	movne	r0, #1
 80069ba:	b002      	add	sp, #8
 80069bc:	4770      	bx	lr
 80069be:	4610      	mov	r0, r2
 80069c0:	e7fb      	b.n	80069ba <__ascii_mbtowc+0x16>
 80069c2:	f06f 0001 	mvn.w	r0, #1
 80069c6:	e7f8      	b.n	80069ba <__ascii_mbtowc+0x16>

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff b8f8 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	200002e0 	.word	0x200002e0

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff b8f3 	b.w	8005bc0 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	200002e0 	.word	0x200002e0

080069e0 <_read_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	2200      	movs	r2, #0
 80069ea:	4d05      	ldr	r5, [pc, #20]	; (8006a00 <_read_r+0x20>)
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fb f9a3 	bl	8001d3a <_read>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_read_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_read_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	200002e8 	.word	0x200002e8

08006a04 <__ascii_wctomb>:
 8006a04:	4603      	mov	r3, r0
 8006a06:	4608      	mov	r0, r1
 8006a08:	b141      	cbz	r1, 8006a1c <__ascii_wctomb+0x18>
 8006a0a:	2aff      	cmp	r2, #255	; 0xff
 8006a0c:	d904      	bls.n	8006a18 <__ascii_wctomb+0x14>
 8006a0e:	228a      	movs	r2, #138	; 0x8a
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	4770      	bx	lr
 8006a18:	2001      	movs	r0, #1
 8006a1a:	700a      	strb	r2, [r1, #0]
 8006a1c:	4770      	bx	lr

08006a1e <abort>:
 8006a1e:	2006      	movs	r0, #6
 8006a20:	b508      	push	{r3, lr}
 8006a22:	f000 f82b 	bl	8006a7c <raise>
 8006a26:	2001      	movs	r0, #1
 8006a28:	f7fb f97d 	bl	8001d26 <_exit>

08006a2c <_raise_r>:
 8006a2c:	291f      	cmp	r1, #31
 8006a2e:	b538      	push	{r3, r4, r5, lr}
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	d904      	bls.n	8006a40 <_raise_r+0x14>
 8006a36:	2316      	movs	r3, #22
 8006a38:	6003      	str	r3, [r0, #0]
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a42:	b112      	cbz	r2, 8006a4a <_raise_r+0x1e>
 8006a44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a48:	b94b      	cbnz	r3, 8006a5e <_raise_r+0x32>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 f830 	bl	8006ab0 <_getpid_r>
 8006a50:	462a      	mov	r2, r5
 8006a52:	4601      	mov	r1, r0
 8006a54:	4620      	mov	r0, r4
 8006a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a5a:	f000 b817 	b.w	8006a8c <_kill_r>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d00a      	beq.n	8006a78 <_raise_r+0x4c>
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	d103      	bne.n	8006a6e <_raise_r+0x42>
 8006a66:	2316      	movs	r3, #22
 8006a68:	6003      	str	r3, [r0, #0]
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	e7e7      	b.n	8006a3e <_raise_r+0x12>
 8006a6e:	2400      	movs	r4, #0
 8006a70:	4628      	mov	r0, r5
 8006a72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a76:	4798      	blx	r3
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7e0      	b.n	8006a3e <_raise_r+0x12>

08006a7c <raise>:
 8006a7c:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <raise+0xc>)
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f7ff bfd3 	b.w	8006a2c <_raise_r>
 8006a86:	bf00      	nop
 8006a88:	2000000c 	.word	0x2000000c

08006a8c <_kill_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4d06      	ldr	r5, [pc, #24]	; (8006aac <_kill_r+0x20>)
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	f7fb f934 	bl	8001d06 <_kill>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d102      	bne.n	8006aa8 <_kill_r+0x1c>
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	b103      	cbz	r3, 8006aa8 <_kill_r+0x1c>
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	200002e8 	.word	0x200002e8

08006ab0 <_getpid_r>:
 8006ab0:	f7fb b922 	b.w	8001cf8 <_getpid>

08006ab4 <sqrt>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	f000 f827 	bl	8006b0c <__ieee754_sqrt>
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <sqrt+0x54>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	3301      	adds	r3, #1
 8006aca:	d019      	beq.n	8006b00 <sqrt+0x4c>
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7f9 ff9a 	bl	8000a0c <__aeabi_dcmpun>
 8006ad8:	b990      	cbnz	r0, 8006b00 <sqrt+0x4c>
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7f9 ff6b 	bl	80009bc <__aeabi_dcmplt>
 8006ae6:	b158      	cbz	r0, 8006b00 <sqrt+0x4c>
 8006ae8:	f7fd fa4e 	bl	8003f88 <__errno>
 8006aec:	2321      	movs	r3, #33	; 0x21
 8006aee:	2200      	movs	r2, #0
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	4610      	mov	r0, r2
 8006af6:	4619      	mov	r1, r3
 8006af8:	f7f9 fe18 	bl	800072c <__aeabi_ddiv>
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200001dc 	.word	0x200001dc

08006b0c <__ieee754_sqrt>:
 8006b0c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006c60 <__ieee754_sqrt+0x154>
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	ea3c 0c01 	bics.w	ip, ip, r1
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	460a      	mov	r2, r1
 8006b20:	4607      	mov	r7, r0
 8006b22:	4604      	mov	r4, r0
 8006b24:	d10e      	bne.n	8006b44 <__ieee754_sqrt+0x38>
 8006b26:	4602      	mov	r2, r0
 8006b28:	f7f9 fcd6 	bl	80004d8 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7f9 fb1a 	bl	800016c <__adddf3>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4629      	mov	r1, r5
 8006b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b44:	2900      	cmp	r1, #0
 8006b46:	dc0d      	bgt.n	8006b64 <__ieee754_sqrt+0x58>
 8006b48:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006b4c:	ea5c 0707 	orrs.w	r7, ip, r7
 8006b50:	d0f4      	beq.n	8006b3c <__ieee754_sqrt+0x30>
 8006b52:	b139      	cbz	r1, 8006b64 <__ieee754_sqrt+0x58>
 8006b54:	4602      	mov	r2, r0
 8006b56:	f7f9 fb07 	bl	8000168 <__aeabi_dsub>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	f7f9 fde5 	bl	800072c <__aeabi_ddiv>
 8006b62:	e7e9      	b.n	8006b38 <__ieee754_sqrt+0x2c>
 8006b64:	1512      	asrs	r2, r2, #20
 8006b66:	d074      	beq.n	8006c52 <__ieee754_sqrt+0x146>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	07d5      	lsls	r5, r2, #31
 8006b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b70:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006b74:	bf5e      	ittt	pl
 8006b76:	0fe3      	lsrpl	r3, r4, #31
 8006b78:	0064      	lslpl	r4, r4, #1
 8006b7a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006b7e:	0fe3      	lsrs	r3, r4, #31
 8006b80:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006b84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006b88:	2516      	movs	r5, #22
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b90:	1076      	asrs	r6, r6, #1
 8006b92:	0064      	lsls	r4, r4, #1
 8006b94:	188f      	adds	r7, r1, r2
 8006b96:	429f      	cmp	r7, r3
 8006b98:	bfde      	ittt	le
 8006b9a:	1bdb      	suble	r3, r3, r7
 8006b9c:	18b9      	addle	r1, r7, r2
 8006b9e:	1880      	addle	r0, r0, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	3d01      	subs	r5, #1
 8006ba4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006ba8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006bac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006bb0:	d1f0      	bne.n	8006b94 <__ieee754_sqrt+0x88>
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	f04f 0e20 	mov.w	lr, #32
 8006bb8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	eb07 0c05 	add.w	ip, r7, r5
 8006bc2:	dc02      	bgt.n	8006bca <__ieee754_sqrt+0xbe>
 8006bc4:	d113      	bne.n	8006bee <__ieee754_sqrt+0xe2>
 8006bc6:	45a4      	cmp	ip, r4
 8006bc8:	d811      	bhi.n	8006bee <__ieee754_sqrt+0xe2>
 8006bca:	f1bc 0f00 	cmp.w	ip, #0
 8006bce:	eb0c 0507 	add.w	r5, ip, r7
 8006bd2:	da43      	bge.n	8006c5c <__ieee754_sqrt+0x150>
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	db41      	blt.n	8006c5c <__ieee754_sqrt+0x150>
 8006bd8:	f101 0801 	add.w	r8, r1, #1
 8006bdc:	1a5b      	subs	r3, r3, r1
 8006bde:	4641      	mov	r1, r8
 8006be0:	45a4      	cmp	ip, r4
 8006be2:	bf88      	it	hi
 8006be4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006be8:	eba4 040c 	sub.w	r4, r4, ip
 8006bec:	443a      	add	r2, r7
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	f1be 0e01 	subs.w	lr, lr, #1
 8006bf4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006bf8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006bfc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006c00:	d1dc      	bne.n	8006bbc <__ieee754_sqrt+0xb0>
 8006c02:	4323      	orrs	r3, r4
 8006c04:	d006      	beq.n	8006c14 <__ieee754_sqrt+0x108>
 8006c06:	1c54      	adds	r4, r2, #1
 8006c08:	bf0b      	itete	eq
 8006c0a:	4672      	moveq	r2, lr
 8006c0c:	3201      	addne	r2, #1
 8006c0e:	3001      	addeq	r0, #1
 8006c10:	f022 0201 	bicne.w	r2, r2, #1
 8006c14:	1043      	asrs	r3, r0, #1
 8006c16:	07c1      	lsls	r1, r0, #31
 8006c18:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006c1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006c20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006c24:	bf48      	it	mi
 8006c26:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006c30:	e782      	b.n	8006b38 <__ieee754_sqrt+0x2c>
 8006c32:	0ae3      	lsrs	r3, r4, #11
 8006c34:	3915      	subs	r1, #21
 8006c36:	0564      	lsls	r4, r4, #21
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0fa      	beq.n	8006c32 <__ieee754_sqrt+0x126>
 8006c3c:	02de      	lsls	r6, r3, #11
 8006c3e:	d50a      	bpl.n	8006c56 <__ieee754_sqrt+0x14a>
 8006c40:	f1c2 0020 	rsb	r0, r2, #32
 8006c44:	fa24 f000 	lsr.w	r0, r4, r0
 8006c48:	1e55      	subs	r5, r2, #1
 8006c4a:	4094      	lsls	r4, r2
 8006c4c:	4303      	orrs	r3, r0
 8006c4e:	1b4a      	subs	r2, r1, r5
 8006c50:	e78a      	b.n	8006b68 <__ieee754_sqrt+0x5c>
 8006c52:	4611      	mov	r1, r2
 8006c54:	e7f0      	b.n	8006c38 <__ieee754_sqrt+0x12c>
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	3201      	adds	r2, #1
 8006c5a:	e7ef      	b.n	8006c3c <__ieee754_sqrt+0x130>
 8006c5c:	4688      	mov	r8, r1
 8006c5e:	e7bd      	b.n	8006bdc <__ieee754_sqrt+0xd0>
 8006c60:	7ff00000 	.word	0x7ff00000

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
